{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNDwZWnXLmCAg7TvxyMFOcn",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/huricane85/FPL-API-Fixture-modeler/blob/main/FPL_Model_v1.2%20API%20data%20only%2025.08.2023\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b6S0KMo-gSGQ",
        "outputId": "502e3ab5-27e2-4f99-aab9-b876866658e7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cloning into 'UnderstatScraper'...\n",
            "remote: Enumerating objects: 34, done.\u001b[K\n",
            "remote: Counting objects: 100% (34/34), done.\u001b[K\n",
            "remote: Compressing objects: 100% (31/31), done.\u001b[K\n",
            "remote: Total 34 (delta 11), reused 25 (delta 2), pack-reused 0\u001b[K\n",
            "Receiving objects: 100% (34/34), 268.30 KiB | 1.33 MiB/s, done.\n",
            "Resolving deltas: 100% (11/11), done.\n"
          ]
        }
      ],
      "source": [
        "!git clone https://github.com/doughagey/UnderstatScraper"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#!/usr/bin/env python3\n",
        "# -*- coding: utf-8 -*-\n",
        "\"\"\"\n",
        "Created on Mar 1 17:50:36 2020\n",
        "@author: doug hagey\n",
        "\"\"\"\n",
        "\n",
        "import pandas as pd\n",
        "import requests\n",
        "\n",
        "def scrape_understat(payload):\n",
        "    #Build request using url, headers (mimicking what Firefox does normally)\n",
        "    #Works best with verify=True as you won't get the ssl errors. Payload is\n",
        "    #taylored for each request\n",
        "    url = 'https://understat.com/main/getPlayersStats/'\n",
        "    headers = {'content-type':'application/json; charset=utf-8',\n",
        "    'Host': 'understat.com',\n",
        "    'User-Agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:73.0) Gecko/20100101 Firefox/73.0',\n",
        "    'Accept': 'application/json, text/javascript, */*; q=0.01',\n",
        "    'Accept-Encoding': 'gzip, deflate, br',\n",
        "    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n",
        "    'X-Requested-With': 'XMLHttpRequest',\n",
        "    'Content-Length': '310',\n",
        "    'Origin': 'https: // understat.com',\n",
        "    'Connection': 'keep - alive',\n",
        "    'Referer': 'https: // understat.com / league / EPL'\n",
        "    }\n",
        "    response = requests.post(url, data=payload, headers = headers, verify=True)\n",
        "    response_json = response.json()\n",
        "    inner_wrapper = response_json['response']\n",
        "    json_player_data = inner_wrapper['players']\n",
        "    return json_player_data\n",
        "\n",
        "def clean_df(player_df, weeks):\n",
        "    # Get rid of the columns that we don't care about\n",
        "    #player_df.drop(['yellow_cards','red_cards', 'xGChain','xGBuildup','games','time'], axis=1, inplace=True)\n",
        "    player_df  = player_df.rename(columns={'goals':'goals_'+weeks,'xG':'xG_'+weeks,'assists':'assists_'+weeks, 'xA':'xA_'+weeks, 'shots':'shots_'+weeks, 'key_passes':\n",
        "        'key_passes_'+weeks,'npg':'npg_'+weeks,'npxG':'npxG_'+weeks})\n",
        "    if weeks != '1wks':\n",
        "        player_df.drop(['position','team_title'], axis=1, inplace=True)\n",
        "    return(player_df)\n",
        "\n",
        "#Creprint('Getting data for last 1 matches')\n",
        "json_player_data = scrape_understat({'league':'EPL', 'season':'2023', 'n_last_matches': '1'})\n",
        "one_game_table = pd.DataFrame(json_player_data)\n",
        "one_game_df = clean_df(one_game_table,'1wks')\n",
        "\n",
        "\n",
        "print('Getting data for the whole season')\n",
        "json_player_data = scrape_understat({'league':'EPL', 'season':'2023'})\n",
        "season_table = pd.DataFrame(json_player_data)\n",
        "season_df = clean_df(season_table, 'season')\n",
        "\n",
        "print('Getting data for last 1 matches')\n",
        "json_player_data = scrape_understat({'league':'EPL', 'season':'2023', 'n_last_matches': '1'})\n",
        "one_game_table = pd.DataFrame(json_player_data)\n",
        "one_game_df = clean_df(one_game_table, '1wks')\n",
        "\n",
        "print('Merging Tables')\n",
        "EPL_player_df = pd.merge(one_game_df, season_df, on=['id','player_name'])\n",
        "EPL_player_df = pd.merge(EPL_player_df, one_game_df, on=['id','player_name'])\n",
        "\n",
        "\n",
        "print('Writing CSV File')\n",
        "EPL_player_df.to_csv('Understat_EPL_Player_Data_Combined 2021.csv', encoding='utf-8', index=False)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "D7aK55NHgZOt",
        "outputId": "abb4bac9-60da-4046-d37a-d3dc2ea6c818"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Getting data for the whole season\n",
            "Getting data for last 1 matches\n",
            "Merging Tables\n",
            "Writing CSV File\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "EPL_player_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 583
        },
        "id": "n__CYp9pmkGz",
        "outputId": "2ea65573-d6f2-474e-a65d-c6193bc150a8"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        id       player_name games_x time_x goals_1wks_x           xG_1wks_x  \\\n",
              "0     6049       Solly March       1     90            2  1.4262738227844238   \n",
              "1     6552      Bryan Mbeumo       1     90            2  1.6695406436920166   \n",
              "2      531   Michail Antonio       1     85            1  0.1654975563287735   \n",
              "3     1250     Mohamed Salah       1     90            1  1.8990148305892944   \n",
              "4     2517   Martin Odegaard       1     90            1   0.803106427192688   \n",
              "..     ...               ...     ...    ...          ...                 ...   \n",
              "337  11730  Anis Ben Slimane       1      9            0                   0   \n",
              "338  11731      Andre Brooks       1     14            0                   0   \n",
              "339  11807       Ian Maatsen       1      2            0                   0   \n",
              "340  11810     Mason Burstow       1      1            0                   0   \n",
              "341  11926     Edson √Ålvarez       1      1            0                   0   \n",
              "\n",
              "    assists_1wks_x            xA_1wks_x shots_1wks_x key_passes_1wks_x  ...  \\\n",
              "0                0  0.04624073952436447            5                 1  ...   \n",
              "1                0  0.09496916830539703            3                 1  ...   \n",
              "2                0                    0            2                 0  ...   \n",
              "3                0  0.05190268158912659            5                 2  ...   \n",
              "4                0   0.0701504796743393            3                 1  ...   \n",
              "..             ...                  ...          ...               ...  ...   \n",
              "337              0                    0            0                 0  ...   \n",
              "338              0                    0            0                 0  ...   \n",
              "339              0                    0            0                 0  ...   \n",
              "340              0                    0            0                 0  ...   \n",
              "341              0                    0            0                 0  ...   \n",
              "\n",
              "    shots_1wks_y key_passes_1wks_y yellow_cards red_cards position_y  \\\n",
              "0              5                 1            0         0          M   \n",
              "1              3                 1            0         0          F   \n",
              "2              2                 0            0         0          F   \n",
              "3              5                 2            0         0          F   \n",
              "4              3                 1            0         0          M   \n",
              "..           ...               ...          ...       ...        ...   \n",
              "337            0                 0            1         0          S   \n",
              "338            0                 0            0         0          S   \n",
              "339            0                 0            0         0          S   \n",
              "340            0                 0            0         0          S   \n",
              "341            0                 0            0         0          S   \n",
              "\n",
              "         team_title_y npg_1wks_y           npxG_1wks_y             xGChain  \\\n",
              "0            Brighton          2    1.4262738227844238   1.812856912612915   \n",
              "1           Brentford          1    0.9083718061447144  0.9083718061447144   \n",
              "2            West Ham          1    0.1654975563287735  0.1654975563287735   \n",
              "3           Liverpool          1    1.1378459930419922  0.5016481876373291   \n",
              "4             Arsenal          0  0.041974376887083054   0.598534107208252   \n",
              "..                ...        ...                   ...                 ...   \n",
              "337  Sheffield United          0                     0                   0   \n",
              "338  Sheffield United          0                     0                   0   \n",
              "339           Chelsea          0                     0                   0   \n",
              "340           Chelsea          0                     0                   0   \n",
              "341          West Ham          0                     0                   0   \n",
              "\n",
              "              xGBuildup  \n",
              "0     0.386583149433136  \n",
              "1                     0  \n",
              "2                     0  \n",
              "3                     0  \n",
              "4    0.5773450136184692  \n",
              "..                  ...  \n",
              "337                   0  \n",
              "338                   0  \n",
              "339                   0  \n",
              "340                   0  \n",
              "341                   0  \n",
              "\n",
              "[342 rows x 48 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3425ff78-aa39-4d30-9b45-62dfe8342758\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>player_name</th>\n",
              "      <th>games_x</th>\n",
              "      <th>time_x</th>\n",
              "      <th>goals_1wks_x</th>\n",
              "      <th>xG_1wks_x</th>\n",
              "      <th>assists_1wks_x</th>\n",
              "      <th>xA_1wks_x</th>\n",
              "      <th>shots_1wks_x</th>\n",
              "      <th>key_passes_1wks_x</th>\n",
              "      <th>...</th>\n",
              "      <th>shots_1wks_y</th>\n",
              "      <th>key_passes_1wks_y</th>\n",
              "      <th>yellow_cards</th>\n",
              "      <th>red_cards</th>\n",
              "      <th>position_y</th>\n",
              "      <th>team_title_y</th>\n",
              "      <th>npg_1wks_y</th>\n",
              "      <th>npxG_1wks_y</th>\n",
              "      <th>xGChain</th>\n",
              "      <th>xGBuildup</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>6049</td>\n",
              "      <td>Solly March</td>\n",
              "      <td>1</td>\n",
              "      <td>90</td>\n",
              "      <td>2</td>\n",
              "      <td>1.4262738227844238</td>\n",
              "      <td>0</td>\n",
              "      <td>0.04624073952436447</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>M</td>\n",
              "      <td>Brighton</td>\n",
              "      <td>2</td>\n",
              "      <td>1.4262738227844238</td>\n",
              "      <td>1.812856912612915</td>\n",
              "      <td>0.386583149433136</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>6552</td>\n",
              "      <td>Bryan Mbeumo</td>\n",
              "      <td>1</td>\n",
              "      <td>90</td>\n",
              "      <td>2</td>\n",
              "      <td>1.6695406436920166</td>\n",
              "      <td>0</td>\n",
              "      <td>0.09496916830539703</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>F</td>\n",
              "      <td>Brentford</td>\n",
              "      <td>1</td>\n",
              "      <td>0.9083718061447144</td>\n",
              "      <td>0.9083718061447144</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>531</td>\n",
              "      <td>Michail Antonio</td>\n",
              "      <td>1</td>\n",
              "      <td>85</td>\n",
              "      <td>1</td>\n",
              "      <td>0.1654975563287735</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>F</td>\n",
              "      <td>West Ham</td>\n",
              "      <td>1</td>\n",
              "      <td>0.1654975563287735</td>\n",
              "      <td>0.1654975563287735</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1250</td>\n",
              "      <td>Mohamed Salah</td>\n",
              "      <td>1</td>\n",
              "      <td>90</td>\n",
              "      <td>1</td>\n",
              "      <td>1.8990148305892944</td>\n",
              "      <td>0</td>\n",
              "      <td>0.05190268158912659</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>F</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>1</td>\n",
              "      <td>1.1378459930419922</td>\n",
              "      <td>0.5016481876373291</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2517</td>\n",
              "      <td>Martin Odegaard</td>\n",
              "      <td>1</td>\n",
              "      <td>90</td>\n",
              "      <td>1</td>\n",
              "      <td>0.803106427192688</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0701504796743393</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>M</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>0</td>\n",
              "      <td>0.041974376887083054</td>\n",
              "      <td>0.598534107208252</td>\n",
              "      <td>0.5773450136184692</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>337</th>\n",
              "      <td>11730</td>\n",
              "      <td>Anis Ben Slimane</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>S</td>\n",
              "      <td>Sheffield United</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>338</th>\n",
              "      <td>11731</td>\n",
              "      <td>Andre Brooks</td>\n",
              "      <td>1</td>\n",
              "      <td>14</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>S</td>\n",
              "      <td>Sheffield United</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>339</th>\n",
              "      <td>11807</td>\n",
              "      <td>Ian Maatsen</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>S</td>\n",
              "      <td>Chelsea</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>340</th>\n",
              "      <td>11810</td>\n",
              "      <td>Mason Burstow</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>S</td>\n",
              "      <td>Chelsea</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>341</th>\n",
              "      <td>11926</td>\n",
              "      <td>Edson √Ålvarez</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>S</td>\n",
              "      <td>West Ham</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>342 rows √ó 48 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3425ff78-aa39-4d30-9b45-62dfe8342758')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3425ff78-aa39-4d30-9b45-62dfe8342758 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3425ff78-aa39-4d30-9b45-62dfe8342758');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-bd860a0f-9155-42c0-9ec0-180a9fdbe0d9\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bd860a0f-9155-42c0-9ec0-180a9fdbe0d9')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-bd860a0f-9155-42c0-9ec0-180a9fdbe0d9 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "one_game_df.to_csv('one_game_df.csv', encoding='utf-8', index=False)\n",
        "one_game_df['time'] = one_game_df['time'].astype(int)\n",
        "one_game_df = one_game_df[one_game_df['time'] > 40]\n",
        "one_game_df['goals_1wks'] = one_game_df['goals_1wks'].astype(int)\n",
        "one_game_df['xG_1wks'] = one_game_df['xG_1wks'].astype(float)\n",
        "one_game_df['xgdifference'] = one_game_df.goals_1wks - one_game_df.xG_1wks\n",
        "one_game_df['assists_1wks'] = one_game_df['assists_1wks'].astype(int)\n",
        "one_game_df['xA_1wks'] = one_game_df['xA_1wks'].astype(float)\n",
        "one_game_df['xAdifference'] = one_game_df.assists_1wks - one_game_df.xA_1wks\n",
        "seasonedit = one_game_df.drop(columns=[ 'yellow_cards','red_cards','time'])\n",
        "sortXgDifference = seasonedit.sort_values('xgdifference')\n",
        "sortXgDifference.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 554
        },
        "id": "IrXPzyJNg3ui",
        "outputId": "ee25cbaf-c0a5-40c4-ad10-ae730e664c77"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        id           player_name games  goals_1wks   xG_1wks  assists_1wks  \\\n",
              "328  11716  Pelly Ruddock Mpanzu     1           0  0.903205             0   \n",
              "3     1250         Mohamed Salah     1           1  1.899015             0   \n",
              "149   6482         Eddie Nketiah     1           0  0.895559             0   \n",
              "313  11356        Enzo Fern√°ndez     1           0  0.790742             0   \n",
              "78    1228       Bruno Fernandes     1           0  0.774683             0   \n",
              "46     556       Marcus Rashford     1           0  0.746908             0   \n",
              "82    1299          Mario Lemina     1           0  0.655295             0   \n",
              "170   7080         Matheus Cunha     1           0  0.601140             0   \n",
              "112   3697       Odsonne Edouard     1           0  0.494164             0   \n",
              "96    2248              Casemiro     1           0  0.490906             0   \n",
              "\n",
              "      xA_1wks shots_1wks key_passes_1wks position               team_title  \\\n",
              "328  0.000000          2               0        M                    Luton   \n",
              "3    0.051903          5               2        F                Liverpool   \n",
              "149  0.160113          3               2        F                  Arsenal   \n",
              "313  0.180368          2               4        M                  Chelsea   \n",
              "78   0.744419          6               4        M        Manchester United   \n",
              "46   0.156583          3               2        F        Manchester United   \n",
              "82   0.000000          2               0        M  Wolverhampton Wanderers   \n",
              "170  0.517451          1               3        M  Wolverhampton Wanderers   \n",
              "112  0.017357          3               1        F           Crystal Palace   \n",
              "96   0.000000          5               0        M        Manchester United   \n",
              "\n",
              "    npg_1wks            npxG_1wks             xGChain             xGBuildup  \\\n",
              "328        0   0.9032046794891357  0.9032046794891357                     0   \n",
              "3          1   1.1378459930419922  0.5016481876373291                     0   \n",
              "149        0   0.8955589532852173  1.1959657669067383   0.14029400050640106   \n",
              "313        0  0.02957327291369438  0.2193574160337448   0.11851910501718521   \n",
              "78         0   0.7746830582618713  1.5226181745529175    0.7727722525596619   \n",
              "46         0   0.7469078898429871    1.44826078414917     0.645220160484314   \n",
              "82         0     0.65529465675354  0.3670603334903717     0.322572261095047   \n",
              "170        0   0.6011396646499634  0.5488798022270203   0.12041421234607697   \n",
              "112        0  0.49416351318359375  0.5515196919441223  0.039999496191740036   \n",
              "96         0  0.49090635776519775  1.0607949495315552    0.9395483732223511   \n",
              "\n",
              "     xgdifference  xAdifference  \n",
              "328     -0.903205      0.000000  \n",
              "3       -0.899015     -0.051903  \n",
              "149     -0.895559     -0.160113  \n",
              "313     -0.790742     -0.180368  \n",
              "78      -0.774683     -0.744419  \n",
              "46      -0.746908     -0.156583  \n",
              "82      -0.655295      0.000000  \n",
              "170     -0.601140     -0.517451  \n",
              "112     -0.494164     -0.017357  \n",
              "96      -0.490906      0.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-48f2c880-2588-475a-9c49-acd087fad5c7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>player_name</th>\n",
              "      <th>games</th>\n",
              "      <th>goals_1wks</th>\n",
              "      <th>xG_1wks</th>\n",
              "      <th>assists_1wks</th>\n",
              "      <th>xA_1wks</th>\n",
              "      <th>shots_1wks</th>\n",
              "      <th>key_passes_1wks</th>\n",
              "      <th>position</th>\n",
              "      <th>team_title</th>\n",
              "      <th>npg_1wks</th>\n",
              "      <th>npxG_1wks</th>\n",
              "      <th>xGChain</th>\n",
              "      <th>xGBuildup</th>\n",
              "      <th>xgdifference</th>\n",
              "      <th>xAdifference</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>328</th>\n",
              "      <td>11716</td>\n",
              "      <td>Pelly Ruddock Mpanzu</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.903205</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>M</td>\n",
              "      <td>Luton</td>\n",
              "      <td>0</td>\n",
              "      <td>0.9032046794891357</td>\n",
              "      <td>0.9032046794891357</td>\n",
              "      <td>0</td>\n",
              "      <td>-0.903205</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1250</td>\n",
              "      <td>Mohamed Salah</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1.899015</td>\n",
              "      <td>0</td>\n",
              "      <td>0.051903</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>F</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>1</td>\n",
              "      <td>1.1378459930419922</td>\n",
              "      <td>0.5016481876373291</td>\n",
              "      <td>0</td>\n",
              "      <td>-0.899015</td>\n",
              "      <td>-0.051903</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>149</th>\n",
              "      <td>6482</td>\n",
              "      <td>Eddie Nketiah</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.895559</td>\n",
              "      <td>0</td>\n",
              "      <td>0.160113</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>F</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>0</td>\n",
              "      <td>0.8955589532852173</td>\n",
              "      <td>1.1959657669067383</td>\n",
              "      <td>0.14029400050640106</td>\n",
              "      <td>-0.895559</td>\n",
              "      <td>-0.160113</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>313</th>\n",
              "      <td>11356</td>\n",
              "      <td>Enzo Fern√°ndez</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.790742</td>\n",
              "      <td>0</td>\n",
              "      <td>0.180368</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>M</td>\n",
              "      <td>Chelsea</td>\n",
              "      <td>0</td>\n",
              "      <td>0.02957327291369438</td>\n",
              "      <td>0.2193574160337448</td>\n",
              "      <td>0.11851910501718521</td>\n",
              "      <td>-0.790742</td>\n",
              "      <td>-0.180368</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>78</th>\n",
              "      <td>1228</td>\n",
              "      <td>Bruno Fernandes</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.774683</td>\n",
              "      <td>0</td>\n",
              "      <td>0.744419</td>\n",
              "      <td>6</td>\n",
              "      <td>4</td>\n",
              "      <td>M</td>\n",
              "      <td>Manchester United</td>\n",
              "      <td>0</td>\n",
              "      <td>0.7746830582618713</td>\n",
              "      <td>1.5226181745529175</td>\n",
              "      <td>0.7727722525596619</td>\n",
              "      <td>-0.774683</td>\n",
              "      <td>-0.744419</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46</th>\n",
              "      <td>556</td>\n",
              "      <td>Marcus Rashford</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.746908</td>\n",
              "      <td>0</td>\n",
              "      <td>0.156583</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>F</td>\n",
              "      <td>Manchester United</td>\n",
              "      <td>0</td>\n",
              "      <td>0.7469078898429871</td>\n",
              "      <td>1.44826078414917</td>\n",
              "      <td>0.645220160484314</td>\n",
              "      <td>-0.746908</td>\n",
              "      <td>-0.156583</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>82</th>\n",
              "      <td>1299</td>\n",
              "      <td>Mario Lemina</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.655295</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>M</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>0</td>\n",
              "      <td>0.65529465675354</td>\n",
              "      <td>0.3670603334903717</td>\n",
              "      <td>0.322572261095047</td>\n",
              "      <td>-0.655295</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>170</th>\n",
              "      <td>7080</td>\n",
              "      <td>Matheus Cunha</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.601140</td>\n",
              "      <td>0</td>\n",
              "      <td>0.517451</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>M</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>0</td>\n",
              "      <td>0.6011396646499634</td>\n",
              "      <td>0.5488798022270203</td>\n",
              "      <td>0.12041421234607697</td>\n",
              "      <td>-0.601140</td>\n",
              "      <td>-0.517451</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>112</th>\n",
              "      <td>3697</td>\n",
              "      <td>Odsonne Edouard</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.494164</td>\n",
              "      <td>0</td>\n",
              "      <td>0.017357</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>F</td>\n",
              "      <td>Crystal Palace</td>\n",
              "      <td>0</td>\n",
              "      <td>0.49416351318359375</td>\n",
              "      <td>0.5515196919441223</td>\n",
              "      <td>0.039999496191740036</td>\n",
              "      <td>-0.494164</td>\n",
              "      <td>-0.017357</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96</th>\n",
              "      <td>2248</td>\n",
              "      <td>Casemiro</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.490906</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>M</td>\n",
              "      <td>Manchester United</td>\n",
              "      <td>0</td>\n",
              "      <td>0.49090635776519775</td>\n",
              "      <td>1.0607949495315552</td>\n",
              "      <td>0.9395483732223511</td>\n",
              "      <td>-0.490906</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-48f2c880-2588-475a-9c49-acd087fad5c7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-48f2c880-2588-475a-9c49-acd087fad5c7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-48f2c880-2588-475a-9c49-acd087fad5c7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1a2a2a1f-526f-46bf-b01b-985a5aa7c1bb\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1a2a2a1f-526f-46bf-b01b-985a5aa7c1bb')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1a2a2a1f-526f-46bf-b01b-985a5aa7c1bb button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sortXgDifference.tail(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 450
        },
        "id": "UxuLfRINhwx7",
        "outputId": "73aa5267-14b9-4d8e-cae3-8cde155288e9"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       id         player_name games  goals_1wks   xG_1wks  assists_1wks  \\\n",
              "19  10806        Kaoru Mitoma     1           1  0.457477             1   \n",
              "14   7814       Taiwo Awoniyi     1           1  0.456102             0   \n",
              "0    6049         Solly March     1           2  1.426274             0   \n",
              "11   6935         Naif Aguerd     1           1  0.389935             0   \n",
              "20  10846      Juli√°n √Ålvarez     1           1  0.305476             0   \n",
              "18  10408           Luis D√≠az     1           1  0.189660             0   \n",
              "2     531     Michail Antonio     1           1  0.165498             0   \n",
              "21  11363     Antoine Semenyo     1           1  0.135762             0   \n",
              "17   9356  Carney Chukwuemeka     1           1  0.068995             0   \n",
              "25  11839       Gustavo Hamer     1           1  0.020586             0   \n",
              "\n",
              "     xA_1wks shots_1wks key_passes_1wks position         team_title npg_1wks  \\\n",
              "19  0.625281          1               4        M           Brighton        1   \n",
              "14  0.076050          1               2        F  Nottingham Forest        1   \n",
              "0   0.046241          5               1        M           Brighton        2   \n",
              "11  0.000000          1               0        D           West Ham        1   \n",
              "20  0.156718          1               2        M    Manchester City        1   \n",
              "18  0.240443          3               2        F          Liverpool        1   \n",
              "2   0.000000          2               0        F           West Ham        1   \n",
              "21  0.298367          3               1        M        Bournemouth        1   \n",
              "17  0.104601          1               2        M            Chelsea        1   \n",
              "25  0.052756          1               1        M   Sheffield United        1   \n",
              "\n",
              "              npxG_1wks              xGChain            xGBuildup  \\\n",
              "19   0.4574770927429199   1.1424018144607544  0.05964342877268791   \n",
              "14   0.4561017155647278   0.5321516394615173                    0   \n",
              "0    1.4262738227844238    1.812856912612915    0.386583149433136   \n",
              "11   0.3899350166320801  0.05836445465683937  0.05836445465683937   \n",
              "20  0.30547618865966797   0.6939631700515747  0.34507960081100464   \n",
              "18  0.18966040015220642   0.6077734231948853  0.29410865902900696   \n",
              "2    0.1654975563287735   0.1654975563287735                    0   \n",
              "21  0.13576193153858185   0.4341292977333069                    0   \n",
              "17  0.06899454444646835  0.17359596490859985                    0   \n",
              "25  0.02058557979762554                    0                    0   \n",
              "\n",
              "    xgdifference  xAdifference  \n",
              "19      0.542523      0.374719  \n",
              "14      0.543898     -0.076050  \n",
              "0       0.573726     -0.046241  \n",
              "11      0.610065      0.000000  \n",
              "20      0.694524     -0.156718  \n",
              "18      0.810340     -0.240443  \n",
              "2       0.834502      0.000000  \n",
              "21      0.864238     -0.298367  \n",
              "17      0.931005     -0.104601  \n",
              "25      0.979414     -0.052756  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ac1fe6ed-6f2d-4b22-8668-cd888f559221\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>player_name</th>\n",
              "      <th>games</th>\n",
              "      <th>goals_1wks</th>\n",
              "      <th>xG_1wks</th>\n",
              "      <th>assists_1wks</th>\n",
              "      <th>xA_1wks</th>\n",
              "      <th>shots_1wks</th>\n",
              "      <th>key_passes_1wks</th>\n",
              "      <th>position</th>\n",
              "      <th>team_title</th>\n",
              "      <th>npg_1wks</th>\n",
              "      <th>npxG_1wks</th>\n",
              "      <th>xGChain</th>\n",
              "      <th>xGBuildup</th>\n",
              "      <th>xgdifference</th>\n",
              "      <th>xAdifference</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>10806</td>\n",
              "      <td>Kaoru Mitoma</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0.457477</td>\n",
              "      <td>1</td>\n",
              "      <td>0.625281</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>M</td>\n",
              "      <td>Brighton</td>\n",
              "      <td>1</td>\n",
              "      <td>0.4574770927429199</td>\n",
              "      <td>1.1424018144607544</td>\n",
              "      <td>0.05964342877268791</td>\n",
              "      <td>0.542523</td>\n",
              "      <td>0.374719</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>7814</td>\n",
              "      <td>Taiwo Awoniyi</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0.456102</td>\n",
              "      <td>0</td>\n",
              "      <td>0.076050</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>F</td>\n",
              "      <td>Nottingham Forest</td>\n",
              "      <td>1</td>\n",
              "      <td>0.4561017155647278</td>\n",
              "      <td>0.5321516394615173</td>\n",
              "      <td>0</td>\n",
              "      <td>0.543898</td>\n",
              "      <td>-0.076050</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>6049</td>\n",
              "      <td>Solly March</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1.426274</td>\n",
              "      <td>0</td>\n",
              "      <td>0.046241</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>M</td>\n",
              "      <td>Brighton</td>\n",
              "      <td>2</td>\n",
              "      <td>1.4262738227844238</td>\n",
              "      <td>1.812856912612915</td>\n",
              "      <td>0.386583149433136</td>\n",
              "      <td>0.573726</td>\n",
              "      <td>-0.046241</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>6935</td>\n",
              "      <td>Naif Aguerd</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0.389935</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>D</td>\n",
              "      <td>West Ham</td>\n",
              "      <td>1</td>\n",
              "      <td>0.3899350166320801</td>\n",
              "      <td>0.05836445465683937</td>\n",
              "      <td>0.05836445465683937</td>\n",
              "      <td>0.610065</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>10846</td>\n",
              "      <td>Juli√°n √Ålvarez</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0.305476</td>\n",
              "      <td>0</td>\n",
              "      <td>0.156718</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>M</td>\n",
              "      <td>Manchester City</td>\n",
              "      <td>1</td>\n",
              "      <td>0.30547618865966797</td>\n",
              "      <td>0.6939631700515747</td>\n",
              "      <td>0.34507960081100464</td>\n",
              "      <td>0.694524</td>\n",
              "      <td>-0.156718</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>10408</td>\n",
              "      <td>Luis D√≠az</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0.189660</td>\n",
              "      <td>0</td>\n",
              "      <td>0.240443</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>F</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>1</td>\n",
              "      <td>0.18966040015220642</td>\n",
              "      <td>0.6077734231948853</td>\n",
              "      <td>0.29410865902900696</td>\n",
              "      <td>0.810340</td>\n",
              "      <td>-0.240443</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>531</td>\n",
              "      <td>Michail Antonio</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0.165498</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>F</td>\n",
              "      <td>West Ham</td>\n",
              "      <td>1</td>\n",
              "      <td>0.1654975563287735</td>\n",
              "      <td>0.1654975563287735</td>\n",
              "      <td>0</td>\n",
              "      <td>0.834502</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>11363</td>\n",
              "      <td>Antoine Semenyo</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0.135762</td>\n",
              "      <td>0</td>\n",
              "      <td>0.298367</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>M</td>\n",
              "      <td>Bournemouth</td>\n",
              "      <td>1</td>\n",
              "      <td>0.13576193153858185</td>\n",
              "      <td>0.4341292977333069</td>\n",
              "      <td>0</td>\n",
              "      <td>0.864238</td>\n",
              "      <td>-0.298367</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>9356</td>\n",
              "      <td>Carney Chukwuemeka</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0.068995</td>\n",
              "      <td>0</td>\n",
              "      <td>0.104601</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>M</td>\n",
              "      <td>Chelsea</td>\n",
              "      <td>1</td>\n",
              "      <td>0.06899454444646835</td>\n",
              "      <td>0.17359596490859985</td>\n",
              "      <td>0</td>\n",
              "      <td>0.931005</td>\n",
              "      <td>-0.104601</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>11839</td>\n",
              "      <td>Gustavo Hamer</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0.020586</td>\n",
              "      <td>0</td>\n",
              "      <td>0.052756</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>M</td>\n",
              "      <td>Sheffield United</td>\n",
              "      <td>1</td>\n",
              "      <td>0.02058557979762554</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.979414</td>\n",
              "      <td>-0.052756</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ac1fe6ed-6f2d-4b22-8668-cd888f559221')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ac1fe6ed-6f2d-4b22-8668-cd888f559221 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ac1fe6ed-6f2d-4b22-8668-cd888f559221');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-5804483a-2160-41f0-b25a-954caf3e66b4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5804483a-2160-41f0-b25a-954caf3e66b4')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-5804483a-2160-41f0-b25a-954caf3e66b4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "one_game_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 600
        },
        "id": "NDPdgpJUVBBZ",
        "outputId": "4761c283-4f82-4590-c25f-da8a70e39b8c"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        id           player_name games  time  goals_1wks   xG_1wks  \\\n",
              "0     6049           Solly March     1    90           2  1.426274   \n",
              "1     6552          Bryan Mbeumo     1    90           2  1.669541   \n",
              "2      531       Michail Antonio     1    85           1  0.165498   \n",
              "3     1250         Mohamed Salah     1    90           1  1.899015   \n",
              "4     2517       Martin Odegaard     1    90           1  0.803106   \n",
              "..     ...                   ...   ...   ...         ...       ...   \n",
              "326  11714           Tom Lockyer     1    90           0  0.000000   \n",
              "327  11715         Mads Andersen     1    77           0  0.000000   \n",
              "328  11716  Pelly Ruddock Mpanzu     1    89           0  0.903205   \n",
              "329  11718        Elijah Adebayo     1    65           0  0.000000   \n",
              "336  11729          B√©nie Traor√©     1    84           0  0.321223   \n",
              "\n",
              "     assists_1wks   xA_1wks shots_1wks key_passes_1wks yellow_cards red_cards  \\\n",
              "0               0  0.046241          5               1            0         0   \n",
              "1               0  0.094969          3               1            0         0   \n",
              "2               0  0.000000          2               0            0         0   \n",
              "3               0  0.051903          5               2            0         0   \n",
              "4               0  0.070150          3               1            0         0   \n",
              "..            ...       ...        ...             ...          ...       ...   \n",
              "326             0  0.000000          0               0            0         0   \n",
              "327             0  0.000000          0               0            1         0   \n",
              "328             0  0.000000          2               0            0         0   \n",
              "329             0  0.066602          0               1            0         0   \n",
              "336             0  0.000000          1               0            0         0   \n",
              "\n",
              "    position        team_title npg_1wks             npxG_1wks  \\\n",
              "0          M          Brighton        2    1.4262738227844238   \n",
              "1          F         Brentford        1    0.9083718061447144   \n",
              "2          F          West Ham        1    0.1654975563287735   \n",
              "3          F         Liverpool        1    1.1378459930419922   \n",
              "4          M           Arsenal        0  0.041974376887083054   \n",
              "..       ...               ...      ...                   ...   \n",
              "326        D             Luton        0                     0   \n",
              "327        D             Luton        0                     0   \n",
              "328        M             Luton        0    0.9032046794891357   \n",
              "329        F             Luton        0                     0   \n",
              "336        M  Sheffield United        0    0.3212226927280426   \n",
              "\n",
              "                 xGChain            xGBuildup  xgdifference  xAdifference  \n",
              "0      1.812856912612915    0.386583149433136      0.573726     -0.046241  \n",
              "1     0.9083718061447144                    0      0.330459     -0.094969  \n",
              "2     0.1654975563287735                    0      0.834502      0.000000  \n",
              "3     0.5016481876373291                    0     -0.899015     -0.051903  \n",
              "4      0.598534107208252   0.5773450136184692      0.196894     -0.070150  \n",
              "..                   ...                  ...           ...           ...  \n",
              "326                    0                    0      0.000000      0.000000  \n",
              "327  0.04231686517596245  0.04231686517596245      0.000000      0.000000  \n",
              "328   0.9032046794891357                    0     -0.903205      0.000000  \n",
              "329  0.10891849547624588  0.04231686517596245      0.000000     -0.066602  \n",
              "336   0.3212226927280426                    0     -0.321223      0.000000  \n",
              "\n",
              "[233 rows x 20 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-18a8ea59-ef9d-4003-bd88-d21d84a4e376\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>player_name</th>\n",
              "      <th>games</th>\n",
              "      <th>time</th>\n",
              "      <th>goals_1wks</th>\n",
              "      <th>xG_1wks</th>\n",
              "      <th>assists_1wks</th>\n",
              "      <th>xA_1wks</th>\n",
              "      <th>shots_1wks</th>\n",
              "      <th>key_passes_1wks</th>\n",
              "      <th>yellow_cards</th>\n",
              "      <th>red_cards</th>\n",
              "      <th>position</th>\n",
              "      <th>team_title</th>\n",
              "      <th>npg_1wks</th>\n",
              "      <th>npxG_1wks</th>\n",
              "      <th>xGChain</th>\n",
              "      <th>xGBuildup</th>\n",
              "      <th>xgdifference</th>\n",
              "      <th>xAdifference</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>6049</td>\n",
              "      <td>Solly March</td>\n",
              "      <td>1</td>\n",
              "      <td>90</td>\n",
              "      <td>2</td>\n",
              "      <td>1.426274</td>\n",
              "      <td>0</td>\n",
              "      <td>0.046241</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>M</td>\n",
              "      <td>Brighton</td>\n",
              "      <td>2</td>\n",
              "      <td>1.4262738227844238</td>\n",
              "      <td>1.812856912612915</td>\n",
              "      <td>0.386583149433136</td>\n",
              "      <td>0.573726</td>\n",
              "      <td>-0.046241</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>6552</td>\n",
              "      <td>Bryan Mbeumo</td>\n",
              "      <td>1</td>\n",
              "      <td>90</td>\n",
              "      <td>2</td>\n",
              "      <td>1.669541</td>\n",
              "      <td>0</td>\n",
              "      <td>0.094969</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>F</td>\n",
              "      <td>Brentford</td>\n",
              "      <td>1</td>\n",
              "      <td>0.9083718061447144</td>\n",
              "      <td>0.9083718061447144</td>\n",
              "      <td>0</td>\n",
              "      <td>0.330459</td>\n",
              "      <td>-0.094969</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>531</td>\n",
              "      <td>Michail Antonio</td>\n",
              "      <td>1</td>\n",
              "      <td>85</td>\n",
              "      <td>1</td>\n",
              "      <td>0.165498</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>F</td>\n",
              "      <td>West Ham</td>\n",
              "      <td>1</td>\n",
              "      <td>0.1654975563287735</td>\n",
              "      <td>0.1654975563287735</td>\n",
              "      <td>0</td>\n",
              "      <td>0.834502</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1250</td>\n",
              "      <td>Mohamed Salah</td>\n",
              "      <td>1</td>\n",
              "      <td>90</td>\n",
              "      <td>1</td>\n",
              "      <td>1.899015</td>\n",
              "      <td>0</td>\n",
              "      <td>0.051903</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>F</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>1</td>\n",
              "      <td>1.1378459930419922</td>\n",
              "      <td>0.5016481876373291</td>\n",
              "      <td>0</td>\n",
              "      <td>-0.899015</td>\n",
              "      <td>-0.051903</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2517</td>\n",
              "      <td>Martin Odegaard</td>\n",
              "      <td>1</td>\n",
              "      <td>90</td>\n",
              "      <td>1</td>\n",
              "      <td>0.803106</td>\n",
              "      <td>0</td>\n",
              "      <td>0.070150</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>M</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>0</td>\n",
              "      <td>0.041974376887083054</td>\n",
              "      <td>0.598534107208252</td>\n",
              "      <td>0.5773450136184692</td>\n",
              "      <td>0.196894</td>\n",
              "      <td>-0.070150</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>326</th>\n",
              "      <td>11714</td>\n",
              "      <td>Tom Lockyer</td>\n",
              "      <td>1</td>\n",
              "      <td>90</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>D</td>\n",
              "      <td>Luton</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>327</th>\n",
              "      <td>11715</td>\n",
              "      <td>Mads Andersen</td>\n",
              "      <td>1</td>\n",
              "      <td>77</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>D</td>\n",
              "      <td>Luton</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.04231686517596245</td>\n",
              "      <td>0.04231686517596245</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>328</th>\n",
              "      <td>11716</td>\n",
              "      <td>Pelly Ruddock Mpanzu</td>\n",
              "      <td>1</td>\n",
              "      <td>89</td>\n",
              "      <td>0</td>\n",
              "      <td>0.903205</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>M</td>\n",
              "      <td>Luton</td>\n",
              "      <td>0</td>\n",
              "      <td>0.9032046794891357</td>\n",
              "      <td>0.9032046794891357</td>\n",
              "      <td>0</td>\n",
              "      <td>-0.903205</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>329</th>\n",
              "      <td>11718</td>\n",
              "      <td>Elijah Adebayo</td>\n",
              "      <td>1</td>\n",
              "      <td>65</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>0.066602</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>F</td>\n",
              "      <td>Luton</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.10891849547624588</td>\n",
              "      <td>0.04231686517596245</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-0.066602</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>336</th>\n",
              "      <td>11729</td>\n",
              "      <td>B√©nie Traor√©</td>\n",
              "      <td>1</td>\n",
              "      <td>84</td>\n",
              "      <td>0</td>\n",
              "      <td>0.321223</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>M</td>\n",
              "      <td>Sheffield United</td>\n",
              "      <td>0</td>\n",
              "      <td>0.3212226927280426</td>\n",
              "      <td>0.3212226927280426</td>\n",
              "      <td>0</td>\n",
              "      <td>-0.321223</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>233 rows √ó 20 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-18a8ea59-ef9d-4003-bd88-d21d84a4e376')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-18a8ea59-ef9d-4003-bd88-d21d84a4e376 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-18a8ea59-ef9d-4003-bd88-d21d84a4e376');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-49cc32ba-a454-46ab-a9f6-c80f43b2a8e2\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-49cc32ba-a454-46ab-a9f6-c80f43b2a8e2')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-49cc32ba-a454-46ab-a9f6-c80f43b2a8e2 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "onegamedftidy = one_game_df.drop(columns=[\n",
        " 'time',\n",
        " 'goals_1wks',\n",
        " 'assists_1wks',\n",
        " 'shots_1wks',\n",
        " 'key_passes_1wks',\n",
        " 'yellow_cards',\n",
        " 'red_cards',\n",
        " 'npg_1wks',\n",
        " 'npxG_1wks',\n",
        " 'xGChain',\n",
        " 'xGBuildup',\n",
        " 'xgdifference',\n",
        " 'xAdifference'])\n",
        "onegamedftidy"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "RKf0tUGEh8FV",
        "outputId": "94650361-eec2-4722-8e0e-ac54920708a0"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        id           player_name games   xG_1wks   xA_1wks position  \\\n",
              "0     6049           Solly March     1  1.426274  0.046241        M   \n",
              "1     6552          Bryan Mbeumo     1  1.669541  0.094969        F   \n",
              "2      531       Michail Antonio     1  0.165498  0.000000        F   \n",
              "3     1250         Mohamed Salah     1  1.899015  0.051903        F   \n",
              "4     2517       Martin Odegaard     1  0.803106  0.070150        M   \n",
              "..     ...                   ...   ...       ...       ...      ...   \n",
              "326  11714           Tom Lockyer     1  0.000000  0.000000        D   \n",
              "327  11715         Mads Andersen     1  0.000000  0.000000        D   \n",
              "328  11716  Pelly Ruddock Mpanzu     1  0.903205  0.000000        M   \n",
              "329  11718        Elijah Adebayo     1  0.000000  0.066602        F   \n",
              "336  11729          B√©nie Traor√©     1  0.321223  0.000000        M   \n",
              "\n",
              "           team_title  \n",
              "0            Brighton  \n",
              "1           Brentford  \n",
              "2            West Ham  \n",
              "3           Liverpool  \n",
              "4             Arsenal  \n",
              "..                ...  \n",
              "326             Luton  \n",
              "327             Luton  \n",
              "328             Luton  \n",
              "329             Luton  \n",
              "336  Sheffield United  \n",
              "\n",
              "[233 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-70b05f78-100d-48be-9675-83b3d7db4e0d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>player_name</th>\n",
              "      <th>games</th>\n",
              "      <th>xG_1wks</th>\n",
              "      <th>xA_1wks</th>\n",
              "      <th>position</th>\n",
              "      <th>team_title</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>6049</td>\n",
              "      <td>Solly March</td>\n",
              "      <td>1</td>\n",
              "      <td>1.426274</td>\n",
              "      <td>0.046241</td>\n",
              "      <td>M</td>\n",
              "      <td>Brighton</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>6552</td>\n",
              "      <td>Bryan Mbeumo</td>\n",
              "      <td>1</td>\n",
              "      <td>1.669541</td>\n",
              "      <td>0.094969</td>\n",
              "      <td>F</td>\n",
              "      <td>Brentford</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>531</td>\n",
              "      <td>Michail Antonio</td>\n",
              "      <td>1</td>\n",
              "      <td>0.165498</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>F</td>\n",
              "      <td>West Ham</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1250</td>\n",
              "      <td>Mohamed Salah</td>\n",
              "      <td>1</td>\n",
              "      <td>1.899015</td>\n",
              "      <td>0.051903</td>\n",
              "      <td>F</td>\n",
              "      <td>Liverpool</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2517</td>\n",
              "      <td>Martin Odegaard</td>\n",
              "      <td>1</td>\n",
              "      <td>0.803106</td>\n",
              "      <td>0.070150</td>\n",
              "      <td>M</td>\n",
              "      <td>Arsenal</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>326</th>\n",
              "      <td>11714</td>\n",
              "      <td>Tom Lockyer</td>\n",
              "      <td>1</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>D</td>\n",
              "      <td>Luton</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>327</th>\n",
              "      <td>11715</td>\n",
              "      <td>Mads Andersen</td>\n",
              "      <td>1</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>D</td>\n",
              "      <td>Luton</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>328</th>\n",
              "      <td>11716</td>\n",
              "      <td>Pelly Ruddock Mpanzu</td>\n",
              "      <td>1</td>\n",
              "      <td>0.903205</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>M</td>\n",
              "      <td>Luton</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>329</th>\n",
              "      <td>11718</td>\n",
              "      <td>Elijah Adebayo</td>\n",
              "      <td>1</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.066602</td>\n",
              "      <td>F</td>\n",
              "      <td>Luton</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>336</th>\n",
              "      <td>11729</td>\n",
              "      <td>B√©nie Traor√©</td>\n",
              "      <td>1</td>\n",
              "      <td>0.321223</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>M</td>\n",
              "      <td>Sheffield United</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>233 rows √ó 7 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-70b05f78-100d-48be-9675-83b3d7db4e0d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-70b05f78-100d-48be-9675-83b3d7db4e0d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-70b05f78-100d-48be-9675-83b3d7db4e0d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-157cd6f2-b7b5-4bef-8ae4-ee2f2a3ae51b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-157cd6f2-b7b5-4bef-8ae4-ee2f2a3ae51b')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-157cd6f2-b7b5-4bef-8ae4-ee2f2a3ae51b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!git clone https://github.com/pratos/fpl-mappers\n",
        "!git clone https://github.com/ChrisMusson/FPL-ID-Map\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "B9kCj8OeiKGn",
        "outputId": "d96dfa84-7bcb-47b3-ddbb-5cedd74031be"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cloning into 'fpl-mappers'...\n",
            "remote: Enumerating objects: 94, done.\u001b[K\n",
            "remote: Counting objects: 100% (94/94), done.\u001b[K\n",
            "remote: Compressing objects: 100% (56/56), done.\u001b[K\n",
            "remote: Total 94 (delta 32), reused 89 (delta 30), pack-reused 0\u001b[K\n",
            "Receiving objects: 100% (94/94), 217.69 KiB | 1.41 MiB/s, done.\n",
            "Resolving deltas: 100% (32/32), done.\n",
            "Cloning into 'FPL-ID-Map'...\n",
            "remote: Enumerating objects: 242, done.\u001b[K\n",
            "remote: Counting objects: 100% (242/242), done.\u001b[K\n",
            "remote: Compressing objects: 100% (120/120), done.\u001b[K\n",
            "remote: Total 242 (delta 176), reused 188 (delta 122), pack-reused 0\u001b[K\n",
            "Receiving objects: 100% (242/242), 273.05 KiB | 1.55 MiB/s, done.\n",
            "Resolving deltas: 100% (176/176), done.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data1 = pd.read_csv('/content/FPL-ID-Map/Understat.csv', on_bad_lines='skip')\n",
        "data2 = pd.read_csv('/content/FPL-ID-Map/FPL/22-23.csv', on_bad_lines='skip')\n",
        "understatwithfplid1 = pd.merge(data2,\n",
        "                     data1,\n",
        "                     on ='code',\n",
        "                     how ='left')\n",
        "understatid = understatwithfplid1.drop(columns=[\n",
        "'code',\n",
        " 'first_name_x',\n",
        " 'second_name_x',\n",
        " 'web_name_x',\n",
        " 'first_name_y',\n",
        " 'second_name_y',\n",
        " 'web_name_y',])\n",
        "one_game_df.rename(columns={'id': 'understat'}, inplace=True)\n",
        "one_game_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 600
        },
        "id": "SaX7692EiQA7",
        "outputId": "a4b62fbd-1d72-431c-e24d-7e5746ede4cf"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    understat           player_name games  time  goals_1wks   xG_1wks  \\\n",
              "0        6049           Solly March     1    90           2  1.426274   \n",
              "1        6552          Bryan Mbeumo     1    90           2  1.669541   \n",
              "2         531       Michail Antonio     1    85           1  0.165498   \n",
              "3        1250         Mohamed Salah     1    90           1  1.899015   \n",
              "4        2517       Martin Odegaard     1    90           1  0.803106   \n",
              "..        ...                   ...   ...   ...         ...       ...   \n",
              "326     11714           Tom Lockyer     1    90           0  0.000000   \n",
              "327     11715         Mads Andersen     1    77           0  0.000000   \n",
              "328     11716  Pelly Ruddock Mpanzu     1    89           0  0.903205   \n",
              "329     11718        Elijah Adebayo     1    65           0  0.000000   \n",
              "336     11729          B√©nie Traor√©     1    84           0  0.321223   \n",
              "\n",
              "     assists_1wks   xA_1wks shots_1wks key_passes_1wks yellow_cards red_cards  \\\n",
              "0               0  0.046241          5               1            0         0   \n",
              "1               0  0.094969          3               1            0         0   \n",
              "2               0  0.000000          2               0            0         0   \n",
              "3               0  0.051903          5               2            0         0   \n",
              "4               0  0.070150          3               1            0         0   \n",
              "..            ...       ...        ...             ...          ...       ...   \n",
              "326             0  0.000000          0               0            0         0   \n",
              "327             0  0.000000          0               0            1         0   \n",
              "328             0  0.000000          2               0            0         0   \n",
              "329             0  0.066602          0               1            0         0   \n",
              "336             0  0.000000          1               0            0         0   \n",
              "\n",
              "    position        team_title npg_1wks             npxG_1wks  \\\n",
              "0          M          Brighton        2    1.4262738227844238   \n",
              "1          F         Brentford        1    0.9083718061447144   \n",
              "2          F          West Ham        1    0.1654975563287735   \n",
              "3          F         Liverpool        1    1.1378459930419922   \n",
              "4          M           Arsenal        0  0.041974376887083054   \n",
              "..       ...               ...      ...                   ...   \n",
              "326        D             Luton        0                     0   \n",
              "327        D             Luton        0                     0   \n",
              "328        M             Luton        0    0.9032046794891357   \n",
              "329        F             Luton        0                     0   \n",
              "336        M  Sheffield United        0    0.3212226927280426   \n",
              "\n",
              "                 xGChain            xGBuildup  xgdifference  xAdifference  \n",
              "0      1.812856912612915    0.386583149433136      0.573726     -0.046241  \n",
              "1     0.9083718061447144                    0      0.330459     -0.094969  \n",
              "2     0.1654975563287735                    0      0.834502      0.000000  \n",
              "3     0.5016481876373291                    0     -0.899015     -0.051903  \n",
              "4      0.598534107208252   0.5773450136184692      0.196894     -0.070150  \n",
              "..                   ...                  ...           ...           ...  \n",
              "326                    0                    0      0.000000      0.000000  \n",
              "327  0.04231686517596245  0.04231686517596245      0.000000      0.000000  \n",
              "328   0.9032046794891357                    0     -0.903205      0.000000  \n",
              "329  0.10891849547624588  0.04231686517596245      0.000000     -0.066602  \n",
              "336   0.3212226927280426                    0     -0.321223      0.000000  \n",
              "\n",
              "[233 rows x 20 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2f3d7dda-5424-46a9-b241-41c07b86fb75\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>understat</th>\n",
              "      <th>player_name</th>\n",
              "      <th>games</th>\n",
              "      <th>time</th>\n",
              "      <th>goals_1wks</th>\n",
              "      <th>xG_1wks</th>\n",
              "      <th>assists_1wks</th>\n",
              "      <th>xA_1wks</th>\n",
              "      <th>shots_1wks</th>\n",
              "      <th>key_passes_1wks</th>\n",
              "      <th>yellow_cards</th>\n",
              "      <th>red_cards</th>\n",
              "      <th>position</th>\n",
              "      <th>team_title</th>\n",
              "      <th>npg_1wks</th>\n",
              "      <th>npxG_1wks</th>\n",
              "      <th>xGChain</th>\n",
              "      <th>xGBuildup</th>\n",
              "      <th>xgdifference</th>\n",
              "      <th>xAdifference</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>6049</td>\n",
              "      <td>Solly March</td>\n",
              "      <td>1</td>\n",
              "      <td>90</td>\n",
              "      <td>2</td>\n",
              "      <td>1.426274</td>\n",
              "      <td>0</td>\n",
              "      <td>0.046241</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>M</td>\n",
              "      <td>Brighton</td>\n",
              "      <td>2</td>\n",
              "      <td>1.4262738227844238</td>\n",
              "      <td>1.812856912612915</td>\n",
              "      <td>0.386583149433136</td>\n",
              "      <td>0.573726</td>\n",
              "      <td>-0.046241</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>6552</td>\n",
              "      <td>Bryan Mbeumo</td>\n",
              "      <td>1</td>\n",
              "      <td>90</td>\n",
              "      <td>2</td>\n",
              "      <td>1.669541</td>\n",
              "      <td>0</td>\n",
              "      <td>0.094969</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>F</td>\n",
              "      <td>Brentford</td>\n",
              "      <td>1</td>\n",
              "      <td>0.9083718061447144</td>\n",
              "      <td>0.9083718061447144</td>\n",
              "      <td>0</td>\n",
              "      <td>0.330459</td>\n",
              "      <td>-0.094969</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>531</td>\n",
              "      <td>Michail Antonio</td>\n",
              "      <td>1</td>\n",
              "      <td>85</td>\n",
              "      <td>1</td>\n",
              "      <td>0.165498</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>F</td>\n",
              "      <td>West Ham</td>\n",
              "      <td>1</td>\n",
              "      <td>0.1654975563287735</td>\n",
              "      <td>0.1654975563287735</td>\n",
              "      <td>0</td>\n",
              "      <td>0.834502</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1250</td>\n",
              "      <td>Mohamed Salah</td>\n",
              "      <td>1</td>\n",
              "      <td>90</td>\n",
              "      <td>1</td>\n",
              "      <td>1.899015</td>\n",
              "      <td>0</td>\n",
              "      <td>0.051903</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>F</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>1</td>\n",
              "      <td>1.1378459930419922</td>\n",
              "      <td>0.5016481876373291</td>\n",
              "      <td>0</td>\n",
              "      <td>-0.899015</td>\n",
              "      <td>-0.051903</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2517</td>\n",
              "      <td>Martin Odegaard</td>\n",
              "      <td>1</td>\n",
              "      <td>90</td>\n",
              "      <td>1</td>\n",
              "      <td>0.803106</td>\n",
              "      <td>0</td>\n",
              "      <td>0.070150</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>M</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>0</td>\n",
              "      <td>0.041974376887083054</td>\n",
              "      <td>0.598534107208252</td>\n",
              "      <td>0.5773450136184692</td>\n",
              "      <td>0.196894</td>\n",
              "      <td>-0.070150</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>326</th>\n",
              "      <td>11714</td>\n",
              "      <td>Tom Lockyer</td>\n",
              "      <td>1</td>\n",
              "      <td>90</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>D</td>\n",
              "      <td>Luton</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>327</th>\n",
              "      <td>11715</td>\n",
              "      <td>Mads Andersen</td>\n",
              "      <td>1</td>\n",
              "      <td>77</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>D</td>\n",
              "      <td>Luton</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.04231686517596245</td>\n",
              "      <td>0.04231686517596245</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>328</th>\n",
              "      <td>11716</td>\n",
              "      <td>Pelly Ruddock Mpanzu</td>\n",
              "      <td>1</td>\n",
              "      <td>89</td>\n",
              "      <td>0</td>\n",
              "      <td>0.903205</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>M</td>\n",
              "      <td>Luton</td>\n",
              "      <td>0</td>\n",
              "      <td>0.9032046794891357</td>\n",
              "      <td>0.9032046794891357</td>\n",
              "      <td>0</td>\n",
              "      <td>-0.903205</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>329</th>\n",
              "      <td>11718</td>\n",
              "      <td>Elijah Adebayo</td>\n",
              "      <td>1</td>\n",
              "      <td>65</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>0.066602</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>F</td>\n",
              "      <td>Luton</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.10891849547624588</td>\n",
              "      <td>0.04231686517596245</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-0.066602</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>336</th>\n",
              "      <td>11729</td>\n",
              "      <td>B√©nie Traor√©</td>\n",
              "      <td>1</td>\n",
              "      <td>84</td>\n",
              "      <td>0</td>\n",
              "      <td>0.321223</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>M</td>\n",
              "      <td>Sheffield United</td>\n",
              "      <td>0</td>\n",
              "      <td>0.3212226927280426</td>\n",
              "      <td>0.3212226927280426</td>\n",
              "      <td>0</td>\n",
              "      <td>-0.321223</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>233 rows √ó 20 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2f3d7dda-5424-46a9-b241-41c07b86fb75')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2f3d7dda-5424-46a9-b241-41c07b86fb75 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2f3d7dda-5424-46a9-b241-41c07b86fb75');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e28f221b-042e-47e0-ab02-a8ea5f00878f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e28f221b-042e-47e0-ab02-a8ea5f00878f')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e28f221b-042e-47e0-ab02-a8ea5f00878f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!git clone https://github.com/huricane85/FPL-API-Fixture-modeler"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dU1giLdZir3J",
        "outputId": "fcaec840-9bbd-4f99-b3e8-d0e9ed66a5a6"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cloning into 'FPL-API-Fixture-modeler'...\n",
            "remote: Enumerating objects: 51, done.\u001b[K\n",
            "remote: Counting objects: 100% (51/51), done.\u001b[K\n",
            "remote: Compressing objects: 100% (51/51), done.\u001b[K\n",
            "remote: Total 51 (delta 25), reused 0 (delta 0), pack-reused 0\u001b[K\n",
            "Receiving objects: 100% (51/51), 1.01 MiB | 3.38 MiB/s, done.\n",
            "Resolving deltas: 100% (25/25), done.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# read the CSV file from GitHub into a DataFrame\n",
        "url = \"https://raw.githubusercontent.com/ChrisMusson/FPL-ID-Map/main/Master.csv\"\n",
        "df = pd.read_csv(url)\n",
        "\n",
        "# rename the \"22-23\" column to \"id\"\n",
        "df.rename(columns={'22-23': 'id'}, inplace=True)\n",
        "\n",
        "# convert \"id\" and \"understat\" columns to int64 and float64 respectively\n",
        "df['id'] = pd.to_numeric(df['id'], errors='coerce', downcast='integer').astype('Int64')\n",
        "df['understat'] = pd.to_numeric(df['understat'], errors='coerce', downcast='integer').astype('Int64')\n",
        "\n",
        "# filter out rows where \"understat\" is null\n",
        "df = df.dropna(subset=['understat'])\n",
        "\n",
        "# change data type of \"id\" column to float64\n",
        "df['id'] = df['id'].astype('float64')\n",
        "\n",
        "# create a new DataFrame with only the \"understat\" and \"id\" columns\n",
        "new_df = df[['understat', 'id']].dropna(subset=['id']).copy()\n",
        "\n",
        "# display the new DataFrame\n",
        "\n",
        "new_df\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "WRijWphEVPuN",
        "outputId": "776c5858-e645-4bb3-b031-483653dabb1b"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      understat     id\n",
              "37         7821  760.0\n",
              "38         1697  627.0\n",
              "55         2371  326.0\n",
              "62          489  274.0\n",
              "77         8158  502.0\n",
              "...         ...    ...\n",
              "1933      11301  695.0\n",
              "1934      11146  632.0\n",
              "1935      11189  646.0\n",
              "1936      11302  696.0\n",
              "1937      11195  650.0\n",
              "\n",
              "[763 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-820b8cda-2c4c-4fdc-bff5-757f687bb6e5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>understat</th>\n",
              "      <th>id</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>7821</td>\n",
              "      <td>760.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>1697</td>\n",
              "      <td>627.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>55</th>\n",
              "      <td>2371</td>\n",
              "      <td>326.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>62</th>\n",
              "      <td>489</td>\n",
              "      <td>274.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>77</th>\n",
              "      <td>8158</td>\n",
              "      <td>502.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1933</th>\n",
              "      <td>11301</td>\n",
              "      <td>695.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1934</th>\n",
              "      <td>11146</td>\n",
              "      <td>632.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1935</th>\n",
              "      <td>11189</td>\n",
              "      <td>646.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1936</th>\n",
              "      <td>11302</td>\n",
              "      <td>696.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1937</th>\n",
              "      <td>11195</td>\n",
              "      <td>650.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>763 rows √ó 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-820b8cda-2c4c-4fdc-bff5-757f687bb6e5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-820b8cda-2c4c-4fdc-bff5-757f687bb6e5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-820b8cda-2c4c-4fdc-bff5-757f687bb6e5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d1ac83fa-e6d9-442e-895d-d63ff0202735\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d1ac83fa-e6d9-442e-895d-d63ff0202735')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d1ac83fa-e6d9-442e-895d-d63ff0202735 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "new_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "NhQ4dZKdUv36",
        "outputId": "b9a67fd2-247b-4140-9353-02ec4a895cae"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      understat     id\n",
              "37         7821  760.0\n",
              "38         1697  627.0\n",
              "55         2371  326.0\n",
              "62          489  274.0\n",
              "77         8158  502.0\n",
              "...         ...    ...\n",
              "1933      11301  695.0\n",
              "1934      11146  632.0\n",
              "1935      11189  646.0\n",
              "1936      11302  696.0\n",
              "1937      11195  650.0\n",
              "\n",
              "[763 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3b458557-7fb2-495d-86b3-12643799c2e4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>understat</th>\n",
              "      <th>id</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>7821</td>\n",
              "      <td>760.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>1697</td>\n",
              "      <td>627.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>55</th>\n",
              "      <td>2371</td>\n",
              "      <td>326.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>62</th>\n",
              "      <td>489</td>\n",
              "      <td>274.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>77</th>\n",
              "      <td>8158</td>\n",
              "      <td>502.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1933</th>\n",
              "      <td>11301</td>\n",
              "      <td>695.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1934</th>\n",
              "      <td>11146</td>\n",
              "      <td>632.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1935</th>\n",
              "      <td>11189</td>\n",
              "      <td>646.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1936</th>\n",
              "      <td>11302</td>\n",
              "      <td>696.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1937</th>\n",
              "      <td>11195</td>\n",
              "      <td>650.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>763 rows √ó 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3b458557-7fb2-495d-86b3-12643799c2e4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3b458557-7fb2-495d-86b3-12643799c2e4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3b458557-7fb2-495d-86b3-12643799c2e4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-71e09ac6-8541-4eda-b4bc-0c6eac4c08ce\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-71e09ac6-8541-4eda-b4bc-0c6eac4c08ce')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-71e09ac6-8541-4eda-b4bc-0c6eac4c08ce button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "one_game_df[\"understat\"] = one_game_df[\"understat\"].astype(str).astype(int)\n",
        "understatid2 = new_df\n",
        "understatwithfplid = pd.merge(one_game_df,\n",
        "                     understatid2,\n",
        "                     on ='understat',\n",
        "                     how ='left')\n",
        "understatwithfplid"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 600
        },
        "id": "KmDbXEnfi2v1",
        "outputId": "d420031f-92da-4540-dc10-16ccccd6aab1"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     understat           player_name games  time  goals_1wks   xG_1wks  \\\n",
              "0         6049           Solly March     1    90           2  1.426274   \n",
              "1         6552          Bryan Mbeumo     1    90           2  1.669541   \n",
              "2          531       Michail Antonio     1    85           1  0.165498   \n",
              "3         1250         Mohamed Salah     1    90           1  1.899015   \n",
              "4         2517       Martin Odegaard     1    90           1  0.803106   \n",
              "..         ...                   ...   ...   ...         ...       ...   \n",
              "228      11714           Tom Lockyer     1    90           0  0.000000   \n",
              "229      11715         Mads Andersen     1    77           0  0.000000   \n",
              "230      11716  Pelly Ruddock Mpanzu     1    89           0  0.903205   \n",
              "231      11718        Elijah Adebayo     1    65           0  0.000000   \n",
              "232      11729          B√©nie Traor√©     1    84           0  0.321223   \n",
              "\n",
              "     assists_1wks   xA_1wks shots_1wks key_passes_1wks  ... red_cards  \\\n",
              "0               0  0.046241          5               1  ...         0   \n",
              "1               0  0.094969          3               1  ...         0   \n",
              "2               0  0.000000          2               0  ...         0   \n",
              "3               0  0.051903          5               2  ...         0   \n",
              "4               0  0.070150          3               1  ...         0   \n",
              "..            ...       ...        ...             ...  ...       ...   \n",
              "228             0  0.000000          0               0  ...         0   \n",
              "229             0  0.000000          0               0  ...         0   \n",
              "230             0  0.000000          2               0  ...         0   \n",
              "231             0  0.066602          0               1  ...         0   \n",
              "232             0  0.000000          1               0  ...         0   \n",
              "\n",
              "    position        team_title npg_1wks             npxG_1wks  \\\n",
              "0          M          Brighton        2    1.4262738227844238   \n",
              "1          F         Brentford        1    0.9083718061447144   \n",
              "2          F          West Ham        1    0.1654975563287735   \n",
              "3          F         Liverpool        1    1.1378459930419922   \n",
              "4          M           Arsenal        0  0.041974376887083054   \n",
              "..       ...               ...      ...                   ...   \n",
              "228        D             Luton        0                     0   \n",
              "229        D             Luton        0                     0   \n",
              "230        M             Luton        0    0.9032046794891357   \n",
              "231        F             Luton        0                     0   \n",
              "232        M  Sheffield United        0    0.3212226927280426   \n",
              "\n",
              "                 xGChain            xGBuildup xgdifference  xAdifference  \\\n",
              "0      1.812856912612915    0.386583149433136     0.573726     -0.046241   \n",
              "1     0.9083718061447144                    0     0.330459     -0.094969   \n",
              "2     0.1654975563287735                    0     0.834502      0.000000   \n",
              "3     0.5016481876373291                    0    -0.899015     -0.051903   \n",
              "4      0.598534107208252   0.5773450136184692     0.196894     -0.070150   \n",
              "..                   ...                  ...          ...           ...   \n",
              "228                    0                    0     0.000000      0.000000   \n",
              "229  0.04231686517596245  0.04231686517596245     0.000000      0.000000   \n",
              "230   0.9032046794891357                    0    -0.903205      0.000000   \n",
              "231  0.10891849547624588  0.04231686517596245     0.000000     -0.066602   \n",
              "232   0.3212226927280426                    0    -0.321223      0.000000   \n",
              "\n",
              "        id  \n",
              "0    107.0  \n",
              "1     95.0  \n",
              "2    458.0  \n",
              "3    283.0  \n",
              "4      7.0  \n",
              "..     ...  \n",
              "228    NaN  \n",
              "229    NaN  \n",
              "230    NaN  \n",
              "231    NaN  \n",
              "232    NaN  \n",
              "\n",
              "[233 rows x 21 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-510ece58-cb25-4182-99fb-8cace6b3bf7c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>understat</th>\n",
              "      <th>player_name</th>\n",
              "      <th>games</th>\n",
              "      <th>time</th>\n",
              "      <th>goals_1wks</th>\n",
              "      <th>xG_1wks</th>\n",
              "      <th>assists_1wks</th>\n",
              "      <th>xA_1wks</th>\n",
              "      <th>shots_1wks</th>\n",
              "      <th>key_passes_1wks</th>\n",
              "      <th>...</th>\n",
              "      <th>red_cards</th>\n",
              "      <th>position</th>\n",
              "      <th>team_title</th>\n",
              "      <th>npg_1wks</th>\n",
              "      <th>npxG_1wks</th>\n",
              "      <th>xGChain</th>\n",
              "      <th>xGBuildup</th>\n",
              "      <th>xgdifference</th>\n",
              "      <th>xAdifference</th>\n",
              "      <th>id</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>6049</td>\n",
              "      <td>Solly March</td>\n",
              "      <td>1</td>\n",
              "      <td>90</td>\n",
              "      <td>2</td>\n",
              "      <td>1.426274</td>\n",
              "      <td>0</td>\n",
              "      <td>0.046241</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>M</td>\n",
              "      <td>Brighton</td>\n",
              "      <td>2</td>\n",
              "      <td>1.4262738227844238</td>\n",
              "      <td>1.812856912612915</td>\n",
              "      <td>0.386583149433136</td>\n",
              "      <td>0.573726</td>\n",
              "      <td>-0.046241</td>\n",
              "      <td>107.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>6552</td>\n",
              "      <td>Bryan Mbeumo</td>\n",
              "      <td>1</td>\n",
              "      <td>90</td>\n",
              "      <td>2</td>\n",
              "      <td>1.669541</td>\n",
              "      <td>0</td>\n",
              "      <td>0.094969</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>F</td>\n",
              "      <td>Brentford</td>\n",
              "      <td>1</td>\n",
              "      <td>0.9083718061447144</td>\n",
              "      <td>0.9083718061447144</td>\n",
              "      <td>0</td>\n",
              "      <td>0.330459</td>\n",
              "      <td>-0.094969</td>\n",
              "      <td>95.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>531</td>\n",
              "      <td>Michail Antonio</td>\n",
              "      <td>1</td>\n",
              "      <td>85</td>\n",
              "      <td>1</td>\n",
              "      <td>0.165498</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>F</td>\n",
              "      <td>West Ham</td>\n",
              "      <td>1</td>\n",
              "      <td>0.1654975563287735</td>\n",
              "      <td>0.1654975563287735</td>\n",
              "      <td>0</td>\n",
              "      <td>0.834502</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>458.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1250</td>\n",
              "      <td>Mohamed Salah</td>\n",
              "      <td>1</td>\n",
              "      <td>90</td>\n",
              "      <td>1</td>\n",
              "      <td>1.899015</td>\n",
              "      <td>0</td>\n",
              "      <td>0.051903</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>F</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>1</td>\n",
              "      <td>1.1378459930419922</td>\n",
              "      <td>0.5016481876373291</td>\n",
              "      <td>0</td>\n",
              "      <td>-0.899015</td>\n",
              "      <td>-0.051903</td>\n",
              "      <td>283.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2517</td>\n",
              "      <td>Martin Odegaard</td>\n",
              "      <td>1</td>\n",
              "      <td>90</td>\n",
              "      <td>1</td>\n",
              "      <td>0.803106</td>\n",
              "      <td>0</td>\n",
              "      <td>0.070150</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>M</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>0</td>\n",
              "      <td>0.041974376887083054</td>\n",
              "      <td>0.598534107208252</td>\n",
              "      <td>0.5773450136184692</td>\n",
              "      <td>0.196894</td>\n",
              "      <td>-0.070150</td>\n",
              "      <td>7.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>228</th>\n",
              "      <td>11714</td>\n",
              "      <td>Tom Lockyer</td>\n",
              "      <td>1</td>\n",
              "      <td>90</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>D</td>\n",
              "      <td>Luton</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>229</th>\n",
              "      <td>11715</td>\n",
              "      <td>Mads Andersen</td>\n",
              "      <td>1</td>\n",
              "      <td>77</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>D</td>\n",
              "      <td>Luton</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.04231686517596245</td>\n",
              "      <td>0.04231686517596245</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>230</th>\n",
              "      <td>11716</td>\n",
              "      <td>Pelly Ruddock Mpanzu</td>\n",
              "      <td>1</td>\n",
              "      <td>89</td>\n",
              "      <td>0</td>\n",
              "      <td>0.903205</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>M</td>\n",
              "      <td>Luton</td>\n",
              "      <td>0</td>\n",
              "      <td>0.9032046794891357</td>\n",
              "      <td>0.9032046794891357</td>\n",
              "      <td>0</td>\n",
              "      <td>-0.903205</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>231</th>\n",
              "      <td>11718</td>\n",
              "      <td>Elijah Adebayo</td>\n",
              "      <td>1</td>\n",
              "      <td>65</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>0.066602</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>F</td>\n",
              "      <td>Luton</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.10891849547624588</td>\n",
              "      <td>0.04231686517596245</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-0.066602</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>232</th>\n",
              "      <td>11729</td>\n",
              "      <td>B√©nie Traor√©</td>\n",
              "      <td>1</td>\n",
              "      <td>84</td>\n",
              "      <td>0</td>\n",
              "      <td>0.321223</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>M</td>\n",
              "      <td>Sheffield United</td>\n",
              "      <td>0</td>\n",
              "      <td>0.3212226927280426</td>\n",
              "      <td>0.3212226927280426</td>\n",
              "      <td>0</td>\n",
              "      <td>-0.321223</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>233 rows √ó 21 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-510ece58-cb25-4182-99fb-8cace6b3bf7c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-510ece58-cb25-4182-99fb-8cace6b3bf7c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-510ece58-cb25-4182-99fb-8cace6b3bf7c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-62409860-0d48-488b-81c7-cff14fe10dae\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-62409860-0d48-488b-81c7-cff14fe10dae')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-62409860-0d48-488b-81c7-cff14fe10dae button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from urllib.request import urlopen\n",
        "from json import loads\n",
        "from csv import writer\n",
        "\n",
        "\n",
        "def team_converter(team_id):\n",
        "    '''Converts a team's ID to their actual name'''\n",
        "    team_map = {\n",
        "        1: \"Arsenal\",\n",
        "        2: \"Aston Villa\",\n",
        "        3: \"Bournemouth\",\n",
        "        4: \"Brentford\",\n",
        "        5: \"Brighton\",\n",
        "        6: \"Burnley\",\n",
        "        7: \"Chelsea\",\n",
        "        8: \"Crystal Palace\",\n",
        "        9: \"Everton\",\n",
        "        10: \"Fulham\",\n",
        "        11: \"Liverpool\",\n",
        "        12: \"Luton Town\",\n",
        "        13: \"Manchester City\",\n",
        "        14: \"Manchester United\",\n",
        "        15: \"Newcastle United\",\n",
        "        16: \"Nottingham Forest\",\n",
        "        17: \"Sheffield United\",\n",
        "        18: \"Tottenham\",\n",
        "        19: \"West Ham\",\n",
        "        20: \"Wolverhampton Wanderers\",\n",
        "        None: None\n",
        "    }\n",
        "    return team_map[team_id]\n",
        "\n",
        "\n",
        "def position_converter(position):\n",
        "    '''Converts a player's element_type to their actual position'''\n",
        "    position_map = {\n",
        "        1: \"Goalkeeper\",\n",
        "        2: \"Defender\",\n",
        "        3: \"Midfielder\",\n",
        "        4: \"Forward\"\n",
        "    }\n",
        "    return position_map[position]\n",
        "\n",
        "\n",
        "def main():\n",
        "    all_data = loads(urlopen(\"https://fantasy.premierleague.com/api/fixtures/\").read())\n",
        "    fixtures = all_data\n",
        "\n",
        "    important_data = [\n",
        "        [\n",
        "            x[\"event\"],\n",
        "            team_converter(x[\"team_h\"]),\n",
        "            team_converter(x[\"team_a\"]),\n",
        "            x[\"kickoff_time\"],\n",
        "\n",
        "        ]\n",
        "        for x in fixtures\n",
        "    ]\n",
        "\n",
        "    with open(\"/fixtures_data.csv\", \"w\", encoding=\"utf-8\", newline=\"\") as out:\n",
        "        headers = [\"event\",\"team_h\",\"team_a\",\"kickoff_time\"]\n",
        "        w = writer(out)\n",
        "        w.writerow(headers)\n",
        "        w.writerows(important_data)\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()"
      ],
      "metadata": {
        "id": "Y_cV1kyak7XX"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import scipy\n",
        "import numpy as np\n",
        "from numpy import random\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import matplotlib"
      ],
      "metadata": {
        "id": "DXejj-4jjUI-"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from urllib.request import urlopen\n",
        "from json import loads\n",
        "from csv import writer\n",
        "\n",
        "\n",
        "def team_converter(team_id):\n",
        "    '''Converts a team's ID to their actual name'''\n",
        "    team_map = {\n",
        "        1: \"Arsenal\",\n",
        "        2: \"Aston Villa\",\n",
        "        3: \"Bournemouth\",\n",
        "        4: \"Brentford\",\n",
        "        5: \"Brighton\",\n",
        "        6: \"Burnley\",\n",
        "        7: \"Chelsea\",\n",
        "        8: \"Crystal Palace\",\n",
        "        9: \"Everton\",\n",
        "        10: \"Fulham\",\n",
        "        11: \"Liverpool\",\n",
        "        12: \"Luton Town\",\n",
        "        13: \"Manchester City\",\n",
        "        14: \"Manchester United\",\n",
        "        15: \"Newcastle United\",\n",
        "        16: \"Nottingham Forest\",\n",
        "        17: \"Sheffield United\",\n",
        "        18: \"Tottenham\",\n",
        "        19: \"West Ham\",\n",
        "        20: \"Wolverhampton Wanderers\",\n",
        "        None: None\n",
        "    }\n",
        "    return team_map[team_id]\n",
        "\n",
        "\n",
        "def position_converter(position):\n",
        "    '''Converts a player's element_type to their actual position'''\n",
        "    position_map = {\n",
        "        1: \"Goalkeeper\",\n",
        "        2: \"Defender\",\n",
        "        3: \"Midfielder\",\n",
        "        4: \"Forward\"\n",
        "    }\n",
        "    return position_map[position]\n",
        "\n",
        "\n",
        "def main():\n",
        "    all_data = loads(urlopen(\"https://fantasy.premierleague.com/api/bootstrap-static/\").read())\n",
        "    players = all_data[\"elements\"]\n",
        "\n",
        "    important_data = [\n",
        "        [\n",
        "            x[\"id\"],\n",
        "            team_converter(x[\"team\"]),\n",
        "            position_converter(x[\"element_type\"])[0],\n",
        "            x[\"web_name\"],\n",
        "            x[\"now_cost\"] / 10,\n",
        "            x[\"selected_by_percent\"],\n",
        "            float(x[\"expected_goals\"]),  # Convert to float\n",
        "            float(x[\"expected_assists\"]),  # Convert to float\n",
        "            x[\"goals_scored\"],\n",
        "            x[\"assists\"],\n",
        "            x[\"bps\"],\n",
        "            x[\"ict_index\"],\n",
        "            x[\"total_points\"],\n",
        "            x[\"points_per_game\"],\n",
        "            x[\"minutes\"]\n",
        "        ]\n",
        "        for x in players\n",
        "    ]\n",
        "\n",
        "    with open(\"players_data.csv\", \"w\", encoding=\"utf-8\", newline=\"\") as out:\n",
        "        headers = [\"id\",\"team\", \"pos\", \"name\", \"cost\", \"selected_by_percent\", \"expected_goals\", \"expected_assists\", \"goals_scored\", \"assists\", \"bps\", \"ict_index\",\"points\", \"points_per_game\", \"minutes\"]\n",
        "        w = writer(out)\n",
        "        w.writerow(headers)\n",
        "        w.writerows(important_data)\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()"
      ],
      "metadata": {
        "id": "CKZZPD0xQGLu"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "playerdata = pd.read_csv(\"/content/players_data.csv\")\n",
        "master = playerdata\n",
        "#master = master.dropna()\n",
        "master['apppoint'] = 2\n",
        "master['assistvalue'] = 3\n",
        "#master['BPS90'] = master.bps/(master.minutes/90)\n",
        "master"
      ],
      "metadata": {
        "id": "VOx8tP0bjttO",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "outputId": "213aa442-88cb-4581-ca08-4d48430d7dcc"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      id                     team pos             name  cost  \\\n",
              "0      1                  Arsenal   F          Balogun   4.5   \n",
              "1      2                  Arsenal   D           C√©dric   4.0   \n",
              "2      3                  Arsenal   M         M.Elneny   4.4   \n",
              "3      4                  Arsenal   M     F√°bio Vieira   5.4   \n",
              "4      5                  Arsenal   D          Gabriel   4.9   \n",
              "..   ...                      ...  ..              ...   ...   \n",
              "673  572  Wolverhampton Wanderers   D         N.Semedo   4.5   \n",
              "674  573  Wolverhampton Wanderers   D             Toti   4.5   \n",
              "675  574  Wolverhampton Wanderers   M  Boubacar Traore   4.5   \n",
              "676  590  Wolverhampton Wanderers   F            Cunha   5.5   \n",
              "677  598  Wolverhampton Wanderers   D          Doherty   4.5   \n",
              "\n",
              "     selected_by_percent  expected_goals  expected_assists  goals_scored  \\\n",
              "0                    0.6            0.00              0.00             0   \n",
              "1                    0.4            0.00              0.00             0   \n",
              "2                    0.1            0.00              0.00             0   \n",
              "3                    0.1            0.00              0.00             0   \n",
              "4                   22.5            0.00              0.00             0   \n",
              "..                   ...             ...               ...           ...   \n",
              "673                  0.4            0.02              0.14             0   \n",
              "674                  0.1            0.00              0.00             0   \n",
              "675                  0.5            0.00              0.00             0   \n",
              "676                  0.6            0.94              0.36             0   \n",
              "677                  0.2            0.00              0.00             0   \n",
              "\n",
              "     assists  bps  ict_index  points  points_per_game  minutes  apppoint  \\\n",
              "0          0    0        0.0       0              0.0        0         2   \n",
              "1          0    0        0.0       0              0.0        0         2   \n",
              "2          0    0        0.0       0              0.0        0         2   \n",
              "3          0    0        0.0       0              0.0        0         2   \n",
              "4          0    7        1.3       2              1.0       24         2   \n",
              "..       ...  ...        ...     ...              ...      ...       ...   \n",
              "673        0   27        6.0       2              1.0      180         2   \n",
              "674        0    3        0.8       1              1.0       19         2   \n",
              "675        0    0        0.0       0              0.0        0         2   \n",
              "676        0   16       14.0       4              2.0      166         2   \n",
              "677        0    0        0.0       0              0.0        0         2   \n",
              "\n",
              "     assistvalue  \n",
              "0              3  \n",
              "1              3  \n",
              "2              3  \n",
              "3              3  \n",
              "4              3  \n",
              "..           ...  \n",
              "673            3  \n",
              "674            3  \n",
              "675            3  \n",
              "676            3  \n",
              "677            3  \n",
              "\n",
              "[678 rows x 17 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bd0207ba-d33a-412c-a8d5-85e02b2e6c4b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>team</th>\n",
              "      <th>pos</th>\n",
              "      <th>name</th>\n",
              "      <th>cost</th>\n",
              "      <th>selected_by_percent</th>\n",
              "      <th>expected_goals</th>\n",
              "      <th>expected_assists</th>\n",
              "      <th>goals_scored</th>\n",
              "      <th>assists</th>\n",
              "      <th>bps</th>\n",
              "      <th>ict_index</th>\n",
              "      <th>points</th>\n",
              "      <th>points_per_game</th>\n",
              "      <th>minutes</th>\n",
              "      <th>apppoint</th>\n",
              "      <th>assistvalue</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>F</td>\n",
              "      <td>Balogun</td>\n",
              "      <td>4.5</td>\n",
              "      <td>0.6</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>D</td>\n",
              "      <td>C√©dric</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.4</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>M</td>\n",
              "      <td>M.Elneny</td>\n",
              "      <td>4.4</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>M</td>\n",
              "      <td>F√°bio Vieira</td>\n",
              "      <td>5.4</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>D</td>\n",
              "      <td>Gabriel</td>\n",
              "      <td>4.9</td>\n",
              "      <td>22.5</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>1.3</td>\n",
              "      <td>2</td>\n",
              "      <td>1.0</td>\n",
              "      <td>24</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>673</th>\n",
              "      <td>572</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>D</td>\n",
              "      <td>N.Semedo</td>\n",
              "      <td>4.5</td>\n",
              "      <td>0.4</td>\n",
              "      <td>0.02</td>\n",
              "      <td>0.14</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>27</td>\n",
              "      <td>6.0</td>\n",
              "      <td>2</td>\n",
              "      <td>1.0</td>\n",
              "      <td>180</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>674</th>\n",
              "      <td>573</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>D</td>\n",
              "      <td>Toti</td>\n",
              "      <td>4.5</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0.8</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>19</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>675</th>\n",
              "      <td>574</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>M</td>\n",
              "      <td>Boubacar Traore</td>\n",
              "      <td>4.5</td>\n",
              "      <td>0.5</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>676</th>\n",
              "      <td>590</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>F</td>\n",
              "      <td>Cunha</td>\n",
              "      <td>5.5</td>\n",
              "      <td>0.6</td>\n",
              "      <td>0.94</td>\n",
              "      <td>0.36</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>16</td>\n",
              "      <td>14.0</td>\n",
              "      <td>4</td>\n",
              "      <td>2.0</td>\n",
              "      <td>166</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>677</th>\n",
              "      <td>598</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>D</td>\n",
              "      <td>Doherty</td>\n",
              "      <td>4.5</td>\n",
              "      <td>0.2</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>678 rows √ó 17 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bd0207ba-d33a-412c-a8d5-85e02b2e6c4b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-bd0207ba-d33a-412c-a8d5-85e02b2e6c4b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-bd0207ba-d33a-412c-a8d5-85e02b2e6c4b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-07a301bf-bf5e-4346-b2c8-0bc2c3cd00b8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-07a301bf-bf5e-4346-b2c8-0bc2c3cd00b8')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-07a301bf-bf5e-4346-b2c8-0bc2c3cd00b8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "gwfixtures = pd.read_csv(\"/fixtures_data.csv\")\n",
        "import requests\n",
        "import pandas as pd\n",
        "url = 'https://projects.fivethirtyeight.com/soccer-api/club/spi_global_rankings.csv'\n",
        "r = requests.get(url)\n",
        "open('temp.csv', 'wb').write(r.content)\n",
        "spi = pd.read_csv('temp.csv')\n",
        "spi['team_h'] = spi['name']\n",
        "spi['team_a'] = spi['name']\n",
        "spi= spi.replace('Newcastle', 'Newcastle United')\n",
        "spi= spi.replace('Wolverhampton','Wolverhampton Wanderers')\n",
        "spi= spi.replace('Tottenham Hotspur','Tottenham')\n",
        "spi= spi.replace('Leeds United','Leeds')\n",
        "spi= spi.replace('Leicester City','Leicester')\n",
        "spi= spi.replace('West Ham United','West Ham')\n",
        "spi= spi.replace('Brighton and Hove Albion','Brighton')\n",
        "spi= spi.replace('Norwich City','Norwich')\n",
        "spi= spi.replace('AFC Bournemouth','Bournemouth')\n",
        "Left_join = pd.merge(gwfixtures,\n",
        "                     spi,\n",
        "                     on ='team_h',\n",
        "                     how ='left')\n",
        "homespi = Left_join.drop(columns=[\n",
        " 'rank',\n",
        " 'prev_rank',\n",
        " 'league',\n",
        "  'off',\n",
        " 'def',\n",
        " 'name',\n",
        " 'team_a_y',])\n",
        "homespi.rename(columns = {'team_a_x':'team_a', 'spi':'Home SPI'}, inplace = True)\n",
        "away_join = pd.merge(homespi,\n",
        "                     spi,\n",
        "                     on ='team_a',\n",
        "                     how ='left')\n",
        "homesawayspi = away_join.drop(columns=[\n",
        " 'rank',\n",
        " 'prev_rank',\n",
        " 'name',\n",
        " 'league',\n",
        " 'off',\n",
        " 'def',\n",
        " 'team_h_y'])\n",
        "homesawayspi.rename(columns = {'team_h_x':'team_h', 'spi':'Away SPI'}, inplace = True)\n",
        "homesawayspi['Event'] = homesawayspi['event'].astype(str)\n",
        "gw2 = homesawayspi.query('Event==\"2.0\"')\n",
        "PLSPI = spi.query('league==\"Barclays Premier League\"')\n",
        "PLSPI['League Average']  = PLSPI[\"spi\"].mean()\n",
        "laverage = PLSPI[\"spi\"].mean()\n",
        "PLSPI['League Average'].astype(int)\n",
        "gw2['League_Average']  = laverage\n",
        "gw2.rename(columns = {'Home SPI':'HomeSPI', 'Away SPI':'AwaySPI'}, inplace = True)\n",
        "gw2['home_difference'] = gw2.HomeSPI - gw2.League_Average\n",
        "gw2['away_difference'] = gw2.AwaySPI - gw2.League_Average\n",
        "gw2['home_adjustment'] = (gw2.home_difference + gw2.League_Average)/gw2.League_Average\n",
        "gw2['away_adjustment'] = (gw2.away_difference + gw2.League_Average)/gw2.League_Average\n",
        "gw2adjustments = gw2[['team_h', 'home_adjustment']].append(gw2[['team_a','away_adjustment']].set_axis(['team_h', 'home_adjustment'], axis=1)).reset_index(drop=True)\n",
        "gw2adjustments.rename(columns = {'team_h':'team'}, inplace = True)\n",
        "gw2adjustments"
      ],
      "metadata": {
        "id": "0oqPsFQJjyR0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "1dd6c9b1-7efc-414e-cdb2-206d038ad3a8"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-18-cdbc911cb85a>:49: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  PLSPI['League Average']  = PLSPI[\"spi\"].mean()\n",
            "<ipython-input-18-cdbc911cb85a>:52: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  gw2['League_Average']  = laverage\n",
            "<ipython-input-18-cdbc911cb85a>:53: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  gw2.rename(columns = {'Home SPI':'HomeSPI', 'Away SPI':'AwaySPI'}, inplace = True)\n",
            "<ipython-input-18-cdbc911cb85a>:54: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  gw2['home_difference'] = gw2.HomeSPI - gw2.League_Average\n",
            "<ipython-input-18-cdbc911cb85a>:55: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  gw2['away_difference'] = gw2.AwaySPI - gw2.League_Average\n",
            "<ipython-input-18-cdbc911cb85a>:56: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  gw2['home_adjustment'] = (gw2.home_difference + gw2.League_Average)/gw2.League_Average\n",
            "<ipython-input-18-cdbc911cb85a>:57: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  gw2['away_adjustment'] = (gw2.away_difference + gw2.League_Average)/gw2.League_Average\n",
            "<ipython-input-18-cdbc911cb85a>:58: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  gw2adjustments = gw2[['team_h', 'home_adjustment']].append(gw2[['team_a','away_adjustment']].set_axis(['team_h', 'home_adjustment'], axis=1)).reset_index(drop=True)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                       team  home_adjustment\n",
              "0         Nottingham Forest         0.780000\n",
              "1                    Fulham         0.948007\n",
              "2                 Liverpool         1.166318\n",
              "3   Wolverhampton Wanderers         0.820717\n",
              "4                 Tottenham         1.002480\n",
              "5           Manchester City         1.278461\n",
              "6               Aston Villa         1.101978\n",
              "7                  West Ham         0.988306\n",
              "8            Crystal Palace         1.020824\n",
              "9          Sheffield United         0.786115\n",
              "10                Brentford         1.071962\n",
              "11              Bournemouth         0.827943\n",
              "12                 Brighton         1.123934\n",
              "13        Manchester United         1.098921\n",
              "14         Newcastle United         1.163122\n",
              "15                  Everton         0.884223\n",
              "16                  Chelsea         1.053063\n",
              "17                  Arsenal         1.166179"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-639e8cc2-5a66-4dc7-a9a3-ef105cc390d6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>team</th>\n",
              "      <th>home_adjustment</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Nottingham Forest</td>\n",
              "      <td>0.780000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Fulham</td>\n",
              "      <td>0.948007</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Liverpool</td>\n",
              "      <td>1.166318</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>0.820717</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Tottenham</td>\n",
              "      <td>1.002480</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Manchester City</td>\n",
              "      <td>1.278461</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>1.101978</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>West Ham</td>\n",
              "      <td>0.988306</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Crystal Palace</td>\n",
              "      <td>1.020824</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Sheffield United</td>\n",
              "      <td>0.786115</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Brentford</td>\n",
              "      <td>1.071962</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Bournemouth</td>\n",
              "      <td>0.827943</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Brighton</td>\n",
              "      <td>1.123934</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Manchester United</td>\n",
              "      <td>1.098921</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Newcastle United</td>\n",
              "      <td>1.163122</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>Everton</td>\n",
              "      <td>0.884223</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Chelsea</td>\n",
              "      <td>1.053063</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>Arsenal</td>\n",
              "      <td>1.166179</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-639e8cc2-5a66-4dc7-a9a3-ef105cc390d6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-639e8cc2-5a66-4dc7-a9a3-ef105cc390d6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-639e8cc2-5a66-4dc7-a9a3-ef105cc390d6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-90659196-b0b1-49ac-8663-fe31a07d64c8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-90659196-b0b1-49ac-8663-fe31a07d64c8')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-90659196-b0b1-49ac-8663-fe31a07d64c8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rawdf = pd.merge(master,\n",
        "                     gw2adjustments,\n",
        "                     on ='team',\n",
        "                     how ='left')\n",
        "rawfwd = rawdf.query('pos==\"F\"')\n",
        "rawfwd['xP'] = ((rawfwd.expected_goals * 4/1)+(rawfwd.expected_assists * 3/1) + (rawfwd.apppoint)) * rawfwd.home_adjustment\n",
        "rawfwd = rawfwd.drop(columns=[\n",
        " 'expected_goals',\n",
        " 'team',\n",
        " 'expected_assists',\n",
        " 'apppoint',\n",
        " 'assistvalue',\n",
        "'home_adjustment'])\n",
        "rawmd = rawdf.query('pos==\"M\"')\n",
        "rawmd['xP'] = ((rawmd.expected_goals * 5/1)+(rawmd.expected_assists * 3/1) + (rawmd.apppoint)) * rawmd.home_adjustment\n",
        "rawmd = rawmd.drop(columns=[\n",
        " 'expected_goals',\n",
        " 'team',\n",
        " 'expected_assists',\n",
        " 'apppoint',\n",
        " 'assistvalue',\n",
        "'home_adjustment'])\n",
        "fbref = pd.read_html('https://fbref.com/en/comps/9/Premier-League-Stats')\n",
        "epltable = fbref[0]\n",
        "epltabledef = epltable.drop(columns=[ 'Rk',\n",
        " 'MP',\n",
        " 'W',\n",
        " 'D',\n",
        " 'L',\n",
        " 'GF',\n",
        " 'GA',\n",
        " 'GD',\n",
        " 'xG',\n",
        " 'xGD',\n",
        " 'xGD/90',\n",
        " 'Pts',\n",
        " 'Pts/MP',\n",
        " 'Last 5',\n",
        " 'Attendance',\n",
        " 'Top Team Scorer',\n",
        " 'Goalkeeper',\n",
        " 'Notes'])\n",
        "epltabledef= epltabledef.replace('Newcastle Utd', 'Newcastle United')\n",
        "epltabledef= epltabledef.replace('Wolves','Wolverhampton Wanderers')\n",
        "epltabledef= epltabledef.replace('Leeds United','Leeds')\n",
        "epltabledef= epltabledef.replace('Leicester City','Leicester')\n",
        "epltabledef= epltabledef.replace('Manchester Utd','Manchester United')\n",
        "epltabledef['Squad'] = epltabledef['Squad'].str.replace(r\"[\\\"\\',]\", '')\n",
        "epltabledef= epltabledef.replace('Nottham Forest','Nottingham Forest')\n",
        "#epltabledef['xCSP'] = (4 - (epltabledef.xGA * 4/1))\n",
        "epltabledef.rename(columns={'Squad': 'team'}, inplace=True)\n",
        "rawdfcs = pd.merge(rawdf,\n",
        "                     epltabledef,\n",
        "                     on ='team',\n",
        "                     how ='left')\n",
        "rawgk= rawdfcs.query('pos==\"G\"')\n",
        "#rawgk['xP'] = ((rawgk.xCSP)+ (rawgk.apppoint)) * rawgk.home_adjustment\n",
        "rawgk['xP'] = rawgk.apppoint * rawgk.home_adjustment\n",
        "rawgk = rawgk.drop(columns=[\n",
        " 'expected_goals',\n",
        " 'team',\n",
        " 'expected_assists',\n",
        " 'apppoint',\n",
        " 'assistvalue',\n",
        "  'xGA',\n",
        "'home_adjustment'])\n",
        "rawdef= rawdfcs.query('pos==\"D\"')\n",
        "#rawdef['xP'] = ((rawdef.expected_goals * 6/1)+(rawdef.expected_assists * 3/1) +(rawdef.xCSP)+ (rawdef.apppoint) * rawdef.home_adjustment)\n",
        "rawdef['xP'] = ((rawdef.expected_goals * 6/1)+(rawdef.expected_assists * 3/1) + (rawdef.apppoint) * rawdef.home_adjustment)\n",
        "rawdef = rawdef.drop(columns=[\n",
        " 'expected_goals',\n",
        " 'team',\n",
        " 'expected_assists',\n",
        " 'apppoint',\n",
        " 'assistvalue',\n",
        "  'xGA',\n",
        " 'home_adjustment'])\n",
        "rawallplayers = pd.concat([rawfwd, rawmd, rawdef, rawgk], ignore_index=True)\n",
        "rawallplayers\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "AWnYpVh5kDzO",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 875
        },
        "outputId": "fb3f7b08-cbb4-4044-8b89-3a3fbb78d6bb"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-19-ab70f8b5b6ff>:6: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  rawfwd['xP'] = ((rawfwd.expected_goals * 4/1)+(rawfwd.expected_assists * 3/1) + (rawfwd.apppoint)) * rawfwd.home_adjustment\n",
            "<ipython-input-19-ab70f8b5b6ff>:15: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  rawmd['xP'] = ((rawmd.expected_goals * 5/1)+(rawmd.expected_assists * 3/1) + (rawmd.apppoint)) * rawmd.home_adjustment\n",
            "<ipython-input-19-ab70f8b5b6ff>:48: FutureWarning: The default value of regex will change from True to False in a future version.\n",
            "  epltabledef['Squad'] = epltabledef['Squad'].str.replace(r\"[\\\"\\',]\", '')\n",
            "<ipython-input-19-ab70f8b5b6ff>:58: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  rawgk['xP'] = rawgk.apppoint * rawgk.home_adjustment\n",
            "<ipython-input-19-ab70f8b5b6ff>:69: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  rawdef['xP'] = ((rawdef.expected_goals * 6/1)+(rawdef.expected_assists * 3/1) + (rawdef.apppoint) * rawdef.home_adjustment)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      id pos     name  cost  selected_by_percent  goals_scored  assists  bps  \\\n",
              "0      1   F  Balogun   4.5                  0.6             0        0    0   \n",
              "1      8   F  G.Jesus   7.9                  1.2             0        0    0   \n",
              "2     13   F  Nketiah   5.6                  6.8             1        1   32   \n",
              "3     33   F   Archer   4.5                  5.2             0        0   -1   \n",
              "4     39   F    Davis   5.0                  0.3             0        0    0   \n",
              "..   ...  ..      ...   ...                  ...           ...      ...  ...   \n",
              "673  647   G    Anang   4.0                  0.0             0        0    0   \n",
              "674  546   G  Bentley   4.0                  0.4             0        0    0   \n",
              "675  564   G     King   4.0                  0.8             0        0    0   \n",
              "676  569   G  Jos√© S√°   5.0                  1.1             0        0   31   \n",
              "677  571   G   ≈†arkiƒá   4.0                  0.5             0        0    0   \n",
              "\n",
              "     ict_index  points  points_per_game  minutes        xP  \n",
              "0          0.0       0              0.0        0  2.332358  \n",
              "1          0.0       0              0.0        0  2.332358  \n",
              "2         12.1      13              6.5      150  7.195325  \n",
              "3          0.3       0              0.0        5  2.203956  \n",
              "4          0.0       0              0.0        0  2.203956  \n",
              "..         ...     ...              ...      ...       ...  \n",
              "673        0.0       0              0.0        0  1.976612  \n",
              "674        0.0       0              0.0        0  1.641433  \n",
              "675        0.0       0              0.0        0  1.641433  \n",
              "676        4.6       3              1.5      180  1.641433  \n",
              "677        0.0       0              0.0        0  1.641433  \n",
              "\n",
              "[678 rows x 13 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b15694df-52a0-400e-9a3a-922fde2898e2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>pos</th>\n",
              "      <th>name</th>\n",
              "      <th>cost</th>\n",
              "      <th>selected_by_percent</th>\n",
              "      <th>goals_scored</th>\n",
              "      <th>assists</th>\n",
              "      <th>bps</th>\n",
              "      <th>ict_index</th>\n",
              "      <th>points</th>\n",
              "      <th>points_per_game</th>\n",
              "      <th>minutes</th>\n",
              "      <th>xP</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>F</td>\n",
              "      <td>Balogun</td>\n",
              "      <td>4.5</td>\n",
              "      <td>0.6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.332358</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>8</td>\n",
              "      <td>F</td>\n",
              "      <td>G.Jesus</td>\n",
              "      <td>7.9</td>\n",
              "      <td>1.2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.332358</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>13</td>\n",
              "      <td>F</td>\n",
              "      <td>Nketiah</td>\n",
              "      <td>5.6</td>\n",
              "      <td>6.8</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>32</td>\n",
              "      <td>12.1</td>\n",
              "      <td>13</td>\n",
              "      <td>6.5</td>\n",
              "      <td>150</td>\n",
              "      <td>7.195325</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>33</td>\n",
              "      <td>F</td>\n",
              "      <td>Archer</td>\n",
              "      <td>4.5</td>\n",
              "      <td>5.2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>-1</td>\n",
              "      <td>0.3</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>5</td>\n",
              "      <td>2.203956</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>39</td>\n",
              "      <td>F</td>\n",
              "      <td>Davis</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.203956</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>673</th>\n",
              "      <td>647</td>\n",
              "      <td>G</td>\n",
              "      <td>Anang</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.976612</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>674</th>\n",
              "      <td>546</td>\n",
              "      <td>G</td>\n",
              "      <td>Bentley</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.641433</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>675</th>\n",
              "      <td>564</td>\n",
              "      <td>G</td>\n",
              "      <td>King</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.641433</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>676</th>\n",
              "      <td>569</td>\n",
              "      <td>G</td>\n",
              "      <td>Jos√© S√°</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1.1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>31</td>\n",
              "      <td>4.6</td>\n",
              "      <td>3</td>\n",
              "      <td>1.5</td>\n",
              "      <td>180</td>\n",
              "      <td>1.641433</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>677</th>\n",
              "      <td>571</td>\n",
              "      <td>G</td>\n",
              "      <td>≈†arkiƒá</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.641433</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>678 rows √ó 13 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b15694df-52a0-400e-9a3a-922fde2898e2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b15694df-52a0-400e-9a3a-922fde2898e2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b15694df-52a0-400e-9a3a-922fde2898e2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-956636fd-ee65-4869-adf9-acce4f6c5b92\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-956636fd-ee65-4869-adf9-acce4f6c5b92')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-956636fd-ee65-4869-adf9-acce4f6c5b92 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rawgk1= rawdfcs.query('pos==\"G\"')\n",
        "rawgk1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "z3FgmhoCb3GG",
        "outputId": "4556e583-0450-4f6d-b2b7-1bef7d9f2ed7"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      id                     team pos       name  cost  selected_by_percent  \\\n",
              "16    17                  Arsenal   G   Ramsdale   5.0                 17.7   \n",
              "17    18                  Arsenal   G  R√∫narsson   4.0                  0.2   \n",
              "29   113                  Arsenal   G       Raya   4.9                  3.3   \n",
              "33   646                  Arsenal   G       Hein   4.0                  0.0   \n",
              "51    49              Aston Villa   G   Martinez   5.0                  8.2   \n",
              "..   ...                      ...  ..        ...   ...                  ...   \n",
              "645  647                 West Ham   G      Anang   4.0                  0.0   \n",
              "649  546  Wolverhampton Wanderers   G    Bentley   4.0                  0.4   \n",
              "665  564  Wolverhampton Wanderers   G       King   4.0                  0.8   \n",
              "670  569  Wolverhampton Wanderers   G    Jos√© S√°   5.0                  1.1   \n",
              "672  571  Wolverhampton Wanderers   G     ≈†arkiƒá   4.0                  0.5   \n",
              "\n",
              "     expected_goals  expected_assists  goals_scored  assists  bps  ict_index  \\\n",
              "16              0.0              0.01             0        0   35        2.8   \n",
              "17              0.0              0.00             0        0    0        0.0   \n",
              "29              0.0              0.00             0        0    0        0.0   \n",
              "33              0.0              0.00             0        0    0        0.0   \n",
              "51              0.0              0.00             0        0   49        6.8   \n",
              "..              ...               ...           ...      ...  ...        ...   \n",
              "645             0.0              0.00             0        0    0        0.0   \n",
              "649             0.0              0.00             0        0    0        0.0   \n",
              "665             0.0              0.00             0        0    0        0.0   \n",
              "670             0.0              0.00             0        0   31        4.6   \n",
              "672             0.0              0.00             0        0    0        0.0   \n",
              "\n",
              "     points  points_per_game  minutes  apppoint  assistvalue  home_adjustment  \\\n",
              "16        8              4.0      180         2            3         1.166179   \n",
              "17        0              0.0        0         2            3         1.166179   \n",
              "29        0              0.0        0         2            3         1.166179   \n",
              "33        0              0.0        0         2            3         1.166179   \n",
              "51        9              4.5      180         2            3         1.101978   \n",
              "..      ...              ...      ...       ...          ...              ...   \n",
              "645       0              0.0        0         2            3         0.988306   \n",
              "649       0              0.0        0         2            3         0.820717   \n",
              "665       0              0.0        0         2            3         0.820717   \n",
              "670       3              1.5      180         2            3         0.820717   \n",
              "672       0              0.0        0         2            3         0.820717   \n",
              "\n",
              "     xGA  \n",
              "16   2.2  \n",
              "17   2.2  \n",
              "29   2.2  \n",
              "33   2.2  \n",
              "51   4.0  \n",
              "..   ...  \n",
              "645  3.8  \n",
              "649  4.4  \n",
              "665  4.4  \n",
              "670  4.4  \n",
              "672  4.4  \n",
              "\n",
              "[79 rows x 19 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d46c86c5-78cf-44e1-946a-21ea05664622\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>team</th>\n",
              "      <th>pos</th>\n",
              "      <th>name</th>\n",
              "      <th>cost</th>\n",
              "      <th>selected_by_percent</th>\n",
              "      <th>expected_goals</th>\n",
              "      <th>expected_assists</th>\n",
              "      <th>goals_scored</th>\n",
              "      <th>assists</th>\n",
              "      <th>bps</th>\n",
              "      <th>ict_index</th>\n",
              "      <th>points</th>\n",
              "      <th>points_per_game</th>\n",
              "      <th>minutes</th>\n",
              "      <th>apppoint</th>\n",
              "      <th>assistvalue</th>\n",
              "      <th>home_adjustment</th>\n",
              "      <th>xGA</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>17</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>G</td>\n",
              "      <td>Ramsdale</td>\n",
              "      <td>5.0</td>\n",
              "      <td>17.7</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.01</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>35</td>\n",
              "      <td>2.8</td>\n",
              "      <td>8</td>\n",
              "      <td>4.0</td>\n",
              "      <td>180</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>1.166179</td>\n",
              "      <td>2.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>18</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>G</td>\n",
              "      <td>R√∫narsson</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.2</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>1.166179</td>\n",
              "      <td>2.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>113</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>G</td>\n",
              "      <td>Raya</td>\n",
              "      <td>4.9</td>\n",
              "      <td>3.3</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>1.166179</td>\n",
              "      <td>2.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>646</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>G</td>\n",
              "      <td>Hein</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>1.166179</td>\n",
              "      <td>2.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>51</th>\n",
              "      <td>49</td>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>G</td>\n",
              "      <td>Martinez</td>\n",
              "      <td>5.0</td>\n",
              "      <td>8.2</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>49</td>\n",
              "      <td>6.8</td>\n",
              "      <td>9</td>\n",
              "      <td>4.5</td>\n",
              "      <td>180</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>1.101978</td>\n",
              "      <td>4.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>645</th>\n",
              "      <td>647</td>\n",
              "      <td>West Ham</td>\n",
              "      <td>G</td>\n",
              "      <td>Anang</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>0.988306</td>\n",
              "      <td>3.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>649</th>\n",
              "      <td>546</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>G</td>\n",
              "      <td>Bentley</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.4</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>0.820717</td>\n",
              "      <td>4.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>665</th>\n",
              "      <td>564</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>G</td>\n",
              "      <td>King</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>0.820717</td>\n",
              "      <td>4.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>670</th>\n",
              "      <td>569</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>G</td>\n",
              "      <td>Jos√© S√°</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1.1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>31</td>\n",
              "      <td>4.6</td>\n",
              "      <td>3</td>\n",
              "      <td>1.5</td>\n",
              "      <td>180</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>0.820717</td>\n",
              "      <td>4.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>672</th>\n",
              "      <td>571</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>G</td>\n",
              "      <td>≈†arkiƒá</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.5</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>0.820717</td>\n",
              "      <td>4.4</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>79 rows √ó 19 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d46c86c5-78cf-44e1-946a-21ea05664622')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d46c86c5-78cf-44e1-946a-21ea05664622 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d46c86c5-78cf-44e1-946a-21ea05664622');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-10f4bb17-f13b-4a6d-8f03-38112f6680b9\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-10f4bb17-f13b-4a6d-8f03-38112f6680b9')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-10f4bb17-f13b-4a6d-8f03-38112f6680b9 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from pandas import ExcelWriter"
      ],
      "metadata": {
        "id": "ONZy1SvCDu6y"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "writer = ExcelWriter('notes.xlsx')"
      ],
      "metadata": {
        "id": "iubZBRlVEhiz"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "rawallplayers.to_excel(writer, sheet_name='Sheet1')\n",
        "gw2adjustments.to_excel(writer, sheet_name='Sheet2')\n",
        "#fplwithunderstat.to_excel(writer, sheet_name='Sheet3')\n",
        "\n",
        "# Close the Pandas Excel writer and output the Excel file.\n",
        "writer.save()"
      ],
      "metadata": {
        "id": "slYEIma_E0uP",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f63f6a15-29bd-4860-d156-957da41f87d1"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-23-114ca51f6f07>:6: FutureWarning: save is not part of the public API, usage can give unexpected results and will be removed in a future version\n",
            "  writer.save()\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "gwfixtures"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "3udskoGrT73A",
        "outputId": "d3085051-dbb3-48a3-bc47-4acf171200ca"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     event            team_h                   team_a          kickoff_time\n",
              "0      NaN        Luton Town                  Burnley                   NaN\n",
              "1      NaN   Manchester City                Brentford                   NaN\n",
              "2      1.0           Burnley          Manchester City  2023-08-11T19:00:00Z\n",
              "3      1.0           Arsenal        Nottingham Forest  2023-08-12T12:00:00Z\n",
              "4      1.0       Bournemouth                 West Ham  2023-08-12T14:00:00Z\n",
              "..     ...               ...                      ...                   ...\n",
              "375   38.0    Crystal Palace              Aston Villa  2024-05-19T15:00:00Z\n",
              "376   38.0         Liverpool  Wolverhampton Wanderers  2024-05-19T15:00:00Z\n",
              "377   38.0        Luton Town                   Fulham  2024-05-19T15:00:00Z\n",
              "378   38.0   Manchester City                 West Ham  2024-05-19T15:00:00Z\n",
              "379   38.0  Sheffield United                Tottenham  2024-05-19T15:00:00Z\n",
              "\n",
              "[380 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-db45a30b-8291-4a67-9fbd-e0ad284f6a1c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>event</th>\n",
              "      <th>team_h</th>\n",
              "      <th>team_a</th>\n",
              "      <th>kickoff_time</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>NaN</td>\n",
              "      <td>Luton Town</td>\n",
              "      <td>Burnley</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>NaN</td>\n",
              "      <td>Manchester City</td>\n",
              "      <td>Brentford</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.0</td>\n",
              "      <td>Burnley</td>\n",
              "      <td>Manchester City</td>\n",
              "      <td>2023-08-11T19:00:00Z</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.0</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>Nottingham Forest</td>\n",
              "      <td>2023-08-12T12:00:00Z</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.0</td>\n",
              "      <td>Bournemouth</td>\n",
              "      <td>West Ham</td>\n",
              "      <td>2023-08-12T14:00:00Z</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>375</th>\n",
              "      <td>38.0</td>\n",
              "      <td>Crystal Palace</td>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>2024-05-19T15:00:00Z</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>376</th>\n",
              "      <td>38.0</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>2024-05-19T15:00:00Z</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>377</th>\n",
              "      <td>38.0</td>\n",
              "      <td>Luton Town</td>\n",
              "      <td>Fulham</td>\n",
              "      <td>2024-05-19T15:00:00Z</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>378</th>\n",
              "      <td>38.0</td>\n",
              "      <td>Manchester City</td>\n",
              "      <td>West Ham</td>\n",
              "      <td>2024-05-19T15:00:00Z</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>379</th>\n",
              "      <td>38.0</td>\n",
              "      <td>Sheffield United</td>\n",
              "      <td>Tottenham</td>\n",
              "      <td>2024-05-19T15:00:00Z</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>380 rows √ó 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-db45a30b-8291-4a67-9fbd-e0ad284f6a1c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-db45a30b-8291-4a67-9fbd-e0ad284f6a1c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-db45a30b-8291-4a67-9fbd-e0ad284f6a1c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c15a1971-5043-45de-a6ed-f24251e7b78e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c15a1971-5043-45de-a6ed-f24251e7b78e')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c15a1971-5043-45de-a6ed-f24251e7b78e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rawdfallgw = pd.merge(master,\n",
        "                     gw2adjustments,\n",
        "                     on ='team',\n",
        "                     how ='left')\n",
        "rawfwdallgw = rawdfallgw.query('pos==\"F\"')\n",
        "rawfwdallgw['xPallgw'] = ((rawfwdallgw.expected_goals * 4/1)+(rawfwdallgw.expected_assists * 3/1) + (rawfwdallgw.apppoint))\n",
        "rawfwdallgw = rawfwdallgw.drop(columns=[\n",
        " 'expected_goals',\n",
        " 'expected_assists',\n",
        " 'apppoint',\n",
        " 'assistvalue',\n",
        "])\n",
        "rawmdallgw = rawdfallgw.query('pos==\"M\"')\n",
        "rawmdallgw['xPallgw'] = ((rawmdallgw.expected_goals * 5/1)+(rawmdallgw.expected_assists * 3/1) + (rawmdallgw.apppoint))\n",
        "rawmdallgw = rawmdallgw.drop(columns=[\n",
        " 'expected_goals',\n",
        " 'expected_assists',\n",
        " 'apppoint',\n",
        " 'assistvalue',\n",
        "])\n",
        "fbref = pd.read_html('https://fbref.com/en/comps/9/Premier-League-Stats')\n",
        "epltable = fbref[0]\n",
        "epltabledef = epltable.drop(columns=[ 'Rk',\n",
        " 'MP',\n",
        " 'W',\n",
        " 'D',\n",
        " 'L',\n",
        " 'GF',\n",
        " 'GA',\n",
        " 'GD',\n",
        " 'xG',\n",
        " 'xGD',\n",
        " 'xGD/90',\n",
        " 'Pts',\n",
        " 'Pts/MP',\n",
        " 'Last 5',\n",
        " 'Attendance',\n",
        " 'Top Team Scorer',\n",
        " 'Goalkeeper',\n",
        " 'Notes'])\n",
        "epltabledef= epltabledef.replace('Newcastle Utd', 'Newcastle United')\n",
        "epltabledef= epltabledef.replace('Wolves','Wolverhampton Wanderers')\n",
        "epltabledef= epltabledef.replace('Leeds United','Leeds')\n",
        "epltabledef= epltabledef.replace('Leicester City','Leicester')\n",
        "epltabledef= epltabledef.replace('Manchester Utd','Manchester United')\n",
        "epltabledef['Squad'] = epltabledef['Squad'].str.replace(r\"[\\\"\\',]\", '')\n",
        "epltabledef= epltabledef.replace('Nottham Forest','Nottingham Forest')\n",
        "#epltabledef['xCSP'] = (4 - (epltabledef.xGA * 4/1))\n",
        "epltabledef.rename(columns={'Squad': 'team'}, inplace=True)\n",
        "rawdfcs = pd.merge(rawdf,\n",
        "                     epltabledef,\n",
        "                     on ='team',\n",
        "                     how ='left')\n",
        "rawgkallgw= rawdfcs.query('pos==\"G\"')\n",
        "rawgkallgw['xPallgw'] = (rawgkallgw.apppoint)\n",
        "#rawgkallgw['xPallgw'] = ((rawgkallgw.xCSP)+ (rawgkallgw.apppoint))\n",
        "rawgkallgw = rawgkallgw.drop(columns=[\n",
        " 'expected_goals',\n",
        "  'expected_assists',\n",
        " 'apppoint',\n",
        " 'assistvalue',\n",
        "  'xGA',\n",
        "])\n",
        "rawdefallgw= rawdfcs.query('pos==\"D\"')\n",
        "#rawdefallgw['xPallgw'] = (rawdefallgw.expected_goals * 6/1)+(rawdefallgw.expected_assists * 3/1) +(rawdefallgw.xCSP)+ (rawdefallgw.apppoint)\n",
        "rawdefallgw['xPallgw'] = (rawdefallgw.expected_goals * 6/1)+(rawdefallgw.expected_assists * 3/1) + (rawdefallgw.apppoint)\n",
        "rawdefallgw = rawdefallgw.drop(columns=[\n",
        " 'expected_goals',\n",
        " 'expected_assists',\n",
        " 'apppoint',\n",
        " 'assistvalue',\n",
        "  'xGA',])\n",
        "rawallplayersallgw = pd.concat([rawfwdallgw, rawmdallgw, rawdefallgw, rawgkallgw], ignore_index=True)\n",
        "rawallplayersallgw\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 875
        },
        "id": "xxPTwE3TZZC0",
        "outputId": "3d2a5fbb-1198-45a4-91dd-a5da2c0fa878"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-25-c921edf6001e>:6: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  rawfwdallgw['xPallgw'] = ((rawfwdallgw.expected_goals * 4/1)+(rawfwdallgw.expected_assists * 3/1) + (rawfwdallgw.apppoint))\n",
            "<ipython-input-25-c921edf6001e>:14: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  rawmdallgw['xPallgw'] = ((rawmdallgw.expected_goals * 5/1)+(rawmdallgw.expected_assists * 3/1) + (rawmdallgw.apppoint))\n",
            "<ipython-input-25-c921edf6001e>:46: FutureWarning: The default value of regex will change from True to False in a future version.\n",
            "  epltabledef['Squad'] = epltabledef['Squad'].str.replace(r\"[\\\"\\',]\", '')\n",
            "<ipython-input-25-c921edf6001e>:55: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  rawgkallgw['xPallgw'] = (rawgkallgw.apppoint)\n",
            "<ipython-input-25-c921edf6001e>:66: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  rawdefallgw['xPallgw'] = (rawdefallgw.expected_goals * 6/1)+(rawdefallgw.expected_assists * 3/1) + (rawdefallgw.apppoint)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      id                     team pos     name  cost  selected_by_percent  \\\n",
              "0      1                  Arsenal   F  Balogun   4.5                  0.6   \n",
              "1      8                  Arsenal   F  G.Jesus   7.9                  1.2   \n",
              "2     13                  Arsenal   F  Nketiah   5.6                  6.8   \n",
              "3     33              Aston Villa   F   Archer   4.5                  5.2   \n",
              "4     39              Aston Villa   F    Davis   5.0                  0.3   \n",
              "..   ...                      ...  ..      ...   ...                  ...   \n",
              "673  647                 West Ham   G    Anang   4.0                  0.0   \n",
              "674  546  Wolverhampton Wanderers   G  Bentley   4.0                  0.4   \n",
              "675  564  Wolverhampton Wanderers   G     King   4.0                  0.8   \n",
              "676  569  Wolverhampton Wanderers   G  Jos√© S√°   5.0                  1.1   \n",
              "677  571  Wolverhampton Wanderers   G   ≈†arkiƒá   4.0                  0.5   \n",
              "\n",
              "     goals_scored  assists  bps  ict_index  points  points_per_game  minutes  \\\n",
              "0               0        0    0        0.0       0              0.0        0   \n",
              "1               0        0    0        0.0       0              0.0        0   \n",
              "2               1        1   32       12.1      13              6.5      150   \n",
              "3               0        0   -1        0.3       0              0.0        5   \n",
              "4               0        0    0        0.0       0              0.0        0   \n",
              "..            ...      ...  ...        ...     ...              ...      ...   \n",
              "673             0        0    0        0.0       0              0.0        0   \n",
              "674             0        0    0        0.0       0              0.0        0   \n",
              "675             0        0    0        0.0       0              0.0        0   \n",
              "676             0        0   31        4.6       3              1.5      180   \n",
              "677             0        0    0        0.0       0              0.0        0   \n",
              "\n",
              "     home_adjustment  xPallgw  \n",
              "0           1.166179     2.00  \n",
              "1           1.166179     2.00  \n",
              "2           1.166179     6.17  \n",
              "3           1.101978     2.00  \n",
              "4           1.101978     2.00  \n",
              "..               ...      ...  \n",
              "673         0.988306     2.00  \n",
              "674         0.820717     2.00  \n",
              "675         0.820717     2.00  \n",
              "676         0.820717     2.00  \n",
              "677         0.820717     2.00  \n",
              "\n",
              "[678 rows x 15 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d640007f-50b7-4459-a435-6b8433d3bc03\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>team</th>\n",
              "      <th>pos</th>\n",
              "      <th>name</th>\n",
              "      <th>cost</th>\n",
              "      <th>selected_by_percent</th>\n",
              "      <th>goals_scored</th>\n",
              "      <th>assists</th>\n",
              "      <th>bps</th>\n",
              "      <th>ict_index</th>\n",
              "      <th>points</th>\n",
              "      <th>points_per_game</th>\n",
              "      <th>minutes</th>\n",
              "      <th>home_adjustment</th>\n",
              "      <th>xPallgw</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>F</td>\n",
              "      <td>Balogun</td>\n",
              "      <td>4.5</td>\n",
              "      <td>0.6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.166179</td>\n",
              "      <td>2.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>8</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>F</td>\n",
              "      <td>G.Jesus</td>\n",
              "      <td>7.9</td>\n",
              "      <td>1.2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.166179</td>\n",
              "      <td>2.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>13</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>F</td>\n",
              "      <td>Nketiah</td>\n",
              "      <td>5.6</td>\n",
              "      <td>6.8</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>32</td>\n",
              "      <td>12.1</td>\n",
              "      <td>13</td>\n",
              "      <td>6.5</td>\n",
              "      <td>150</td>\n",
              "      <td>1.166179</td>\n",
              "      <td>6.17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>33</td>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>F</td>\n",
              "      <td>Archer</td>\n",
              "      <td>4.5</td>\n",
              "      <td>5.2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>-1</td>\n",
              "      <td>0.3</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>5</td>\n",
              "      <td>1.101978</td>\n",
              "      <td>2.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>39</td>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>F</td>\n",
              "      <td>Davis</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.101978</td>\n",
              "      <td>2.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>673</th>\n",
              "      <td>647</td>\n",
              "      <td>West Ham</td>\n",
              "      <td>G</td>\n",
              "      <td>Anang</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.988306</td>\n",
              "      <td>2.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>674</th>\n",
              "      <td>546</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>G</td>\n",
              "      <td>Bentley</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.820717</td>\n",
              "      <td>2.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>675</th>\n",
              "      <td>564</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>G</td>\n",
              "      <td>King</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.820717</td>\n",
              "      <td>2.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>676</th>\n",
              "      <td>569</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>G</td>\n",
              "      <td>Jos√© S√°</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1.1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>31</td>\n",
              "      <td>4.6</td>\n",
              "      <td>3</td>\n",
              "      <td>1.5</td>\n",
              "      <td>180</td>\n",
              "      <td>0.820717</td>\n",
              "      <td>2.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>677</th>\n",
              "      <td>571</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>G</td>\n",
              "      <td>≈†arkiƒá</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.820717</td>\n",
              "      <td>2.00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>678 rows √ó 15 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d640007f-50b7-4459-a435-6b8433d3bc03')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d640007f-50b7-4459-a435-6b8433d3bc03 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d640007f-50b7-4459-a435-6b8433d3bc03');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a62ea6de-cf7d-4bf1-a1eb-4e0edfed9596\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a62ea6de-cf7d-4bf1-a1eb-4e0edfed9596')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a62ea6de-cf7d-4bf1-a1eb-4e0edfed9596 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rawmdallgw"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "ZtNrmQMhefCc",
        "outputId": "a81bd055-9682-4abc-e961-2599788b62bd"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      id                     team pos             name  cost  \\\n",
              "2      3                  Arsenal   M         M.Elneny   4.4   \n",
              "3      4                  Arsenal   M     F√°bio Vieira   5.4   \n",
              "5      6                  Arsenal   M          Havertz   7.4   \n",
              "8      9                  Arsenal   M         Jorginho   5.5   \n",
              "10    11                  Arsenal   M       Marquinhos   4.5   \n",
              "..   ...                      ...  ..              ...   ...   \n",
              "667  566  Wolverhampton Wanderers   M       Matheus N.   5.0   \n",
              "668  567  Wolverhampton Wanderers   M             Neto   5.5   \n",
              "669  568  Wolverhampton Wanderers   M          Podence   5.4   \n",
              "671  570  Wolverhampton Wanderers   M          Sarabia   5.0   \n",
              "675  574  Wolverhampton Wanderers   M  Boubacar Traore   4.5   \n",
              "\n",
              "     selected_by_percent  goals_scored  assists  bps  ict_index  points  \\\n",
              "2                    0.1             0        0    0        0.0       0   \n",
              "3                    0.1             0        0    0        0.0       0   \n",
              "5                    3.4             0        0   10        7.4       4   \n",
              "8                    0.2             0        0    5        0.4       1   \n",
              "10                   0.1             0        0    0        0.0       0   \n",
              "..                   ...           ...      ...  ...        ...     ...   \n",
              "667                  0.2             0        0   15        8.9       1   \n",
              "668                  0.3             0        0   26       18.7       3   \n",
              "669                  0.1             0        0    0        0.0       0   \n",
              "671                  0.2             0        1   24       12.8       7   \n",
              "675                  0.5             0        0    0        0.0       0   \n",
              "\n",
              "     points_per_game  minutes  home_adjustment  xPallgw  \n",
              "2                0.0        0         1.166179     2.00  \n",
              "3                0.0        0         1.166179     2.00  \n",
              "5                2.0      180         1.166179     3.22  \n",
              "8                1.0       11         1.166179     2.03  \n",
              "10               0.0        0         1.166179     2.00  \n",
              "..               ...      ...              ...      ...  \n",
              "667              0.5      180         0.820717     3.00  \n",
              "668              1.5      180         0.820717     7.82  \n",
              "669              0.0        0         0.820717     2.00  \n",
              "671              3.5       97         0.820717     4.26  \n",
              "675              0.0        0         0.820717     2.00  \n",
              "\n",
              "[290 rows x 15 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fe5e6586-3459-4567-931a-3e0c4b23df7b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>team</th>\n",
              "      <th>pos</th>\n",
              "      <th>name</th>\n",
              "      <th>cost</th>\n",
              "      <th>selected_by_percent</th>\n",
              "      <th>goals_scored</th>\n",
              "      <th>assists</th>\n",
              "      <th>bps</th>\n",
              "      <th>ict_index</th>\n",
              "      <th>points</th>\n",
              "      <th>points_per_game</th>\n",
              "      <th>minutes</th>\n",
              "      <th>home_adjustment</th>\n",
              "      <th>xPallgw</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>M</td>\n",
              "      <td>M.Elneny</td>\n",
              "      <td>4.4</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.166179</td>\n",
              "      <td>2.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>M</td>\n",
              "      <td>F√°bio Vieira</td>\n",
              "      <td>5.4</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.166179</td>\n",
              "      <td>2.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>6</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>M</td>\n",
              "      <td>Havertz</td>\n",
              "      <td>7.4</td>\n",
              "      <td>3.4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>7.4</td>\n",
              "      <td>4</td>\n",
              "      <td>2.0</td>\n",
              "      <td>180</td>\n",
              "      <td>1.166179</td>\n",
              "      <td>3.22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>9</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>M</td>\n",
              "      <td>Jorginho</td>\n",
              "      <td>5.5</td>\n",
              "      <td>0.2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>0.4</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>11</td>\n",
              "      <td>1.166179</td>\n",
              "      <td>2.03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>11</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>M</td>\n",
              "      <td>Marquinhos</td>\n",
              "      <td>4.5</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.166179</td>\n",
              "      <td>2.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>667</th>\n",
              "      <td>566</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>M</td>\n",
              "      <td>Matheus N.</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>15</td>\n",
              "      <td>8.9</td>\n",
              "      <td>1</td>\n",
              "      <td>0.5</td>\n",
              "      <td>180</td>\n",
              "      <td>0.820717</td>\n",
              "      <td>3.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>668</th>\n",
              "      <td>567</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>M</td>\n",
              "      <td>Neto</td>\n",
              "      <td>5.5</td>\n",
              "      <td>0.3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>26</td>\n",
              "      <td>18.7</td>\n",
              "      <td>3</td>\n",
              "      <td>1.5</td>\n",
              "      <td>180</td>\n",
              "      <td>0.820717</td>\n",
              "      <td>7.82</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>669</th>\n",
              "      <td>568</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>M</td>\n",
              "      <td>Podence</td>\n",
              "      <td>5.4</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.820717</td>\n",
              "      <td>2.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>671</th>\n",
              "      <td>570</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>M</td>\n",
              "      <td>Sarabia</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>24</td>\n",
              "      <td>12.8</td>\n",
              "      <td>7</td>\n",
              "      <td>3.5</td>\n",
              "      <td>97</td>\n",
              "      <td>0.820717</td>\n",
              "      <td>4.26</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>675</th>\n",
              "      <td>574</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>M</td>\n",
              "      <td>Boubacar Traore</td>\n",
              "      <td>4.5</td>\n",
              "      <td>0.5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.820717</td>\n",
              "      <td>2.00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>290 rows √ó 15 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fe5e6586-3459-4567-931a-3e0c4b23df7b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fe5e6586-3459-4567-931a-3e0c4b23df7b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fe5e6586-3459-4567-931a-3e0c4b23df7b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-fc874df1-9ad1-4e3c-bbf9-94efc2e3f631\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fc874df1-9ad1-4e3c-bbf9-94efc2e3f631')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-fc874df1-9ad1-4e3c-bbf9-94efc2e3f631 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "gw2 = homesawayspi.query('Event==\"2.0\"')\n",
        "pd.options.mode.chained_assignment = None  # default='warn'\n",
        "PLSPI = spi.query('league==\"Barclays Premier League\"')\n",
        "PLSPI['League Average']  = PLSPI[\"spi\"].mean()\n",
        "laverage = PLSPI[\"spi\"].mean()\n",
        "PLSPI['League Average'].astype(int)\n",
        "gw2['League_Average']  = laverage\n",
        "gw2.rename(columns = {'Home SPI':'HomeSPI', 'Away SPI':'AwaySPI'}, inplace = True)\n",
        "gw2['home_difference'] = gw2.HomeSPI - gw2.League_Average\n",
        "gw2['away_difference'] = gw2.AwaySPI - gw2.League_Average\n",
        "gw2['home_adjustment'] = (gw2.home_difference - gw2.away_difference + gw2.League_Average)/gw2.League_Average\n",
        "gw2['away_adjustment'] = (gw2.away_difference - gw2.home_difference+ gw2.League_Average)/gw2.League_Average\n",
        "gw2adjustments = gw2[['team_h', 'home_adjustment']].append(gw2[['team_a','away_adjustment']].set_axis(['team_h', 'home_adjustment'], axis=1)).reset_index(drop=True)\n",
        "gw2adjustments.rename(columns = {'team_h':'team'}, inplace = True)\n",
        "gw2adjustments.rename(columns = {'home_adjustment':'gw2adjustment'}, inplace = True)\n",
        "gw2adjustments = gw2adjustments.groupby('team', as_index=False)['gw2adjustment'].aggregate('sum')\n",
        "gw2adjustments"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 649
        },
        "id": "nL5rLLG4kOqM",
        "outputId": "3659e14a-0e11-4401-a2b9-4f9a8bbf4551"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-27-cc71a582ca3c>:13: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  gw2adjustments = gw2[['team_h', 'home_adjustment']].append(gw2[['team_a','away_adjustment']].set_axis(['team_h', 'home_adjustment'], axis=1)).reset_index(drop=True)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                       team  gw2adjustment\n",
              "0                   Arsenal       1.145356\n",
              "1               Aston Villa       1.217755\n",
              "2               Bournemouth       0.661625\n",
              "3                 Brentford       1.123955\n",
              "4                  Brighton       1.303218\n",
              "5                   Chelsea       1.064757\n",
              "6            Crystal Palace       0.854644\n",
              "7                   Everton       0.782245\n",
              "8                    Fulham       0.876045\n",
              "9                 Liverpool       1.338375\n",
              "10          Manchester City       1.115339\n",
              "11        Manchester United       1.096440\n",
              "12         Newcastle United       0.884661\n",
              "13        Nottingham Forest       0.993886\n",
              "14         Sheffield United       1.006114\n",
              "15                Tottenham       0.903560\n",
              "16                 West Ham       0.935243\n",
              "17  Wolverhampton Wanderers       0.696782"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-38140570-d965-4197-b944-ec08f2295a01\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>team</th>\n",
              "      <th>gw2adjustment</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Arsenal</td>\n",
              "      <td>1.145356</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>1.217755</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Bournemouth</td>\n",
              "      <td>0.661625</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Brentford</td>\n",
              "      <td>1.123955</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Brighton</td>\n",
              "      <td>1.303218</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Chelsea</td>\n",
              "      <td>1.064757</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Crystal Palace</td>\n",
              "      <td>0.854644</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Everton</td>\n",
              "      <td>0.782245</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Fulham</td>\n",
              "      <td>0.876045</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Liverpool</td>\n",
              "      <td>1.338375</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Manchester City</td>\n",
              "      <td>1.115339</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Manchester United</td>\n",
              "      <td>1.096440</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Newcastle United</td>\n",
              "      <td>0.884661</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Nottingham Forest</td>\n",
              "      <td>0.993886</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Sheffield United</td>\n",
              "      <td>1.006114</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>Tottenham</td>\n",
              "      <td>0.903560</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>West Ham</td>\n",
              "      <td>0.935243</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>0.696782</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-38140570-d965-4197-b944-ec08f2295a01')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-38140570-d965-4197-b944-ec08f2295a01 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-38140570-d965-4197-b944-ec08f2295a01');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d61e0804-5174-44c1-8e8b-8a5a6cc50eef\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d61e0804-5174-44c1-8e8b-8a5a6cc50eef')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d61e0804-5174-44c1-8e8b-8a5a6cc50eef button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "gw2blanks = [['Burnley', 0], ['Luton Town', 0]]\n",
        "\n",
        "# Create the pandas DataFrame\n",
        "blanks2 = pd.DataFrame(gw2blanks, columns=['team', 'gw2adjustment'])\n",
        "blanks2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "xkGffHD0iXWI",
        "outputId": "e515a0c0-edd7-46cb-c961-f94874cf280e"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         team  gw2adjustment\n",
              "0     Burnley              0\n",
              "1  Luton Town              0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a64015c1-48d0-4b6f-bfe4-4457a1af8b55\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>team</th>\n",
              "      <th>gw2adjustment</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Burnley</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Luton Town</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a64015c1-48d0-4b6f-bfe4-4457a1af8b55')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a64015c1-48d0-4b6f-bfe4-4457a1af8b55 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a64015c1-48d0-4b6f-bfe4-4457a1af8b55');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-58227a0c-3ed5-4151-af74-bf90b54cdd22\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-58227a0c-3ed5-4151-af74-bf90b54cdd22')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-58227a0c-3ed5-4151-af74-bf90b54cdd22 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "gw2adjustments = pd.concat([gw2adjustments, blanks2])\n",
        "gw2adjustments = gw2adjustments.reset_index(drop=True)\n",
        "gw2adjustments"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 677
        },
        "id": "JNr3eV5Rir58",
        "outputId": "b389f331-5ca7-46c1-e5c2-64997550b175"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                       team  gw2adjustment\n",
              "0                   Arsenal       1.145356\n",
              "1               Aston Villa       1.217755\n",
              "2               Bournemouth       0.661625\n",
              "3                 Brentford       1.123955\n",
              "4                  Brighton       1.303218\n",
              "5                   Chelsea       1.064757\n",
              "6            Crystal Palace       0.854644\n",
              "7                   Everton       0.782245\n",
              "8                    Fulham       0.876045\n",
              "9                 Liverpool       1.338375\n",
              "10          Manchester City       1.115339\n",
              "11        Manchester United       1.096440\n",
              "12         Newcastle United       0.884661\n",
              "13        Nottingham Forest       0.993886\n",
              "14         Sheffield United       1.006114\n",
              "15                Tottenham       0.903560\n",
              "16                 West Ham       0.935243\n",
              "17  Wolverhampton Wanderers       0.696782\n",
              "18                  Burnley       0.000000\n",
              "19               Luton Town       0.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-96447cc2-d6d5-4bdf-8e66-a24ef8540596\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>team</th>\n",
              "      <th>gw2adjustment</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Arsenal</td>\n",
              "      <td>1.145356</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>1.217755</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Bournemouth</td>\n",
              "      <td>0.661625</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Brentford</td>\n",
              "      <td>1.123955</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Brighton</td>\n",
              "      <td>1.303218</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Chelsea</td>\n",
              "      <td>1.064757</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Crystal Palace</td>\n",
              "      <td>0.854644</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Everton</td>\n",
              "      <td>0.782245</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Fulham</td>\n",
              "      <td>0.876045</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Liverpool</td>\n",
              "      <td>1.338375</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Manchester City</td>\n",
              "      <td>1.115339</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Manchester United</td>\n",
              "      <td>1.096440</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Newcastle United</td>\n",
              "      <td>0.884661</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Nottingham Forest</td>\n",
              "      <td>0.993886</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Sheffield United</td>\n",
              "      <td>1.006114</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>Tottenham</td>\n",
              "      <td>0.903560</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>West Ham</td>\n",
              "      <td>0.935243</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>0.696782</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>Burnley</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>Luton Town</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-96447cc2-d6d5-4bdf-8e66-a24ef8540596')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-96447cc2-d6d5-4bdf-8e66-a24ef8540596 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-96447cc2-d6d5-4bdf-8e66-a24ef8540596');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9b95dfcd-e8e1-40a3-9b06-8d96dffe7ef9\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9b95dfcd-e8e1-40a3-9b06-8d96dffe7ef9')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9b95dfcd-e8e1-40a3-9b06-8d96dffe7ef9 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "gw3 = homesawayspi.query('Event==\"3.0\"')\n",
        "pd.options.mode.chained_assignment = None  # default='warn'\n",
        "PLSPI = spi.query('league==\"Barclays Premier League\"')\n",
        "PLSPI['League Average']  = PLSPI[\"spi\"].mean()\n",
        "laverage = PLSPI[\"spi\"].mean()\n",
        "PLSPI['League Average'].astype(int)\n",
        "gw3['League_Average']  = laverage\n",
        "gw3.rename(columns = {'Home SPI':'HomeSPI', 'Away SPI':'AwaySPI'}, inplace = True)\n",
        "gw3['home_difference'] = gw3.HomeSPI - gw3.League_Average\n",
        "gw3['away_difference'] = gw3.AwaySPI - gw3.League_Average\n",
        "gw3['home_adjustment'] = (gw3.home_difference - gw3.away_difference + gw3.League_Average)/gw3.League_Average\n",
        "gw3['away_adjustment'] = (gw3.away_difference - gw3.home_difference+ gw3.League_Average)/gw3.League_Average\n",
        "gw3adjustments = gw3[['team_h', 'home_adjustment']].append(gw3[['team_a','away_adjustment']].set_axis(['team_h', 'home_adjustment'], axis=1)).reset_index(drop=True)\n",
        "gw3adjustments.rename(columns = {'team_h':'team'}, inplace = True)\n",
        "gw3adjustments.rename(columns = {'home_adjustment':'gw3adjustment'}, inplace = True)\n",
        "gw3adjustments"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 711
        },
        "id": "bg97rds1kb73",
        "outputId": "07e32844-b835-451b-e295-6b345d3202f5"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-30-a2637fad4f3e>:13: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  gw3adjustments = gw3[['team_h', 'home_adjustment']].append(gw3[['team_a','away_adjustment']].set_axis(['team_h', 'home_adjustment'], axis=1)).reset_index(drop=True)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                       team  gw3adjustment\n",
              "0                   Chelsea       1.282095\n",
              "1               Bournemouth       0.825462\n",
              "2                   Arsenal       1.218172\n",
              "3                 Brentford       1.051138\n",
              "4                   Everton       1.063506\n",
              "5         Manchester United       1.318921\n",
              "6                  Brighton       1.135628\n",
              "7                   Burnley       0.772656\n",
              "8          Sheffield United       0.507653\n",
              "9          Newcastle United       0.996804\n",
              "10               Luton Town       0.717905\n",
              "11                Tottenham       1.174538\n",
              "12                   Fulham       0.781828\n",
              "13           Crystal Palace       0.948862\n",
              "14  Wolverhampton Wanderers       0.936494\n",
              "15        Nottingham Forest       0.681079\n",
              "16                 West Ham       0.864372\n",
              "17              Aston Villa       1.227344\n",
              "18          Manchester City       1.492347\n",
              "19                Liverpool       1.003196"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ffa59f18-dc2c-4d66-9852-335ade16bfe7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>team</th>\n",
              "      <th>gw3adjustment</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Chelsea</td>\n",
              "      <td>1.282095</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Bournemouth</td>\n",
              "      <td>0.825462</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Arsenal</td>\n",
              "      <td>1.218172</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Brentford</td>\n",
              "      <td>1.051138</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Everton</td>\n",
              "      <td>1.063506</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Manchester United</td>\n",
              "      <td>1.318921</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Brighton</td>\n",
              "      <td>1.135628</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Burnley</td>\n",
              "      <td>0.772656</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Sheffield United</td>\n",
              "      <td>0.507653</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Newcastle United</td>\n",
              "      <td>0.996804</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Luton Town</td>\n",
              "      <td>0.717905</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Tottenham</td>\n",
              "      <td>1.174538</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Fulham</td>\n",
              "      <td>0.781828</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Crystal Palace</td>\n",
              "      <td>0.948862</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>0.936494</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>Nottingham Forest</td>\n",
              "      <td>0.681079</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>West Ham</td>\n",
              "      <td>0.864372</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>1.227344</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>Manchester City</td>\n",
              "      <td>1.492347</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>Liverpool</td>\n",
              "      <td>1.003196</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ffa59f18-dc2c-4d66-9852-335ade16bfe7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ffa59f18-dc2c-4d66-9852-335ade16bfe7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ffa59f18-dc2c-4d66-9852-335ade16bfe7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-41a6ec70-deb2-4b19-96fe-51d33ab86fb6\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-41a6ec70-deb2-4b19-96fe-51d33ab86fb6')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-41a6ec70-deb2-4b19-96fe-51d33ab86fb6 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "##gw3blanks = [['Newcastle United', 0], ['Manchester United', 0], ['Brentford', 0], ['Brighton', 0]]\n",
        "\n",
        "# Create the pandas DataFrame\n",
        "##blanks = pd.DataFrame(gw3blanks, columns=['team', 'gw3adjustment'])\n",
        "##blanks"
      ],
      "metadata": {
        "id": "iCizQgwMD84B"
      },
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#gw3adjustments = pd.concat([gw3adjustments, blanks])\n",
        "#gw3adjustments = gw3adjustments.reset_index(drop=True)\n",
        "gw3adjustments"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 677
        },
        "id": "iyc8Xy80D_GR",
        "outputId": "08870668-7114-4397-9df8-efc49fc65f49"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                       team  gw3adjustment\n",
              "0                   Chelsea       1.282095\n",
              "1               Bournemouth       0.825462\n",
              "2                   Arsenal       1.218172\n",
              "3                 Brentford       1.051138\n",
              "4                   Everton       1.063506\n",
              "5         Manchester United       1.318921\n",
              "6                  Brighton       1.135628\n",
              "7                   Burnley       0.772656\n",
              "8          Sheffield United       0.507653\n",
              "9          Newcastle United       0.996804\n",
              "10               Luton Town       0.717905\n",
              "11                Tottenham       1.174538\n",
              "12                   Fulham       0.781828\n",
              "13           Crystal Palace       0.948862\n",
              "14  Wolverhampton Wanderers       0.936494\n",
              "15        Nottingham Forest       0.681079\n",
              "16                 West Ham       0.864372\n",
              "17              Aston Villa       1.227344\n",
              "18          Manchester City       1.492347\n",
              "19                Liverpool       1.003196"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f4c5ae17-e9e0-4597-8823-9a2aebfaa634\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>team</th>\n",
              "      <th>gw3adjustment</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Chelsea</td>\n",
              "      <td>1.282095</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Bournemouth</td>\n",
              "      <td>0.825462</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Arsenal</td>\n",
              "      <td>1.218172</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Brentford</td>\n",
              "      <td>1.051138</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Everton</td>\n",
              "      <td>1.063506</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Manchester United</td>\n",
              "      <td>1.318921</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Brighton</td>\n",
              "      <td>1.135628</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Burnley</td>\n",
              "      <td>0.772656</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Sheffield United</td>\n",
              "      <td>0.507653</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Newcastle United</td>\n",
              "      <td>0.996804</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Luton Town</td>\n",
              "      <td>0.717905</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Tottenham</td>\n",
              "      <td>1.174538</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Fulham</td>\n",
              "      <td>0.781828</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Crystal Palace</td>\n",
              "      <td>0.948862</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>0.936494</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>Nottingham Forest</td>\n",
              "      <td>0.681079</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>West Ham</td>\n",
              "      <td>0.864372</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>1.227344</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>Manchester City</td>\n",
              "      <td>1.492347</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>Liverpool</td>\n",
              "      <td>1.003196</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f4c5ae17-e9e0-4597-8823-9a2aebfaa634')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f4c5ae17-e9e0-4597-8823-9a2aebfaa634 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f4c5ae17-e9e0-4597-8823-9a2aebfaa634');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2fafd765-7165-4e1c-9af0-461b6ffed734\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2fafd765-7165-4e1c-9af0-461b6ffed734')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2fafd765-7165-4e1c-9af0-461b6ffed734 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "gw3adjustments = gw3adjustments.groupby('team', as_index=False)['gw3adjustment'].aggregate('sum')\n",
        "gw3adjustments"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 677
        },
        "id": "6x3Lj7jPTCVC",
        "outputId": "1362fb80-b067-4ffb-95f6-17842f51cd20"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                       team  gw3adjustment\n",
              "0                   Arsenal       1.218172\n",
              "1               Aston Villa       1.227344\n",
              "2               Bournemouth       0.825462\n",
              "3                 Brentford       1.051138\n",
              "4                  Brighton       1.135628\n",
              "5                   Burnley       0.772656\n",
              "6                   Chelsea       1.282095\n",
              "7            Crystal Palace       0.948862\n",
              "8                   Everton       1.063506\n",
              "9                    Fulham       0.781828\n",
              "10                Liverpool       1.003196\n",
              "11               Luton Town       0.717905\n",
              "12          Manchester City       1.492347\n",
              "13        Manchester United       1.318921\n",
              "14         Newcastle United       0.996804\n",
              "15        Nottingham Forest       0.681079\n",
              "16         Sheffield United       0.507653\n",
              "17                Tottenham       1.174538\n",
              "18                 West Ham       0.864372\n",
              "19  Wolverhampton Wanderers       0.936494"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c3c51acd-9315-4a96-9507-28748c784394\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>team</th>\n",
              "      <th>gw3adjustment</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Arsenal</td>\n",
              "      <td>1.218172</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>1.227344</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Bournemouth</td>\n",
              "      <td>0.825462</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Brentford</td>\n",
              "      <td>1.051138</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Brighton</td>\n",
              "      <td>1.135628</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Burnley</td>\n",
              "      <td>0.772656</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Chelsea</td>\n",
              "      <td>1.282095</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Crystal Palace</td>\n",
              "      <td>0.948862</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Everton</td>\n",
              "      <td>1.063506</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Fulham</td>\n",
              "      <td>0.781828</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Liverpool</td>\n",
              "      <td>1.003196</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Luton Town</td>\n",
              "      <td>0.717905</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Manchester City</td>\n",
              "      <td>1.492347</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Manchester United</td>\n",
              "      <td>1.318921</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Newcastle United</td>\n",
              "      <td>0.996804</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>Nottingham Forest</td>\n",
              "      <td>0.681079</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Sheffield United</td>\n",
              "      <td>0.507653</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>Tottenham</td>\n",
              "      <td>1.174538</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>West Ham</td>\n",
              "      <td>0.864372</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>0.936494</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c3c51acd-9315-4a96-9507-28748c784394')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c3c51acd-9315-4a96-9507-28748c784394 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c3c51acd-9315-4a96-9507-28748c784394');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-6d4829dd-f0ee-44ad-a8a8-437be6e1897b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6d4829dd-f0ee-44ad-a8a8-437be6e1897b')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-6d4829dd-f0ee-44ad-a8a8-437be6e1897b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "gw4 = homesawayspi.query('Event==\"4.0\"')\n",
        "pd.options.mode.chained_assignment = None  # default='warn'\n",
        "PLSPI = spi.query('league==\"Barclays Premier League\"')\n",
        "PLSPI['League Average']  = PLSPI[\"spi\"].mean()\n",
        "laverage = PLSPI[\"spi\"].mean()\n",
        "PLSPI['League Average'].astype(int)\n",
        "gw4['League_Average']  = laverage\n",
        "gw4.rename(columns = {'Home SPI':'HomeSPI', 'Away SPI':'AwaySPI'}, inplace = True)\n",
        "gw4['home_difference'] = gw4.HomeSPI - gw4.League_Average\n",
        "gw4['away_difference'] = gw4.AwaySPI - gw4.League_Average\n",
        "gw4['home_adjustment'] = (gw4.home_difference - gw4.away_difference + gw4.League_Average)/gw4.League_Average\n",
        "gw4['away_adjustment'] = (gw4.away_difference - gw4.home_difference+ gw4.League_Average)/gw4.League_Average\n",
        "gw4adjustments = gw4[['team_h', 'home_adjustment']].append(gw4[['team_a','away_adjustment']].set_axis(['team_h', 'home_adjustment'], axis=1)).reset_index(drop=True)\n",
        "gw4adjustments.rename(columns = {'team_h':'team'}, inplace = True)\n",
        "gw4adjustments.rename(columns = {'home_adjustment':'gw4adjustment'}, inplace = True)\n",
        "gw4adjustments"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 711
        },
        "id": "pzyah3Z-kgct",
        "outputId": "356030a9-ac09-42b3-bdc1-dd619c7a16a2"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-34-fa94501b1623>:13: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  gw4adjustments = gw4[['team_h', 'home_adjustment']].append(gw4[['team_a','away_adjustment']].set_axis(['team_h', 'home_adjustment'], axis=1)).reset_index(drop=True)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                       team  gw4adjustment\n",
              "0                Luton Town       0.782662\n",
              "1          Sheffield United       0.901892\n",
              "2                 Brentford       1.244019\n",
              "3                   Burnley       0.872154\n",
              "4                   Chelsea       1.273063\n",
              "5           Manchester City       1.330454\n",
              "6                  Brighton       0.960812\n",
              "7            Crystal Palace       1.200107\n",
              "8                 Liverpool       1.064340\n",
              "9                   Arsenal       1.067258\n",
              "10                 West Ham       1.217338\n",
              "11                  Everton       1.098108\n",
              "12              Bournemouth       0.755981\n",
              "13                Tottenham       1.127846\n",
              "14        Nottingham Forest       0.726937\n",
              "15                   Fulham       0.669546\n",
              "16         Newcastle United       1.039188\n",
              "17  Wolverhampton Wanderers       0.799893\n",
              "18              Aston Villa       0.935660\n",
              "19        Manchester United       0.932742"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-35164899-868d-45b1-bf15-f210fc3aa632\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>team</th>\n",
              "      <th>gw4adjustment</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Luton Town</td>\n",
              "      <td>0.782662</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Sheffield United</td>\n",
              "      <td>0.901892</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Brentford</td>\n",
              "      <td>1.244019</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Burnley</td>\n",
              "      <td>0.872154</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Chelsea</td>\n",
              "      <td>1.273063</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Manchester City</td>\n",
              "      <td>1.330454</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Brighton</td>\n",
              "      <td>0.960812</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Crystal Palace</td>\n",
              "      <td>1.200107</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Liverpool</td>\n",
              "      <td>1.064340</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Arsenal</td>\n",
              "      <td>1.067258</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>West Ham</td>\n",
              "      <td>1.217338</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Everton</td>\n",
              "      <td>1.098108</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Bournemouth</td>\n",
              "      <td>0.755981</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Tottenham</td>\n",
              "      <td>1.127846</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Nottingham Forest</td>\n",
              "      <td>0.726937</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>Fulham</td>\n",
              "      <td>0.669546</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Newcastle United</td>\n",
              "      <td>1.039188</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>0.799893</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>0.935660</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>Manchester United</td>\n",
              "      <td>0.932742</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-35164899-868d-45b1-bf15-f210fc3aa632')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-35164899-868d-45b1-bf15-f210fc3aa632 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-35164899-868d-45b1-bf15-f210fc3aa632');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-cc91868e-bc9d-4729-957b-f23acd77b49c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cc91868e-bc9d-4729-957b-f23acd77b49c')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-cc91868e-bc9d-4729-957b-f23acd77b49c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "gw5 = homesawayspi.query('Event==\"5.0\"')\n",
        "pd.options.mode.chained_assignment = None  # default='warn'\n",
        "PLSPI = spi.query('league==\"Barclays Premier League\"')\n",
        "PLSPI['League Average']  = PLSPI[\"spi\"].mean()\n",
        "laverage = PLSPI[\"spi\"].mean()\n",
        "PLSPI['League Average'].astype(int)\n",
        "gw5['League_Average']  = laverage\n",
        "gw5.rename(columns = {'Home SPI':'HomeSPI', 'Away SPI':'AwaySPI'}, inplace = True)\n",
        "gw5['home_difference'] = gw5.HomeSPI - gw5.League_Average\n",
        "gw5['away_difference'] = gw5.AwaySPI - gw5.League_Average\n",
        "gw5['home_adjustment'] = (gw5.home_difference - gw5.away_difference + gw5.League_Average)/gw5.League_Average\n",
        "gw5['away_adjustment'] = (gw5.away_difference - gw5.home_difference+ gw5.League_Average)/gw5.League_Average\n",
        "gw5adjustments = gw5[['team_h', 'home_adjustment']].append(gw5[['team_a','away_adjustment']].set_axis(['team_h', 'home_adjustment'], axis=1)).reset_index(drop=True)\n",
        "gw5adjustments.rename(columns = {'team_h':'team'}, inplace = True)\n",
        "gw5adjustments.rename(columns = {'home_adjustment':'gw5adjustment'}, inplace = True)\n",
        "gw5adjustments"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 711
        },
        "id": "7uE1H7R4Gems",
        "outputId": "be10cc5f-2b39-4ba4-efd5-baf9b88fd6aa"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-35-a468e0b0b9ba>:13: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  gw5adjustments = gw5[['team_h', 'home_adjustment']].append(gw5[['team_a','away_adjustment']].set_axis(['team_h', 'home_adjustment'], axis=1)).reset_index(drop=True)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                       team  gw5adjustment\n",
              "0   Wolverhampton Wanderers       0.654399\n",
              "1               Aston Villa       1.081155\n",
              "2                    Fulham       1.177039\n",
              "3         Manchester United       0.974987\n",
              "4                 Tottenham       1.216366\n",
              "5                  West Ham       0.709845\n",
              "6                   Everton       0.718044\n",
              "7               Bournemouth       0.774880\n",
              "8          Newcastle United       1.091160\n",
              "9         Nottingham Forest       0.905366\n",
              "10                Liverpool       1.345601\n",
              "11           Crystal Palace       0.918845\n",
              "12               Luton Town       0.822961\n",
              "13                 Brighton       1.025013\n",
              "14         Sheffield United       0.783634\n",
              "15          Manchester City       1.290155\n",
              "16                  Arsenal       1.281956\n",
              "17                  Chelsea       1.225120\n",
              "18                Brentford       0.908840\n",
              "19                  Burnley       1.094634"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f9206e83-e888-435c-bd1b-f1fb8e009c09\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>team</th>\n",
              "      <th>gw5adjustment</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>0.654399</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>1.081155</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Fulham</td>\n",
              "      <td>1.177039</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Manchester United</td>\n",
              "      <td>0.974987</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Tottenham</td>\n",
              "      <td>1.216366</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>West Ham</td>\n",
              "      <td>0.709845</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Everton</td>\n",
              "      <td>0.718044</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Bournemouth</td>\n",
              "      <td>0.774880</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Newcastle United</td>\n",
              "      <td>1.091160</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Nottingham Forest</td>\n",
              "      <td>0.905366</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Liverpool</td>\n",
              "      <td>1.345601</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Crystal Palace</td>\n",
              "      <td>0.918845</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Luton Town</td>\n",
              "      <td>0.822961</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Brighton</td>\n",
              "      <td>1.025013</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Sheffield United</td>\n",
              "      <td>0.783634</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>Manchester City</td>\n",
              "      <td>1.290155</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Arsenal</td>\n",
              "      <td>1.281956</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>Chelsea</td>\n",
              "      <td>1.225120</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>Brentford</td>\n",
              "      <td>0.908840</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>Burnley</td>\n",
              "      <td>1.094634</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f9206e83-e888-435c-bd1b-f1fb8e009c09')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f9206e83-e888-435c-bd1b-f1fb8e009c09 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f9206e83-e888-435c-bd1b-f1fb8e009c09');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-daf4bec7-0d18-46a4-a464-39bd63448637\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-daf4bec7-0d18-46a4-a464-39bd63448637')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-daf4bec7-0d18-46a4-a464-39bd63448637 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#gw5blanks = [['Chelsea', 0], ['Manchester United', 0], ['Manchester City', 0], ['Brighton', 0]]\n",
        "\n",
        "# Create the pandas DataFrame\n",
        "#blanks32 = pd.DataFrame(gw5blanks, columns=['team', 'gw5adjustment'])\n",
        "#blanks32"
      ],
      "metadata": {
        "id": "p00QYlZ7UbAu"
      },
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#gw5adjustments = pd.concat([gw5adjustments, blanks32])\n",
        "#gw5adjustments = gw5adjustments.reset_index(drop=True)\n",
        "#gw5adjustments"
      ],
      "metadata": {
        "id": "xh_AhxKJU0VW"
      },
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "gw6= homesawayspi.query('Event==\"6.0\"')\n",
        "pd.options.mode.chained_assignment = None  # default='warn'\n",
        "PLSPI = spi.query('league==\"Barclays Premier League\"')\n",
        "PLSPI['League Average']  = PLSPI[\"spi\"].mean()\n",
        "laverage = PLSPI[\"spi\"].mean()\n",
        "PLSPI['League Average'].astype(int)\n",
        "gw6['League_Average']  = laverage\n",
        "gw6.rename(columns = {'Home SPI':'HomeSPI', 'Away SPI':'AwaySPI'}, inplace = True)\n",
        "gw6['home_difference'] = gw6.HomeSPI - gw6.League_Average\n",
        "gw6['away_difference'] = gw6.AwaySPI - gw6.League_Average\n",
        "gw6['home_adjustment'] = (gw6.home_difference - gw6.away_difference + gw6.League_Average)/gw6.League_Average\n",
        "gw6['away_adjustment'] = (gw6.away_difference - gw6.home_difference+ gw6.League_Average)/gw6.League_Average\n",
        "gw6adjustments = gw6[['team_h', 'home_adjustment']].append(gw6[['team_a','away_adjustment']].set_axis(['team_h', 'home_adjustment'], axis=1)).reset_index(drop=True)\n",
        "gw6adjustments.rename(columns = {'team_h':'team'}, inplace = True)\n",
        "gw6adjustments.rename(columns = {'home_adjustment':'gw6adjustment'}, inplace = True)\n",
        "gw6adjustments"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 711
        },
        "id": "OPB6Pz8sGZNe",
        "outputId": "b48f7d9a-cdda-4691-90c9-44e4c3466a77"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-38-34edfb59e920>:13: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  gw6adjustments = gw6[['team_h', 'home_adjustment']].append(gw6[['team_a','away_adjustment']].set_axis(['team_h', 'home_adjustment'], axis=1)).reset_index(drop=True)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                       team  gw6adjustment\n",
              "0                   Chelsea       0.951085\n",
              "1            Crystal Palace       1.072817\n",
              "2                Luton Town       0.950251\n",
              "3           Manchester City       1.498461\n",
              "4                 Brentford       1.187739\n",
              "5                   Burnley       0.775713\n",
              "6                   Arsenal       1.163699\n",
              "7                  Brighton       1.295992\n",
              "8                 Liverpool       1.178012\n",
              "9          Sheffield United       0.622993\n",
              "10              Aston Villa       1.048915\n",
              "11                   Fulham       0.927183\n",
              "12  Wolverhampton Wanderers       1.049749\n",
              "13        Nottingham Forest       0.501539\n",
              "14                  Everton       0.812261\n",
              "15        Manchester United       1.224287\n",
              "16                Tottenham       0.836301\n",
              "17              Bournemouth       0.704008\n",
              "18                 West Ham       0.821988\n",
              "19         Newcastle United       1.377007"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-88f19f6f-cadf-4f80-94c5-cecd1033b91b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>team</th>\n",
              "      <th>gw6adjustment</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Chelsea</td>\n",
              "      <td>0.951085</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Crystal Palace</td>\n",
              "      <td>1.072817</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Luton Town</td>\n",
              "      <td>0.950251</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Manchester City</td>\n",
              "      <td>1.498461</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Brentford</td>\n",
              "      <td>1.187739</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Burnley</td>\n",
              "      <td>0.775713</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Arsenal</td>\n",
              "      <td>1.163699</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Brighton</td>\n",
              "      <td>1.295992</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Liverpool</td>\n",
              "      <td>1.178012</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Sheffield United</td>\n",
              "      <td>0.622993</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>1.048915</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Fulham</td>\n",
              "      <td>0.927183</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>1.049749</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Nottingham Forest</td>\n",
              "      <td>0.501539</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Everton</td>\n",
              "      <td>0.812261</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>Manchester United</td>\n",
              "      <td>1.224287</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Tottenham</td>\n",
              "      <td>0.836301</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>Bournemouth</td>\n",
              "      <td>0.704008</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>West Ham</td>\n",
              "      <td>0.821988</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>Newcastle United</td>\n",
              "      <td>1.377007</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-88f19f6f-cadf-4f80-94c5-cecd1033b91b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-88f19f6f-cadf-4f80-94c5-cecd1033b91b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-88f19f6f-cadf-4f80-94c5-cecd1033b91b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-4dbaf2c7-6768-432c-8829-7e26dd873950\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4dbaf2c7-6768-432c-8829-7e26dd873950')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-4dbaf2c7-6768-432c-8829-7e26dd873950 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "gwadjustments26 = pd.merge(gw2adjustments,gw3adjustments, on ='team')\n",
        "gwadjustments26 = pd.merge(gwadjustments26,gw4adjustments, on ='team')\n",
        "gwadjustments26 = pd.merge(gwadjustments26,gw5adjustments, on ='team')\n",
        "gwadjustments26 = pd.merge(gwadjustments26,gw6adjustments, on ='team')\n",
        "gwadjustments26"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 677
        },
        "id": "P6_WVsnNkztJ",
        "outputId": "b0c13437-3c4f-4210-8cee-fc706f1389fe"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                       team  gw2adjustment  gw3adjustment  gw4adjustment  \\\n",
              "0                   Arsenal       1.145356       1.218172       1.067258   \n",
              "1               Aston Villa       1.217755       1.227344       0.935660   \n",
              "2               Bournemouth       0.661625       0.825462       0.755981   \n",
              "3                 Brentford       1.123955       1.051138       1.244019   \n",
              "4                  Brighton       1.303218       1.135628       0.960812   \n",
              "5                   Chelsea       1.064757       1.282095       1.273063   \n",
              "6            Crystal Palace       0.854644       0.948862       1.200107   \n",
              "7                   Everton       0.782245       1.063506       1.098108   \n",
              "8                    Fulham       0.876045       0.781828       0.669546   \n",
              "9                 Liverpool       1.338375       1.003196       1.064340   \n",
              "10          Manchester City       1.115339       1.492347       1.330454   \n",
              "11        Manchester United       1.096440       1.318921       0.932742   \n",
              "12         Newcastle United       0.884661       0.996804       1.039188   \n",
              "13        Nottingham Forest       0.993886       0.681079       0.726937   \n",
              "14         Sheffield United       1.006114       0.507653       0.901892   \n",
              "15                Tottenham       0.903560       1.174538       1.127846   \n",
              "16                 West Ham       0.935243       0.864372       1.217338   \n",
              "17  Wolverhampton Wanderers       0.696782       0.936494       0.799893   \n",
              "18                  Burnley       0.000000       0.772656       0.872154   \n",
              "19               Luton Town       0.000000       0.717905       0.782662   \n",
              "\n",
              "    gw5adjustment  gw6adjustment  \n",
              "0        1.281956       1.163699  \n",
              "1        1.081155       1.048915  \n",
              "2        0.774880       0.704008  \n",
              "3        0.908840       1.187739  \n",
              "4        1.025013       1.295992  \n",
              "5        1.225120       0.951085  \n",
              "6        0.918845       1.072817  \n",
              "7        0.718044       0.812261  \n",
              "8        1.177039       0.927183  \n",
              "9        1.345601       1.178012  \n",
              "10       1.290155       1.498461  \n",
              "11       0.974987       1.224287  \n",
              "12       1.091160       1.377007  \n",
              "13       0.905366       0.501539  \n",
              "14       0.783634       0.622993  \n",
              "15       1.216366       0.836301  \n",
              "16       0.709845       0.821988  \n",
              "17       0.654399       1.049749  \n",
              "18       1.094634       0.775713  \n",
              "19       0.822961       0.950251  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1ad60dc7-bd76-4604-9d13-c4dc992e9df5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>team</th>\n",
              "      <th>gw2adjustment</th>\n",
              "      <th>gw3adjustment</th>\n",
              "      <th>gw4adjustment</th>\n",
              "      <th>gw5adjustment</th>\n",
              "      <th>gw6adjustment</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Arsenal</td>\n",
              "      <td>1.145356</td>\n",
              "      <td>1.218172</td>\n",
              "      <td>1.067258</td>\n",
              "      <td>1.281956</td>\n",
              "      <td>1.163699</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>1.217755</td>\n",
              "      <td>1.227344</td>\n",
              "      <td>0.935660</td>\n",
              "      <td>1.081155</td>\n",
              "      <td>1.048915</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Bournemouth</td>\n",
              "      <td>0.661625</td>\n",
              "      <td>0.825462</td>\n",
              "      <td>0.755981</td>\n",
              "      <td>0.774880</td>\n",
              "      <td>0.704008</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Brentford</td>\n",
              "      <td>1.123955</td>\n",
              "      <td>1.051138</td>\n",
              "      <td>1.244019</td>\n",
              "      <td>0.908840</td>\n",
              "      <td>1.187739</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Brighton</td>\n",
              "      <td>1.303218</td>\n",
              "      <td>1.135628</td>\n",
              "      <td>0.960812</td>\n",
              "      <td>1.025013</td>\n",
              "      <td>1.295992</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Chelsea</td>\n",
              "      <td>1.064757</td>\n",
              "      <td>1.282095</td>\n",
              "      <td>1.273063</td>\n",
              "      <td>1.225120</td>\n",
              "      <td>0.951085</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Crystal Palace</td>\n",
              "      <td>0.854644</td>\n",
              "      <td>0.948862</td>\n",
              "      <td>1.200107</td>\n",
              "      <td>0.918845</td>\n",
              "      <td>1.072817</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Everton</td>\n",
              "      <td>0.782245</td>\n",
              "      <td>1.063506</td>\n",
              "      <td>1.098108</td>\n",
              "      <td>0.718044</td>\n",
              "      <td>0.812261</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Fulham</td>\n",
              "      <td>0.876045</td>\n",
              "      <td>0.781828</td>\n",
              "      <td>0.669546</td>\n",
              "      <td>1.177039</td>\n",
              "      <td>0.927183</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Liverpool</td>\n",
              "      <td>1.338375</td>\n",
              "      <td>1.003196</td>\n",
              "      <td>1.064340</td>\n",
              "      <td>1.345601</td>\n",
              "      <td>1.178012</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Manchester City</td>\n",
              "      <td>1.115339</td>\n",
              "      <td>1.492347</td>\n",
              "      <td>1.330454</td>\n",
              "      <td>1.290155</td>\n",
              "      <td>1.498461</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Manchester United</td>\n",
              "      <td>1.096440</td>\n",
              "      <td>1.318921</td>\n",
              "      <td>0.932742</td>\n",
              "      <td>0.974987</td>\n",
              "      <td>1.224287</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Newcastle United</td>\n",
              "      <td>0.884661</td>\n",
              "      <td>0.996804</td>\n",
              "      <td>1.039188</td>\n",
              "      <td>1.091160</td>\n",
              "      <td>1.377007</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Nottingham Forest</td>\n",
              "      <td>0.993886</td>\n",
              "      <td>0.681079</td>\n",
              "      <td>0.726937</td>\n",
              "      <td>0.905366</td>\n",
              "      <td>0.501539</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Sheffield United</td>\n",
              "      <td>1.006114</td>\n",
              "      <td>0.507653</td>\n",
              "      <td>0.901892</td>\n",
              "      <td>0.783634</td>\n",
              "      <td>0.622993</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>Tottenham</td>\n",
              "      <td>0.903560</td>\n",
              "      <td>1.174538</td>\n",
              "      <td>1.127846</td>\n",
              "      <td>1.216366</td>\n",
              "      <td>0.836301</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>West Ham</td>\n",
              "      <td>0.935243</td>\n",
              "      <td>0.864372</td>\n",
              "      <td>1.217338</td>\n",
              "      <td>0.709845</td>\n",
              "      <td>0.821988</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>0.696782</td>\n",
              "      <td>0.936494</td>\n",
              "      <td>0.799893</td>\n",
              "      <td>0.654399</td>\n",
              "      <td>1.049749</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>Burnley</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.772656</td>\n",
              "      <td>0.872154</td>\n",
              "      <td>1.094634</td>\n",
              "      <td>0.775713</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>Luton Town</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.717905</td>\n",
              "      <td>0.782662</td>\n",
              "      <td>0.822961</td>\n",
              "      <td>0.950251</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1ad60dc7-bd76-4604-9d13-c4dc992e9df5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1ad60dc7-bd76-4604-9d13-c4dc992e9df5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1ad60dc7-bd76-4604-9d13-c4dc992e9df5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-26252d56-3dea-44fb-b05c-4fd4866cdb5a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-26252d56-3dea-44fb-b05c-4fd4866cdb5a')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-26252d56-3dea-44fb-b05c-4fd4866cdb5a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rawdfgw228x = pd.merge(rawallplayersallgw,\n",
        "                     gwadjustments26,\n",
        "                     on ='team',\n",
        "                     how ='left')\n",
        "rawdfgw228x.rename(columns = {'gw3adjustment_y':'gw3adjustment'}, inplace = True)\n",
        "rawdfgw228x = rawdfgw228x.drop(columns=[\n",
        " 'home_adjustment',\n",
        "  ])\n",
        "\n",
        "rawdfgw228x = rawdfgw228x.round(1)\n",
        "rawdfgw228x"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 493
        },
        "id": "-b-0jux2PKIX",
        "outputId": "58fe88bf-b761-435e-e760-91a01d728a44"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      id                     team pos     name  cost  selected_by_percent  \\\n",
              "0      1                  Arsenal   F  Balogun   4.5                  0.6   \n",
              "1      8                  Arsenal   F  G.Jesus   7.9                  1.2   \n",
              "2     13                  Arsenal   F  Nketiah   5.6                  6.8   \n",
              "3     33              Aston Villa   F   Archer   4.5                  5.2   \n",
              "4     39              Aston Villa   F    Davis   5.0                  0.3   \n",
              "..   ...                      ...  ..      ...   ...                  ...   \n",
              "673  647                 West Ham   G    Anang   4.0                  0.0   \n",
              "674  546  Wolverhampton Wanderers   G  Bentley   4.0                  0.4   \n",
              "675  564  Wolverhampton Wanderers   G     King   4.0                  0.8   \n",
              "676  569  Wolverhampton Wanderers   G  Jos√© S√°   5.0                  1.1   \n",
              "677  571  Wolverhampton Wanderers   G   ≈†arkiƒá   4.0                  0.5   \n",
              "\n",
              "     goals_scored  assists  bps  ict_index  points  points_per_game  minutes  \\\n",
              "0               0        0    0        0.0       0              0.0        0   \n",
              "1               0        0    0        0.0       0              0.0        0   \n",
              "2               1        1   32       12.1      13              6.5      150   \n",
              "3               0        0   -1        0.3       0              0.0        5   \n",
              "4               0        0    0        0.0       0              0.0        0   \n",
              "..            ...      ...  ...        ...     ...              ...      ...   \n",
              "673             0        0    0        0.0       0              0.0        0   \n",
              "674             0        0    0        0.0       0              0.0        0   \n",
              "675             0        0    0        0.0       0              0.0        0   \n",
              "676             0        0   31        4.6       3              1.5      180   \n",
              "677             0        0    0        0.0       0              0.0        0   \n",
              "\n",
              "     xPallgw  gw2adjustment  gw3adjustment  gw4adjustment  gw5adjustment  \\\n",
              "0        2.0            1.1            1.2            1.1            1.3   \n",
              "1        2.0            1.1            1.2            1.1            1.3   \n",
              "2        6.2            1.1            1.2            1.1            1.3   \n",
              "3        2.0            1.2            1.2            0.9            1.1   \n",
              "4        2.0            1.2            1.2            0.9            1.1   \n",
              "..       ...            ...            ...            ...            ...   \n",
              "673      2.0            0.9            0.9            1.2            0.7   \n",
              "674      2.0            0.7            0.9            0.8            0.7   \n",
              "675      2.0            0.7            0.9            0.8            0.7   \n",
              "676      2.0            0.7            0.9            0.8            0.7   \n",
              "677      2.0            0.7            0.9            0.8            0.7   \n",
              "\n",
              "     gw6adjustment  \n",
              "0              1.2  \n",
              "1              1.2  \n",
              "2              1.2  \n",
              "3              1.0  \n",
              "4              1.0  \n",
              "..             ...  \n",
              "673            0.8  \n",
              "674            1.0  \n",
              "675            1.0  \n",
              "676            1.0  \n",
              "677            1.0  \n",
              "\n",
              "[678 rows x 19 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e8217ad7-f511-4188-b2a0-ed1a2a48c8d5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>team</th>\n",
              "      <th>pos</th>\n",
              "      <th>name</th>\n",
              "      <th>cost</th>\n",
              "      <th>selected_by_percent</th>\n",
              "      <th>goals_scored</th>\n",
              "      <th>assists</th>\n",
              "      <th>bps</th>\n",
              "      <th>ict_index</th>\n",
              "      <th>points</th>\n",
              "      <th>points_per_game</th>\n",
              "      <th>minutes</th>\n",
              "      <th>xPallgw</th>\n",
              "      <th>gw2adjustment</th>\n",
              "      <th>gw3adjustment</th>\n",
              "      <th>gw4adjustment</th>\n",
              "      <th>gw5adjustment</th>\n",
              "      <th>gw6adjustment</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>F</td>\n",
              "      <td>Balogun</td>\n",
              "      <td>4.5</td>\n",
              "      <td>0.6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.1</td>\n",
              "      <td>1.2</td>\n",
              "      <td>1.1</td>\n",
              "      <td>1.3</td>\n",
              "      <td>1.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>8</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>F</td>\n",
              "      <td>G.Jesus</td>\n",
              "      <td>7.9</td>\n",
              "      <td>1.2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.1</td>\n",
              "      <td>1.2</td>\n",
              "      <td>1.1</td>\n",
              "      <td>1.3</td>\n",
              "      <td>1.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>13</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>F</td>\n",
              "      <td>Nketiah</td>\n",
              "      <td>5.6</td>\n",
              "      <td>6.8</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>32</td>\n",
              "      <td>12.1</td>\n",
              "      <td>13</td>\n",
              "      <td>6.5</td>\n",
              "      <td>150</td>\n",
              "      <td>6.2</td>\n",
              "      <td>1.1</td>\n",
              "      <td>1.2</td>\n",
              "      <td>1.1</td>\n",
              "      <td>1.3</td>\n",
              "      <td>1.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>33</td>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>F</td>\n",
              "      <td>Archer</td>\n",
              "      <td>4.5</td>\n",
              "      <td>5.2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>-1</td>\n",
              "      <td>0.3</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>5</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.2</td>\n",
              "      <td>1.2</td>\n",
              "      <td>0.9</td>\n",
              "      <td>1.1</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>39</td>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>F</td>\n",
              "      <td>Davis</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.2</td>\n",
              "      <td>1.2</td>\n",
              "      <td>0.9</td>\n",
              "      <td>1.1</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>673</th>\n",
              "      <td>647</td>\n",
              "      <td>West Ham</td>\n",
              "      <td>G</td>\n",
              "      <td>Anang</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.9</td>\n",
              "      <td>0.9</td>\n",
              "      <td>1.2</td>\n",
              "      <td>0.7</td>\n",
              "      <td>0.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>674</th>\n",
              "      <td>546</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>G</td>\n",
              "      <td>Bentley</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.7</td>\n",
              "      <td>0.9</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.7</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>675</th>\n",
              "      <td>564</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>G</td>\n",
              "      <td>King</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.7</td>\n",
              "      <td>0.9</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.7</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>676</th>\n",
              "      <td>569</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>G</td>\n",
              "      <td>Jos√© S√°</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1.1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>31</td>\n",
              "      <td>4.6</td>\n",
              "      <td>3</td>\n",
              "      <td>1.5</td>\n",
              "      <td>180</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.7</td>\n",
              "      <td>0.9</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.7</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>677</th>\n",
              "      <td>571</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>G</td>\n",
              "      <td>≈†arkiƒá</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.7</td>\n",
              "      <td>0.9</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.7</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>678 rows √ó 19 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e8217ad7-f511-4188-b2a0-ed1a2a48c8d5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e8217ad7-f511-4188-b2a0-ed1a2a48c8d5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e8217ad7-f511-4188-b2a0-ed1a2a48c8d5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a97c29c4-ac5d-4f75-a9aa-2c57773bad62\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a97c29c4-ac5d-4f75-a9aa-2c57773bad62')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a97c29c4-ac5d-4f75-a9aa-2c57773bad62 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rawdfgw228x['gw3'] = (((rawdfgw228x.xPallgw - 2)*rawdfgw228x.gw3adjustment)+2)\n",
        "rawdfgw228x['gw4'] = (((rawdfgw228x.xPallgw - 2)*rawdfgw228x.gw4adjustment)+2)\n",
        "rawdfgw228x['gw2'] = (((rawdfgw228x.xPallgw - 2)*rawdfgw228x.gw2adjustment)+2)\n",
        "rawdfgw228x['gw5'] = (((rawdfgw228x.xPallgw - 2)*rawdfgw228x.gw5adjustment)+2)\n",
        "rawdfgw228x['gw6'] = (((rawdfgw228x.xPallgw - 2)*rawdfgw228x.gw6adjustment)+2)\n",
        "rawdfgw228x['5GW Total'] = rawdfgw228x.gw2 + rawdfgw228x.gw5 + rawdfgw228x.gw6 + rawdfgw228x.gw4 + rawdfgw228x.gw3\n",
        "rawdfgw228x = rawdfgw228x.drop(columns=[\n",
        "  'gw5adjustment',\n",
        "  'gw6adjustment',\n",
        "  'gw2adjustment',\n",
        "  'gw3adjustment',\n",
        "  'gw4adjustment'])\n",
        "rawdfgw228x"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "Dgw1xB0YUN9D",
        "outputId": "cc9a15d2-c570-437a-f3af-2fe912c50368"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      id                     team pos     name  cost  selected_by_percent  \\\n",
              "0      1                  Arsenal   F  Balogun   4.5                  0.6   \n",
              "1      8                  Arsenal   F  G.Jesus   7.9                  1.2   \n",
              "2     13                  Arsenal   F  Nketiah   5.6                  6.8   \n",
              "3     33              Aston Villa   F   Archer   4.5                  5.2   \n",
              "4     39              Aston Villa   F    Davis   5.0                  0.3   \n",
              "..   ...                      ...  ..      ...   ...                  ...   \n",
              "673  647                 West Ham   G    Anang   4.0                  0.0   \n",
              "674  546  Wolverhampton Wanderers   G  Bentley   4.0                  0.4   \n",
              "675  564  Wolverhampton Wanderers   G     King   4.0                  0.8   \n",
              "676  569  Wolverhampton Wanderers   G  Jos√© S√°   5.0                  1.1   \n",
              "677  571  Wolverhampton Wanderers   G   ≈†arkiƒá   4.0                  0.5   \n",
              "\n",
              "     goals_scored  assists  bps  ict_index  points  points_per_game  minutes  \\\n",
              "0               0        0    0        0.0       0              0.0        0   \n",
              "1               0        0    0        0.0       0              0.0        0   \n",
              "2               1        1   32       12.1      13              6.5      150   \n",
              "3               0        0   -1        0.3       0              0.0        5   \n",
              "4               0        0    0        0.0       0              0.0        0   \n",
              "..            ...      ...  ...        ...     ...              ...      ...   \n",
              "673             0        0    0        0.0       0              0.0        0   \n",
              "674             0        0    0        0.0       0              0.0        0   \n",
              "675             0        0    0        0.0       0              0.0        0   \n",
              "676             0        0   31        4.6       3              1.5      180   \n",
              "677             0        0    0        0.0       0              0.0        0   \n",
              "\n",
              "     xPallgw   gw3   gw4   gw2   gw5   gw6  5GW Total  \n",
              "0        2.0  2.00  2.00  2.00  2.00  2.00      10.00  \n",
              "1        2.0  2.00  2.00  2.00  2.00  2.00      10.00  \n",
              "2        6.2  7.04  6.62  6.62  7.46  7.04      34.78  \n",
              "3        2.0  2.00  2.00  2.00  2.00  2.00      10.00  \n",
              "4        2.0  2.00  2.00  2.00  2.00  2.00      10.00  \n",
              "..       ...   ...   ...   ...   ...   ...        ...  \n",
              "673      2.0  2.00  2.00  2.00  2.00  2.00      10.00  \n",
              "674      2.0  2.00  2.00  2.00  2.00  2.00      10.00  \n",
              "675      2.0  2.00  2.00  2.00  2.00  2.00      10.00  \n",
              "676      2.0  2.00  2.00  2.00  2.00  2.00      10.00  \n",
              "677      2.0  2.00  2.00  2.00  2.00  2.00      10.00  \n",
              "\n",
              "[678 rows x 20 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-310c6441-b169-4d5a-818e-62c42d4678e5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>team</th>\n",
              "      <th>pos</th>\n",
              "      <th>name</th>\n",
              "      <th>cost</th>\n",
              "      <th>selected_by_percent</th>\n",
              "      <th>goals_scored</th>\n",
              "      <th>assists</th>\n",
              "      <th>bps</th>\n",
              "      <th>ict_index</th>\n",
              "      <th>points</th>\n",
              "      <th>points_per_game</th>\n",
              "      <th>minutes</th>\n",
              "      <th>xPallgw</th>\n",
              "      <th>gw3</th>\n",
              "      <th>gw4</th>\n",
              "      <th>gw2</th>\n",
              "      <th>gw5</th>\n",
              "      <th>gw6</th>\n",
              "      <th>5GW Total</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>F</td>\n",
              "      <td>Balogun</td>\n",
              "      <td>4.5</td>\n",
              "      <td>0.6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>10.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>8</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>F</td>\n",
              "      <td>G.Jesus</td>\n",
              "      <td>7.9</td>\n",
              "      <td>1.2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>10.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>13</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>F</td>\n",
              "      <td>Nketiah</td>\n",
              "      <td>5.6</td>\n",
              "      <td>6.8</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>32</td>\n",
              "      <td>12.1</td>\n",
              "      <td>13</td>\n",
              "      <td>6.5</td>\n",
              "      <td>150</td>\n",
              "      <td>6.2</td>\n",
              "      <td>7.04</td>\n",
              "      <td>6.62</td>\n",
              "      <td>6.62</td>\n",
              "      <td>7.46</td>\n",
              "      <td>7.04</td>\n",
              "      <td>34.78</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>33</td>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>F</td>\n",
              "      <td>Archer</td>\n",
              "      <td>4.5</td>\n",
              "      <td>5.2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>-1</td>\n",
              "      <td>0.3</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>5</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>10.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>39</td>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>F</td>\n",
              "      <td>Davis</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>10.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>673</th>\n",
              "      <td>647</td>\n",
              "      <td>West Ham</td>\n",
              "      <td>G</td>\n",
              "      <td>Anang</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>10.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>674</th>\n",
              "      <td>546</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>G</td>\n",
              "      <td>Bentley</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>10.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>675</th>\n",
              "      <td>564</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>G</td>\n",
              "      <td>King</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>10.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>676</th>\n",
              "      <td>569</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>G</td>\n",
              "      <td>Jos√© S√°</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1.1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>31</td>\n",
              "      <td>4.6</td>\n",
              "      <td>3</td>\n",
              "      <td>1.5</td>\n",
              "      <td>180</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>10.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>677</th>\n",
              "      <td>571</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>G</td>\n",
              "      <td>≈†arkiƒá</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>10.00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>678 rows √ó 20 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-310c6441-b169-4d5a-818e-62c42d4678e5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-310c6441-b169-4d5a-818e-62c42d4678e5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-310c6441-b169-4d5a-818e-62c42d4678e5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-402372c5-a811-4fa3-88b3-3f225194891f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-402372c5-a811-4fa3-88b3-3f225194891f')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-402372c5-a811-4fa3-88b3-3f225194891f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rawdfgw228x.drop_duplicates(subset='name', keep='last', inplace=True)\n",
        "rawdfgw228x"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "Jud88GRHgLWf",
        "outputId": "a73275fc-8ea8-4b86-eece-87744595b65d"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      id                     team pos     name  cost  selected_by_percent  \\\n",
              "0      1                  Arsenal   F  Balogun   4.5                  0.6   \n",
              "1      8                  Arsenal   F  G.Jesus   7.9                  1.2   \n",
              "2     13                  Arsenal   F  Nketiah   5.6                  6.8   \n",
              "3     33              Aston Villa   F   Archer   4.5                  5.2   \n",
              "4     39              Aston Villa   F    Davis   5.0                  0.3   \n",
              "..   ...                      ...  ..      ...   ...                  ...   \n",
              "673  647                 West Ham   G    Anang   4.0                  0.0   \n",
              "674  546  Wolverhampton Wanderers   G  Bentley   4.0                  0.4   \n",
              "675  564  Wolverhampton Wanderers   G     King   4.0                  0.8   \n",
              "676  569  Wolverhampton Wanderers   G  Jos√© S√°   5.0                  1.1   \n",
              "677  571  Wolverhampton Wanderers   G   ≈†arkiƒá   4.0                  0.5   \n",
              "\n",
              "     goals_scored  assists  bps  ict_index  points  points_per_game  minutes  \\\n",
              "0               0        0    0        0.0       0              0.0        0   \n",
              "1               0        0    0        0.0       0              0.0        0   \n",
              "2               1        1   32       12.1      13              6.5      150   \n",
              "3               0        0   -1        0.3       0              0.0        5   \n",
              "4               0        0    0        0.0       0              0.0        0   \n",
              "..            ...      ...  ...        ...     ...              ...      ...   \n",
              "673             0        0    0        0.0       0              0.0        0   \n",
              "674             0        0    0        0.0       0              0.0        0   \n",
              "675             0        0    0        0.0       0              0.0        0   \n",
              "676             0        0   31        4.6       3              1.5      180   \n",
              "677             0        0    0        0.0       0              0.0        0   \n",
              "\n",
              "     xPallgw   gw3   gw4   gw2   gw5   gw6  5GW Total  \n",
              "0        2.0  2.00  2.00  2.00  2.00  2.00      10.00  \n",
              "1        2.0  2.00  2.00  2.00  2.00  2.00      10.00  \n",
              "2        6.2  7.04  6.62  6.62  7.46  7.04      34.78  \n",
              "3        2.0  2.00  2.00  2.00  2.00  2.00      10.00  \n",
              "4        2.0  2.00  2.00  2.00  2.00  2.00      10.00  \n",
              "..       ...   ...   ...   ...   ...   ...        ...  \n",
              "673      2.0  2.00  2.00  2.00  2.00  2.00      10.00  \n",
              "674      2.0  2.00  2.00  2.00  2.00  2.00      10.00  \n",
              "675      2.0  2.00  2.00  2.00  2.00  2.00      10.00  \n",
              "676      2.0  2.00  2.00  2.00  2.00  2.00      10.00  \n",
              "677      2.0  2.00  2.00  2.00  2.00  2.00      10.00  \n",
              "\n",
              "[661 rows x 20 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3c27a6e0-a0df-4d0c-b567-52ac3ea5e540\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>team</th>\n",
              "      <th>pos</th>\n",
              "      <th>name</th>\n",
              "      <th>cost</th>\n",
              "      <th>selected_by_percent</th>\n",
              "      <th>goals_scored</th>\n",
              "      <th>assists</th>\n",
              "      <th>bps</th>\n",
              "      <th>ict_index</th>\n",
              "      <th>points</th>\n",
              "      <th>points_per_game</th>\n",
              "      <th>minutes</th>\n",
              "      <th>xPallgw</th>\n",
              "      <th>gw3</th>\n",
              "      <th>gw4</th>\n",
              "      <th>gw2</th>\n",
              "      <th>gw5</th>\n",
              "      <th>gw6</th>\n",
              "      <th>5GW Total</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>F</td>\n",
              "      <td>Balogun</td>\n",
              "      <td>4.5</td>\n",
              "      <td>0.6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>10.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>8</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>F</td>\n",
              "      <td>G.Jesus</td>\n",
              "      <td>7.9</td>\n",
              "      <td>1.2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>10.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>13</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>F</td>\n",
              "      <td>Nketiah</td>\n",
              "      <td>5.6</td>\n",
              "      <td>6.8</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>32</td>\n",
              "      <td>12.1</td>\n",
              "      <td>13</td>\n",
              "      <td>6.5</td>\n",
              "      <td>150</td>\n",
              "      <td>6.2</td>\n",
              "      <td>7.04</td>\n",
              "      <td>6.62</td>\n",
              "      <td>6.62</td>\n",
              "      <td>7.46</td>\n",
              "      <td>7.04</td>\n",
              "      <td>34.78</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>33</td>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>F</td>\n",
              "      <td>Archer</td>\n",
              "      <td>4.5</td>\n",
              "      <td>5.2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>-1</td>\n",
              "      <td>0.3</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>5</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>10.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>39</td>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>F</td>\n",
              "      <td>Davis</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>10.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>673</th>\n",
              "      <td>647</td>\n",
              "      <td>West Ham</td>\n",
              "      <td>G</td>\n",
              "      <td>Anang</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>10.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>674</th>\n",
              "      <td>546</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>G</td>\n",
              "      <td>Bentley</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>10.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>675</th>\n",
              "      <td>564</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>G</td>\n",
              "      <td>King</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>10.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>676</th>\n",
              "      <td>569</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>G</td>\n",
              "      <td>Jos√© S√°</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1.1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>31</td>\n",
              "      <td>4.6</td>\n",
              "      <td>3</td>\n",
              "      <td>1.5</td>\n",
              "      <td>180</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>10.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>677</th>\n",
              "      <td>571</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>G</td>\n",
              "      <td>≈†arkiƒá</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>10.00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>661 rows √ó 20 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3c27a6e0-a0df-4d0c-b567-52ac3ea5e540')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3c27a6e0-a0df-4d0c-b567-52ac3ea5e540 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3c27a6e0-a0df-4d0c-b567-52ac3ea5e540');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-81e7eda7-3f7a-4d2c-b10d-e96f243e1e3e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-81e7eda7-3f7a-4d2c-b10d-e96f243e1e3e')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-81e7eda7-3f7a-4d2c-b10d-e96f243e1e3e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from pandas import ExcelWriter\n",
        "writer = ExcelWriter('API model.xlsx')\n",
        "rawdfgw228x.to_excel(writer, sheet_name='Sheet1')\n",
        "gwadjustments26.to_excel(writer, sheet_name='Sheet2')\n",
        "#fplwithunderstat.to_excel(writer, sheet_name='Sheet3')\n",
        "\n",
        "# Close the Pandas Excel writer and output the Excel file.\n",
        "writer.save()"
      ],
      "metadata": {
        "id": "tdXsMsuwaWa4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2a9250af-f2f7-4532-b4e5-90bc0c8d09ea"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-43-8cf119597ac9>:8: FutureWarning: save is not part of the public API, usage can give unexpected results and will be removed in a future version\n",
            "  writer.save()\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#from google.colab import drive\n",
        "#drive.mount('/content/drive')"
      ],
      "metadata": {
        "id": "GzSzE5_Ckuq3"
      },
      "execution_count": 44,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import shutil"
      ],
      "metadata": {
        "id": "xSIwXnyAk2op"
      },
      "execution_count": 45,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#shutil.copy(\"/content/API model.xlsx\",\"/content/drive/MyDrive/FPL\")"
      ],
      "metadata": {
        "id": "O724A90vk3b4"
      },
      "execution_count": 46,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "rawdfgw228x.nlargest(50, '5GW Total')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "4ULMO_eqJXIT",
        "outputId": "36f614eb-61c6-430f-bbe8-f2b5fbd2b710"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      id                     team pos             name  cost  \\\n",
              "145  108                Brentford   M           Mbeumo   6.7   \n",
              "247  308                Liverpool   M            Salah  12.5   \n",
              "162  140                 Brighton   M            March   6.6   \n",
              "245  303                Liverpool   M        Luis D√≠az   7.7   \n",
              "286  373        Manchester United   M      B.Fernandes   8.5   \n",
              "13   119                Brentford   F            Wissa   6.1   \n",
              "164  143                 Brighton   M           Mitoma   6.6   \n",
              "33   225           Crystal Palace   F          Edouard   5.5   \n",
              "188  199                  Chelsea   M             Enzo   5.0   \n",
              "16   135                 Brighton   F       Jo√£o Pedro   5.6   \n",
              "273  353          Manchester City   M            Foden   7.6   \n",
              "29   211                  Chelsea   F        N.Jackson   7.1   \n",
              "94    14                  Arsenal   M         √òdegaard   8.5   \n",
              "108   43              Aston Villa   M     Douglas Luiz   5.5   \n",
              "204  226           Crystal Palace   M              Eze   6.4   \n",
              "59   355          Manchester City   F          Haaland  14.0   \n",
              "229  270                   Fulham   M  De Cordova-Reid   5.5   \n",
              "390   36              Aston Villa   D             Cash   4.5   \n",
              "419  131                 Brighton   D        Estupi√±an   5.2   \n",
              "38   258                  Everton   F           Maupay   5.0   \n",
              "360  539                 West Ham   M        L.Paquet√°   6.0   \n",
              "314  603         Newcastle United   M           Barnes   6.5   \n",
              "111   50              Aston Villa   M           McGinn   5.5   \n",
              "159  134                 Brighton   M            Gross   6.4   \n",
              "2     13                  Arsenal   F          Nketiah   5.6   \n",
              "240  294                Liverpool   M         Diogo J.   8.0   \n",
              "443  195                  Chelsea   D         Chilwell   5.7   \n",
              "117  599              Aston Villa   M            Diaby   6.6   \n",
              "347  504                Tottenham   M         Maddison   7.6   \n",
              "15   132                 Brighton   F         Ferguson   6.0   \n",
              "58   343          Manchester City   F        J.Alvarez   6.6   \n",
              "281  365          Manchester City   M          Rodrigo   5.6   \n",
              "350  513                Tottenham   M             Sarr   4.5   \n",
              "104   34              Aston Villa   M           Bailey   5.5   \n",
              "87   590  Wolverhampton Wanderers   F            Cunha   5.5   \n",
              "295  396        Manchester United   M         Rashford   9.0   \n",
              "519  395        Manchester United   D         R.Varane   5.1   \n",
              "10    85              Bournemouth   F          Solanke   6.5   \n",
              "573  511                Tottenham   D           Romero   4.5   \n",
              "369  557  Wolverhampton Wanderers   M         Hee Chan   5.5   \n",
              "355  526                 West Ham   M            Bowen   7.0   \n",
              "312  429         Newcastle United   M           Tonali   5.5   \n",
              "63   415         Newcastle United   F             Isak   7.7   \n",
              "451  611                  Chelsea   D           Disasi   5.1   \n",
              "372  565  Wolverhampton Wanderers   M           Lemina   5.0   \n",
              "214  249                  Everton   M       A.Doucoure   5.5   \n",
              "157  130                 Brighton   M           Enciso   5.4   \n",
              "97    19                  Arsenal   M             Saka   8.6   \n",
              "51   326               Luton Town   F           Morris   5.5   \n",
              "285  372        Manchester United   M           Antony   6.9   \n",
              "\n",
              "     selected_by_percent  goals_scored  assists  bps  ict_index  points  \\\n",
              "145                 23.2             3        0   57       24.6      23   \n",
              "247                 27.8             1        1   30       20.2      10   \n",
              "162                 10.6             3        0   73       27.8      24   \n",
              "245                 13.3             2        0   48       17.5      15   \n",
              "286                 22.4             0        0   26       17.1       4   \n",
              "13                  15.4             2        1   69       22.1      20   \n",
              "164                 44.7             1        2   66       26.2      17   \n",
              "33                   2.1             1        0   27       22.9       9   \n",
              "188                  4.7             0        0   27       18.2       1   \n",
              "16                  22.1             1        0   25       13.8       7   \n",
              "273                 13.6             0        1   41       23.1      12   \n",
              "29                  18.9             0        0    0       10.3       2   \n",
              "94                  23.6             1        0   43       14.0      13   \n",
              "108                  2.4             1        0   40       12.8       8   \n",
              "204                 12.4             0        0   35       20.0       5   \n",
              "59                  91.3             2        0   57       20.2      15   \n",
              "229                  0.2             1        0   25        9.3       8   \n",
              "390                  7.8             0        0   28        5.8       5   \n",
              "419                 63.9             1        2   67       26.8      18   \n",
              "38                   1.1             0        0   -5       12.0       3   \n",
              "360                  1.6             1        0   34       15.4       7   \n",
              "314                  4.1             1        1   35       10.5      11   \n",
              "111                  0.6             1        0   37       10.0      12   \n",
              "159                  2.8             0        0   30       16.8       3   \n",
              "2                    6.8             1        1   32       12.1      13   \n",
              "240                  3.4             1        1   36       18.7      13   \n",
              "443                 28.7             0        1   37       12.2       8   \n",
              "117                  8.8             1        0   34       17.7      10   \n",
              "347                 12.6             0        2   43       24.3      12   \n",
              "15                   5.4             1        0   24        8.8       6   \n",
              "58                   9.0             1        1   58       23.0      12   \n",
              "281                 10.4             1        1   61       18.4      16   \n",
              "350                  2.2             1        0   40       15.4      11   \n",
              "104                  2.0             1        1   40        9.8      15   \n",
              "87                   0.6             0        0   16       14.0       4   \n",
              "295                 42.9             0        0    1       12.2       5   \n",
              "519                  6.8             1        0   55       12.3      15   \n",
              "10                   2.9             1        1   33       19.2      12   \n",
              "573                  4.2             1        0   41       10.5      13   \n",
              "369                  0.1             1        0   21        9.8       6   \n",
              "355                  4.7             1        0   33       17.2      11   \n",
              "312                  3.4             1        0   31        9.9       7   \n",
              "63                  28.4             2        0   58       13.6      15   \n",
              "451                  5.8             1        0   33       10.3      11   \n",
              "372                  0.0             0        0   20        4.7       3   \n",
              "214                  0.2             0        0    9        9.2       4   \n",
              "157                  3.2             0        2   30        9.4       8   \n",
              "97                  66.6             1        0   52       21.0      13   \n",
              "51                   1.4             1        0   28        9.1       8   \n",
              "285                  1.1             0        0    9        9.4       4   \n",
              "\n",
              "     points_per_game  minutes  xPallgw    gw3    gw4    gw2    gw5    gw6  \\\n",
              "145             11.5      180     18.5  20.15  21.80  20.15  16.85  21.80   \n",
              "247              5.0      161     10.8  10.80  11.68  13.44  13.44  12.56   \n",
              "162             12.0      163      9.6  10.36   9.60  11.88   9.60  11.88   \n",
              "245              7.5      161      9.0   9.00   9.70  11.10  11.10  10.40   \n",
              "286              2.0      180      9.4  11.62   8.66  10.14   9.40  10.88   \n",
              "13              10.0      149      8.9   9.59  10.28   9.59   8.21  10.28   \n",
              "164              8.5      170      8.6   9.26   8.60  10.58   8.60  10.58   \n",
              "33               4.5      180      9.0   8.30  10.40   8.30   8.30   9.70   \n",
              "188              0.5      180      7.8   9.54   9.54   8.38   8.96   7.80   \n",
              "16               3.5      120      8.0   8.60   8.00   9.80   8.00   9.80   \n",
              "273              6.0      180      6.9   9.35   8.37   7.39   8.37   9.35   \n",
              "29               1.0      180      7.4   9.02   9.02   7.94   8.48   7.40   \n",
              "94               6.5      179      7.2   8.24   7.72   7.72   8.76   8.24   \n",
              "108              4.0      153      7.6   8.72   7.04   8.72   8.16   7.60   \n",
              "204              2.5      180      8.0   7.40   9.20   7.40   7.40   8.60   \n",
              "59               7.5      169      6.3   8.45   7.59   6.73   7.59   8.45   \n",
              "229              4.0      112      8.4   7.12   6.48   7.76   9.68   7.76   \n",
              "390              2.5      176      7.2   8.24   6.68   8.24   7.72   7.20   \n",
              "419              9.0      180      6.9   7.39   6.90   8.37   6.90   8.37   \n",
              "38               1.5      110      8.1   8.71   8.71   6.88   6.27   6.88   \n",
              "360              3.5      180      7.9   7.31   9.08   7.31   6.13   6.72   \n",
              "314              5.5       56      6.9   6.90   6.90   6.41   7.39   8.86   \n",
              "111              6.0      153      6.7   7.64   6.23   7.64   7.17   6.70   \n",
              "159              1.5      170      6.4   6.84   6.40   7.72   6.40   7.72   \n",
              "2                6.5      150      6.2   7.04   6.62   6.62   7.46   7.04   \n",
              "240              6.5      140      6.2   6.20   6.62   7.46   7.46   7.04   \n",
              "443              4.0      149      6.1   7.33   7.33   6.51   6.92   6.10   \n",
              "117              5.0      149      6.4   7.28   5.96   7.28   6.84   6.40   \n",
              "347              6.0      180      6.4   7.28   6.84   5.96   7.28   5.52   \n",
              "15               3.0       35      6.0   6.40   6.00   7.20   6.00   7.20   \n",
              "58               6.0      180      5.2   6.80   6.16   5.52   6.16   6.80   \n",
              "281              8.0      180      5.2   6.80   6.16   5.52   6.16   6.80   \n",
              "350              5.5       90      6.1   6.92   6.51   5.69   6.92   5.28   \n",
              "104              7.5      107      5.7   6.44   5.33   6.44   6.07   5.70   \n",
              "87               2.0      166      6.8   6.32   5.84   5.36   5.36   6.80   \n",
              "295              2.5      171      5.5   6.55   5.15   5.85   5.50   6.20   \n",
              "519              7.5      180      5.5   6.55   5.15   5.85   5.50   6.20   \n",
              "10               6.0      180      7.0   6.00   6.00   5.50   6.00   5.50   \n",
              "573              6.5      103      5.6   6.32   5.96   5.24   6.32   4.88   \n",
              "369              3.0       62      6.5   6.05   5.60   5.15   5.15   6.50   \n",
              "355              5.5      180      6.1   5.69   6.92   5.69   4.87   5.28   \n",
              "312              3.5      156      5.3   5.30   5.30   4.97   5.63   6.62   \n",
              "63               7.5      132      5.2   5.20   5.20   4.88   5.52   6.48   \n",
              "451              5.5      180      4.9   5.77   5.77   5.19   5.48   4.90   \n",
              "372              1.5      180      6.0   5.60   5.20   4.80   4.80   6.00   \n",
              "214              2.0      180      5.6   5.96   5.96   4.88   4.52   4.88   \n",
              "157              4.0       68      4.7   4.97   4.70   5.51   4.70   5.51   \n",
              "97               6.5      178      4.6   5.12   4.86   4.86   5.38   5.12   \n",
              "51               8.0       90      6.5   5.15   5.60   2.00   5.60   6.50   \n",
              "285              2.0      141      4.6   5.38   4.34   4.86   4.60   5.12   \n",
              "\n",
              "     5GW Total  \n",
              "145     100.75  \n",
              "247      61.92  \n",
              "162      53.32  \n",
              "245      51.30  \n",
              "286      50.70  \n",
              "13       47.95  \n",
              "164      47.62  \n",
              "33       45.00  \n",
              "188      44.22  \n",
              "16       44.20  \n",
              "273      42.83  \n",
              "29       41.86  \n",
              "94       40.68  \n",
              "108      40.24  \n",
              "204      40.00  \n",
              "59       38.81  \n",
              "229      38.80  \n",
              "390      38.08  \n",
              "419      37.93  \n",
              "38       37.45  \n",
              "360      36.55  \n",
              "314      36.46  \n",
              "111      35.38  \n",
              "159      35.08  \n",
              "2        34.78  \n",
              "240      34.78  \n",
              "443      34.19  \n",
              "117      33.76  \n",
              "347      32.88  \n",
              "15       32.80  \n",
              "58       31.44  \n",
              "281      31.44  \n",
              "350      31.32  \n",
              "104      29.98  \n",
              "87       29.68  \n",
              "295      29.25  \n",
              "519      29.25  \n",
              "10       29.00  \n",
              "573      28.72  \n",
              "369      28.45  \n",
              "355      28.45  \n",
              "312      27.82  \n",
              "63       27.28  \n",
              "451      27.11  \n",
              "372      26.40  \n",
              "214      26.20  \n",
              "157      25.39  \n",
              "97       25.34  \n",
              "51       24.85  \n",
              "285      24.30  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-604ec35a-e68d-46e0-ac5c-4e73768e0511\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>team</th>\n",
              "      <th>pos</th>\n",
              "      <th>name</th>\n",
              "      <th>cost</th>\n",
              "      <th>selected_by_percent</th>\n",
              "      <th>goals_scored</th>\n",
              "      <th>assists</th>\n",
              "      <th>bps</th>\n",
              "      <th>ict_index</th>\n",
              "      <th>points</th>\n",
              "      <th>points_per_game</th>\n",
              "      <th>minutes</th>\n",
              "      <th>xPallgw</th>\n",
              "      <th>gw3</th>\n",
              "      <th>gw4</th>\n",
              "      <th>gw2</th>\n",
              "      <th>gw5</th>\n",
              "      <th>gw6</th>\n",
              "      <th>5GW Total</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>145</th>\n",
              "      <td>108</td>\n",
              "      <td>Brentford</td>\n",
              "      <td>M</td>\n",
              "      <td>Mbeumo</td>\n",
              "      <td>6.7</td>\n",
              "      <td>23.2</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>57</td>\n",
              "      <td>24.6</td>\n",
              "      <td>23</td>\n",
              "      <td>11.5</td>\n",
              "      <td>180</td>\n",
              "      <td>18.5</td>\n",
              "      <td>20.15</td>\n",
              "      <td>21.80</td>\n",
              "      <td>20.15</td>\n",
              "      <td>16.85</td>\n",
              "      <td>21.80</td>\n",
              "      <td>100.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>247</th>\n",
              "      <td>308</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>M</td>\n",
              "      <td>Salah</td>\n",
              "      <td>12.5</td>\n",
              "      <td>27.8</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>30</td>\n",
              "      <td>20.2</td>\n",
              "      <td>10</td>\n",
              "      <td>5.0</td>\n",
              "      <td>161</td>\n",
              "      <td>10.8</td>\n",
              "      <td>10.80</td>\n",
              "      <td>11.68</td>\n",
              "      <td>13.44</td>\n",
              "      <td>13.44</td>\n",
              "      <td>12.56</td>\n",
              "      <td>61.92</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>162</th>\n",
              "      <td>140</td>\n",
              "      <td>Brighton</td>\n",
              "      <td>M</td>\n",
              "      <td>March</td>\n",
              "      <td>6.6</td>\n",
              "      <td>10.6</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>73</td>\n",
              "      <td>27.8</td>\n",
              "      <td>24</td>\n",
              "      <td>12.0</td>\n",
              "      <td>163</td>\n",
              "      <td>9.6</td>\n",
              "      <td>10.36</td>\n",
              "      <td>9.60</td>\n",
              "      <td>11.88</td>\n",
              "      <td>9.60</td>\n",
              "      <td>11.88</td>\n",
              "      <td>53.32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>245</th>\n",
              "      <td>303</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>M</td>\n",
              "      <td>Luis D√≠az</td>\n",
              "      <td>7.7</td>\n",
              "      <td>13.3</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>48</td>\n",
              "      <td>17.5</td>\n",
              "      <td>15</td>\n",
              "      <td>7.5</td>\n",
              "      <td>161</td>\n",
              "      <td>9.0</td>\n",
              "      <td>9.00</td>\n",
              "      <td>9.70</td>\n",
              "      <td>11.10</td>\n",
              "      <td>11.10</td>\n",
              "      <td>10.40</td>\n",
              "      <td>51.30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>286</th>\n",
              "      <td>373</td>\n",
              "      <td>Manchester United</td>\n",
              "      <td>M</td>\n",
              "      <td>B.Fernandes</td>\n",
              "      <td>8.5</td>\n",
              "      <td>22.4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>26</td>\n",
              "      <td>17.1</td>\n",
              "      <td>4</td>\n",
              "      <td>2.0</td>\n",
              "      <td>180</td>\n",
              "      <td>9.4</td>\n",
              "      <td>11.62</td>\n",
              "      <td>8.66</td>\n",
              "      <td>10.14</td>\n",
              "      <td>9.40</td>\n",
              "      <td>10.88</td>\n",
              "      <td>50.70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>119</td>\n",
              "      <td>Brentford</td>\n",
              "      <td>F</td>\n",
              "      <td>Wissa</td>\n",
              "      <td>6.1</td>\n",
              "      <td>15.4</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>69</td>\n",
              "      <td>22.1</td>\n",
              "      <td>20</td>\n",
              "      <td>10.0</td>\n",
              "      <td>149</td>\n",
              "      <td>8.9</td>\n",
              "      <td>9.59</td>\n",
              "      <td>10.28</td>\n",
              "      <td>9.59</td>\n",
              "      <td>8.21</td>\n",
              "      <td>10.28</td>\n",
              "      <td>47.95</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>164</th>\n",
              "      <td>143</td>\n",
              "      <td>Brighton</td>\n",
              "      <td>M</td>\n",
              "      <td>Mitoma</td>\n",
              "      <td>6.6</td>\n",
              "      <td>44.7</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>66</td>\n",
              "      <td>26.2</td>\n",
              "      <td>17</td>\n",
              "      <td>8.5</td>\n",
              "      <td>170</td>\n",
              "      <td>8.6</td>\n",
              "      <td>9.26</td>\n",
              "      <td>8.60</td>\n",
              "      <td>10.58</td>\n",
              "      <td>8.60</td>\n",
              "      <td>10.58</td>\n",
              "      <td>47.62</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>225</td>\n",
              "      <td>Crystal Palace</td>\n",
              "      <td>F</td>\n",
              "      <td>Edouard</td>\n",
              "      <td>5.5</td>\n",
              "      <td>2.1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>27</td>\n",
              "      <td>22.9</td>\n",
              "      <td>9</td>\n",
              "      <td>4.5</td>\n",
              "      <td>180</td>\n",
              "      <td>9.0</td>\n",
              "      <td>8.30</td>\n",
              "      <td>10.40</td>\n",
              "      <td>8.30</td>\n",
              "      <td>8.30</td>\n",
              "      <td>9.70</td>\n",
              "      <td>45.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>188</th>\n",
              "      <td>199</td>\n",
              "      <td>Chelsea</td>\n",
              "      <td>M</td>\n",
              "      <td>Enzo</td>\n",
              "      <td>5.0</td>\n",
              "      <td>4.7</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>27</td>\n",
              "      <td>18.2</td>\n",
              "      <td>1</td>\n",
              "      <td>0.5</td>\n",
              "      <td>180</td>\n",
              "      <td>7.8</td>\n",
              "      <td>9.54</td>\n",
              "      <td>9.54</td>\n",
              "      <td>8.38</td>\n",
              "      <td>8.96</td>\n",
              "      <td>7.80</td>\n",
              "      <td>44.22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>135</td>\n",
              "      <td>Brighton</td>\n",
              "      <td>F</td>\n",
              "      <td>Jo√£o Pedro</td>\n",
              "      <td>5.6</td>\n",
              "      <td>22.1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>25</td>\n",
              "      <td>13.8</td>\n",
              "      <td>7</td>\n",
              "      <td>3.5</td>\n",
              "      <td>120</td>\n",
              "      <td>8.0</td>\n",
              "      <td>8.60</td>\n",
              "      <td>8.00</td>\n",
              "      <td>9.80</td>\n",
              "      <td>8.00</td>\n",
              "      <td>9.80</td>\n",
              "      <td>44.20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>273</th>\n",
              "      <td>353</td>\n",
              "      <td>Manchester City</td>\n",
              "      <td>M</td>\n",
              "      <td>Foden</td>\n",
              "      <td>7.6</td>\n",
              "      <td>13.6</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>41</td>\n",
              "      <td>23.1</td>\n",
              "      <td>12</td>\n",
              "      <td>6.0</td>\n",
              "      <td>180</td>\n",
              "      <td>6.9</td>\n",
              "      <td>9.35</td>\n",
              "      <td>8.37</td>\n",
              "      <td>7.39</td>\n",
              "      <td>8.37</td>\n",
              "      <td>9.35</td>\n",
              "      <td>42.83</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>211</td>\n",
              "      <td>Chelsea</td>\n",
              "      <td>F</td>\n",
              "      <td>N.Jackson</td>\n",
              "      <td>7.1</td>\n",
              "      <td>18.9</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>10.3</td>\n",
              "      <td>2</td>\n",
              "      <td>1.0</td>\n",
              "      <td>180</td>\n",
              "      <td>7.4</td>\n",
              "      <td>9.02</td>\n",
              "      <td>9.02</td>\n",
              "      <td>7.94</td>\n",
              "      <td>8.48</td>\n",
              "      <td>7.40</td>\n",
              "      <td>41.86</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>94</th>\n",
              "      <td>14</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>M</td>\n",
              "      <td>√òdegaard</td>\n",
              "      <td>8.5</td>\n",
              "      <td>23.6</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>43</td>\n",
              "      <td>14.0</td>\n",
              "      <td>13</td>\n",
              "      <td>6.5</td>\n",
              "      <td>179</td>\n",
              "      <td>7.2</td>\n",
              "      <td>8.24</td>\n",
              "      <td>7.72</td>\n",
              "      <td>7.72</td>\n",
              "      <td>8.76</td>\n",
              "      <td>8.24</td>\n",
              "      <td>40.68</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>108</th>\n",
              "      <td>43</td>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>M</td>\n",
              "      <td>Douglas Luiz</td>\n",
              "      <td>5.5</td>\n",
              "      <td>2.4</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>40</td>\n",
              "      <td>12.8</td>\n",
              "      <td>8</td>\n",
              "      <td>4.0</td>\n",
              "      <td>153</td>\n",
              "      <td>7.6</td>\n",
              "      <td>8.72</td>\n",
              "      <td>7.04</td>\n",
              "      <td>8.72</td>\n",
              "      <td>8.16</td>\n",
              "      <td>7.60</td>\n",
              "      <td>40.24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>204</th>\n",
              "      <td>226</td>\n",
              "      <td>Crystal Palace</td>\n",
              "      <td>M</td>\n",
              "      <td>Eze</td>\n",
              "      <td>6.4</td>\n",
              "      <td>12.4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>35</td>\n",
              "      <td>20.0</td>\n",
              "      <td>5</td>\n",
              "      <td>2.5</td>\n",
              "      <td>180</td>\n",
              "      <td>8.0</td>\n",
              "      <td>7.40</td>\n",
              "      <td>9.20</td>\n",
              "      <td>7.40</td>\n",
              "      <td>7.40</td>\n",
              "      <td>8.60</td>\n",
              "      <td>40.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59</th>\n",
              "      <td>355</td>\n",
              "      <td>Manchester City</td>\n",
              "      <td>F</td>\n",
              "      <td>Haaland</td>\n",
              "      <td>14.0</td>\n",
              "      <td>91.3</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>57</td>\n",
              "      <td>20.2</td>\n",
              "      <td>15</td>\n",
              "      <td>7.5</td>\n",
              "      <td>169</td>\n",
              "      <td>6.3</td>\n",
              "      <td>8.45</td>\n",
              "      <td>7.59</td>\n",
              "      <td>6.73</td>\n",
              "      <td>7.59</td>\n",
              "      <td>8.45</td>\n",
              "      <td>38.81</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>229</th>\n",
              "      <td>270</td>\n",
              "      <td>Fulham</td>\n",
              "      <td>M</td>\n",
              "      <td>De Cordova-Reid</td>\n",
              "      <td>5.5</td>\n",
              "      <td>0.2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>25</td>\n",
              "      <td>9.3</td>\n",
              "      <td>8</td>\n",
              "      <td>4.0</td>\n",
              "      <td>112</td>\n",
              "      <td>8.4</td>\n",
              "      <td>7.12</td>\n",
              "      <td>6.48</td>\n",
              "      <td>7.76</td>\n",
              "      <td>9.68</td>\n",
              "      <td>7.76</td>\n",
              "      <td>38.80</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>390</th>\n",
              "      <td>36</td>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>D</td>\n",
              "      <td>Cash</td>\n",
              "      <td>4.5</td>\n",
              "      <td>7.8</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>28</td>\n",
              "      <td>5.8</td>\n",
              "      <td>5</td>\n",
              "      <td>2.5</td>\n",
              "      <td>176</td>\n",
              "      <td>7.2</td>\n",
              "      <td>8.24</td>\n",
              "      <td>6.68</td>\n",
              "      <td>8.24</td>\n",
              "      <td>7.72</td>\n",
              "      <td>7.20</td>\n",
              "      <td>38.08</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>419</th>\n",
              "      <td>131</td>\n",
              "      <td>Brighton</td>\n",
              "      <td>D</td>\n",
              "      <td>Estupi√±an</td>\n",
              "      <td>5.2</td>\n",
              "      <td>63.9</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>67</td>\n",
              "      <td>26.8</td>\n",
              "      <td>18</td>\n",
              "      <td>9.0</td>\n",
              "      <td>180</td>\n",
              "      <td>6.9</td>\n",
              "      <td>7.39</td>\n",
              "      <td>6.90</td>\n",
              "      <td>8.37</td>\n",
              "      <td>6.90</td>\n",
              "      <td>8.37</td>\n",
              "      <td>37.93</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>258</td>\n",
              "      <td>Everton</td>\n",
              "      <td>F</td>\n",
              "      <td>Maupay</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1.1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>-5</td>\n",
              "      <td>12.0</td>\n",
              "      <td>3</td>\n",
              "      <td>1.5</td>\n",
              "      <td>110</td>\n",
              "      <td>8.1</td>\n",
              "      <td>8.71</td>\n",
              "      <td>8.71</td>\n",
              "      <td>6.88</td>\n",
              "      <td>6.27</td>\n",
              "      <td>6.88</td>\n",
              "      <td>37.45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>360</th>\n",
              "      <td>539</td>\n",
              "      <td>West Ham</td>\n",
              "      <td>M</td>\n",
              "      <td>L.Paquet√°</td>\n",
              "      <td>6.0</td>\n",
              "      <td>1.6</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>34</td>\n",
              "      <td>15.4</td>\n",
              "      <td>7</td>\n",
              "      <td>3.5</td>\n",
              "      <td>180</td>\n",
              "      <td>7.9</td>\n",
              "      <td>7.31</td>\n",
              "      <td>9.08</td>\n",
              "      <td>7.31</td>\n",
              "      <td>6.13</td>\n",
              "      <td>6.72</td>\n",
              "      <td>36.55</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>314</th>\n",
              "      <td>603</td>\n",
              "      <td>Newcastle United</td>\n",
              "      <td>M</td>\n",
              "      <td>Barnes</td>\n",
              "      <td>6.5</td>\n",
              "      <td>4.1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>35</td>\n",
              "      <td>10.5</td>\n",
              "      <td>11</td>\n",
              "      <td>5.5</td>\n",
              "      <td>56</td>\n",
              "      <td>6.9</td>\n",
              "      <td>6.90</td>\n",
              "      <td>6.90</td>\n",
              "      <td>6.41</td>\n",
              "      <td>7.39</td>\n",
              "      <td>8.86</td>\n",
              "      <td>36.46</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>111</th>\n",
              "      <td>50</td>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>M</td>\n",
              "      <td>McGinn</td>\n",
              "      <td>5.5</td>\n",
              "      <td>0.6</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>37</td>\n",
              "      <td>10.0</td>\n",
              "      <td>12</td>\n",
              "      <td>6.0</td>\n",
              "      <td>153</td>\n",
              "      <td>6.7</td>\n",
              "      <td>7.64</td>\n",
              "      <td>6.23</td>\n",
              "      <td>7.64</td>\n",
              "      <td>7.17</td>\n",
              "      <td>6.70</td>\n",
              "      <td>35.38</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>159</th>\n",
              "      <td>134</td>\n",
              "      <td>Brighton</td>\n",
              "      <td>M</td>\n",
              "      <td>Gross</td>\n",
              "      <td>6.4</td>\n",
              "      <td>2.8</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>30</td>\n",
              "      <td>16.8</td>\n",
              "      <td>3</td>\n",
              "      <td>1.5</td>\n",
              "      <td>170</td>\n",
              "      <td>6.4</td>\n",
              "      <td>6.84</td>\n",
              "      <td>6.40</td>\n",
              "      <td>7.72</td>\n",
              "      <td>6.40</td>\n",
              "      <td>7.72</td>\n",
              "      <td>35.08</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>13</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>F</td>\n",
              "      <td>Nketiah</td>\n",
              "      <td>5.6</td>\n",
              "      <td>6.8</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>32</td>\n",
              "      <td>12.1</td>\n",
              "      <td>13</td>\n",
              "      <td>6.5</td>\n",
              "      <td>150</td>\n",
              "      <td>6.2</td>\n",
              "      <td>7.04</td>\n",
              "      <td>6.62</td>\n",
              "      <td>6.62</td>\n",
              "      <td>7.46</td>\n",
              "      <td>7.04</td>\n",
              "      <td>34.78</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>240</th>\n",
              "      <td>294</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>M</td>\n",
              "      <td>Diogo J.</td>\n",
              "      <td>8.0</td>\n",
              "      <td>3.4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>36</td>\n",
              "      <td>18.7</td>\n",
              "      <td>13</td>\n",
              "      <td>6.5</td>\n",
              "      <td>140</td>\n",
              "      <td>6.2</td>\n",
              "      <td>6.20</td>\n",
              "      <td>6.62</td>\n",
              "      <td>7.46</td>\n",
              "      <td>7.46</td>\n",
              "      <td>7.04</td>\n",
              "      <td>34.78</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>443</th>\n",
              "      <td>195</td>\n",
              "      <td>Chelsea</td>\n",
              "      <td>D</td>\n",
              "      <td>Chilwell</td>\n",
              "      <td>5.7</td>\n",
              "      <td>28.7</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>37</td>\n",
              "      <td>12.2</td>\n",
              "      <td>8</td>\n",
              "      <td>4.0</td>\n",
              "      <td>149</td>\n",
              "      <td>6.1</td>\n",
              "      <td>7.33</td>\n",
              "      <td>7.33</td>\n",
              "      <td>6.51</td>\n",
              "      <td>6.92</td>\n",
              "      <td>6.10</td>\n",
              "      <td>34.19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>117</th>\n",
              "      <td>599</td>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>M</td>\n",
              "      <td>Diaby</td>\n",
              "      <td>6.6</td>\n",
              "      <td>8.8</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>34</td>\n",
              "      <td>17.7</td>\n",
              "      <td>10</td>\n",
              "      <td>5.0</td>\n",
              "      <td>149</td>\n",
              "      <td>6.4</td>\n",
              "      <td>7.28</td>\n",
              "      <td>5.96</td>\n",
              "      <td>7.28</td>\n",
              "      <td>6.84</td>\n",
              "      <td>6.40</td>\n",
              "      <td>33.76</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>347</th>\n",
              "      <td>504</td>\n",
              "      <td>Tottenham</td>\n",
              "      <td>M</td>\n",
              "      <td>Maddison</td>\n",
              "      <td>7.6</td>\n",
              "      <td>12.6</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>43</td>\n",
              "      <td>24.3</td>\n",
              "      <td>12</td>\n",
              "      <td>6.0</td>\n",
              "      <td>180</td>\n",
              "      <td>6.4</td>\n",
              "      <td>7.28</td>\n",
              "      <td>6.84</td>\n",
              "      <td>5.96</td>\n",
              "      <td>7.28</td>\n",
              "      <td>5.52</td>\n",
              "      <td>32.88</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>132</td>\n",
              "      <td>Brighton</td>\n",
              "      <td>F</td>\n",
              "      <td>Ferguson</td>\n",
              "      <td>6.0</td>\n",
              "      <td>5.4</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>24</td>\n",
              "      <td>8.8</td>\n",
              "      <td>6</td>\n",
              "      <td>3.0</td>\n",
              "      <td>35</td>\n",
              "      <td>6.0</td>\n",
              "      <td>6.40</td>\n",
              "      <td>6.00</td>\n",
              "      <td>7.20</td>\n",
              "      <td>6.00</td>\n",
              "      <td>7.20</td>\n",
              "      <td>32.80</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>58</th>\n",
              "      <td>343</td>\n",
              "      <td>Manchester City</td>\n",
              "      <td>F</td>\n",
              "      <td>J.Alvarez</td>\n",
              "      <td>6.6</td>\n",
              "      <td>9.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>58</td>\n",
              "      <td>23.0</td>\n",
              "      <td>12</td>\n",
              "      <td>6.0</td>\n",
              "      <td>180</td>\n",
              "      <td>5.2</td>\n",
              "      <td>6.80</td>\n",
              "      <td>6.16</td>\n",
              "      <td>5.52</td>\n",
              "      <td>6.16</td>\n",
              "      <td>6.80</td>\n",
              "      <td>31.44</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>281</th>\n",
              "      <td>365</td>\n",
              "      <td>Manchester City</td>\n",
              "      <td>M</td>\n",
              "      <td>Rodrigo</td>\n",
              "      <td>5.6</td>\n",
              "      <td>10.4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>61</td>\n",
              "      <td>18.4</td>\n",
              "      <td>16</td>\n",
              "      <td>8.0</td>\n",
              "      <td>180</td>\n",
              "      <td>5.2</td>\n",
              "      <td>6.80</td>\n",
              "      <td>6.16</td>\n",
              "      <td>5.52</td>\n",
              "      <td>6.16</td>\n",
              "      <td>6.80</td>\n",
              "      <td>31.44</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>350</th>\n",
              "      <td>513</td>\n",
              "      <td>Tottenham</td>\n",
              "      <td>M</td>\n",
              "      <td>Sarr</td>\n",
              "      <td>4.5</td>\n",
              "      <td>2.2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>40</td>\n",
              "      <td>15.4</td>\n",
              "      <td>11</td>\n",
              "      <td>5.5</td>\n",
              "      <td>90</td>\n",
              "      <td>6.1</td>\n",
              "      <td>6.92</td>\n",
              "      <td>6.51</td>\n",
              "      <td>5.69</td>\n",
              "      <td>6.92</td>\n",
              "      <td>5.28</td>\n",
              "      <td>31.32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>104</th>\n",
              "      <td>34</td>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>M</td>\n",
              "      <td>Bailey</td>\n",
              "      <td>5.5</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>40</td>\n",
              "      <td>9.8</td>\n",
              "      <td>15</td>\n",
              "      <td>7.5</td>\n",
              "      <td>107</td>\n",
              "      <td>5.7</td>\n",
              "      <td>6.44</td>\n",
              "      <td>5.33</td>\n",
              "      <td>6.44</td>\n",
              "      <td>6.07</td>\n",
              "      <td>5.70</td>\n",
              "      <td>29.98</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>87</th>\n",
              "      <td>590</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>F</td>\n",
              "      <td>Cunha</td>\n",
              "      <td>5.5</td>\n",
              "      <td>0.6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>16</td>\n",
              "      <td>14.0</td>\n",
              "      <td>4</td>\n",
              "      <td>2.0</td>\n",
              "      <td>166</td>\n",
              "      <td>6.8</td>\n",
              "      <td>6.32</td>\n",
              "      <td>5.84</td>\n",
              "      <td>5.36</td>\n",
              "      <td>5.36</td>\n",
              "      <td>6.80</td>\n",
              "      <td>29.68</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>295</th>\n",
              "      <td>396</td>\n",
              "      <td>Manchester United</td>\n",
              "      <td>M</td>\n",
              "      <td>Rashford</td>\n",
              "      <td>9.0</td>\n",
              "      <td>42.9</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>12.2</td>\n",
              "      <td>5</td>\n",
              "      <td>2.5</td>\n",
              "      <td>171</td>\n",
              "      <td>5.5</td>\n",
              "      <td>6.55</td>\n",
              "      <td>5.15</td>\n",
              "      <td>5.85</td>\n",
              "      <td>5.50</td>\n",
              "      <td>6.20</td>\n",
              "      <td>29.25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>519</th>\n",
              "      <td>395</td>\n",
              "      <td>Manchester United</td>\n",
              "      <td>D</td>\n",
              "      <td>R.Varane</td>\n",
              "      <td>5.1</td>\n",
              "      <td>6.8</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>55</td>\n",
              "      <td>12.3</td>\n",
              "      <td>15</td>\n",
              "      <td>7.5</td>\n",
              "      <td>180</td>\n",
              "      <td>5.5</td>\n",
              "      <td>6.55</td>\n",
              "      <td>5.15</td>\n",
              "      <td>5.85</td>\n",
              "      <td>5.50</td>\n",
              "      <td>6.20</td>\n",
              "      <td>29.25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>85</td>\n",
              "      <td>Bournemouth</td>\n",
              "      <td>F</td>\n",
              "      <td>Solanke</td>\n",
              "      <td>6.5</td>\n",
              "      <td>2.9</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>33</td>\n",
              "      <td>19.2</td>\n",
              "      <td>12</td>\n",
              "      <td>6.0</td>\n",
              "      <td>180</td>\n",
              "      <td>7.0</td>\n",
              "      <td>6.00</td>\n",
              "      <td>6.00</td>\n",
              "      <td>5.50</td>\n",
              "      <td>6.00</td>\n",
              "      <td>5.50</td>\n",
              "      <td>29.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>573</th>\n",
              "      <td>511</td>\n",
              "      <td>Tottenham</td>\n",
              "      <td>D</td>\n",
              "      <td>Romero</td>\n",
              "      <td>4.5</td>\n",
              "      <td>4.2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>41</td>\n",
              "      <td>10.5</td>\n",
              "      <td>13</td>\n",
              "      <td>6.5</td>\n",
              "      <td>103</td>\n",
              "      <td>5.6</td>\n",
              "      <td>6.32</td>\n",
              "      <td>5.96</td>\n",
              "      <td>5.24</td>\n",
              "      <td>6.32</td>\n",
              "      <td>4.88</td>\n",
              "      <td>28.72</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>369</th>\n",
              "      <td>557</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>M</td>\n",
              "      <td>Hee Chan</td>\n",
              "      <td>5.5</td>\n",
              "      <td>0.1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>21</td>\n",
              "      <td>9.8</td>\n",
              "      <td>6</td>\n",
              "      <td>3.0</td>\n",
              "      <td>62</td>\n",
              "      <td>6.5</td>\n",
              "      <td>6.05</td>\n",
              "      <td>5.60</td>\n",
              "      <td>5.15</td>\n",
              "      <td>5.15</td>\n",
              "      <td>6.50</td>\n",
              "      <td>28.45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>355</th>\n",
              "      <td>526</td>\n",
              "      <td>West Ham</td>\n",
              "      <td>M</td>\n",
              "      <td>Bowen</td>\n",
              "      <td>7.0</td>\n",
              "      <td>4.7</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>33</td>\n",
              "      <td>17.2</td>\n",
              "      <td>11</td>\n",
              "      <td>5.5</td>\n",
              "      <td>180</td>\n",
              "      <td>6.1</td>\n",
              "      <td>5.69</td>\n",
              "      <td>6.92</td>\n",
              "      <td>5.69</td>\n",
              "      <td>4.87</td>\n",
              "      <td>5.28</td>\n",
              "      <td>28.45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>312</th>\n",
              "      <td>429</td>\n",
              "      <td>Newcastle United</td>\n",
              "      <td>M</td>\n",
              "      <td>Tonali</td>\n",
              "      <td>5.5</td>\n",
              "      <td>3.4</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>31</td>\n",
              "      <td>9.9</td>\n",
              "      <td>7</td>\n",
              "      <td>3.5</td>\n",
              "      <td>156</td>\n",
              "      <td>5.3</td>\n",
              "      <td>5.30</td>\n",
              "      <td>5.30</td>\n",
              "      <td>4.97</td>\n",
              "      <td>5.63</td>\n",
              "      <td>6.62</td>\n",
              "      <td>27.82</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>63</th>\n",
              "      <td>415</td>\n",
              "      <td>Newcastle United</td>\n",
              "      <td>F</td>\n",
              "      <td>Isak</td>\n",
              "      <td>7.7</td>\n",
              "      <td>28.4</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>58</td>\n",
              "      <td>13.6</td>\n",
              "      <td>15</td>\n",
              "      <td>7.5</td>\n",
              "      <td>132</td>\n",
              "      <td>5.2</td>\n",
              "      <td>5.20</td>\n",
              "      <td>5.20</td>\n",
              "      <td>4.88</td>\n",
              "      <td>5.52</td>\n",
              "      <td>6.48</td>\n",
              "      <td>27.28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>451</th>\n",
              "      <td>611</td>\n",
              "      <td>Chelsea</td>\n",
              "      <td>D</td>\n",
              "      <td>Disasi</td>\n",
              "      <td>5.1</td>\n",
              "      <td>5.8</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>33</td>\n",
              "      <td>10.3</td>\n",
              "      <td>11</td>\n",
              "      <td>5.5</td>\n",
              "      <td>180</td>\n",
              "      <td>4.9</td>\n",
              "      <td>5.77</td>\n",
              "      <td>5.77</td>\n",
              "      <td>5.19</td>\n",
              "      <td>5.48</td>\n",
              "      <td>4.90</td>\n",
              "      <td>27.11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>372</th>\n",
              "      <td>565</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>M</td>\n",
              "      <td>Lemina</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>20</td>\n",
              "      <td>4.7</td>\n",
              "      <td>3</td>\n",
              "      <td>1.5</td>\n",
              "      <td>180</td>\n",
              "      <td>6.0</td>\n",
              "      <td>5.60</td>\n",
              "      <td>5.20</td>\n",
              "      <td>4.80</td>\n",
              "      <td>4.80</td>\n",
              "      <td>6.00</td>\n",
              "      <td>26.40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>214</th>\n",
              "      <td>249</td>\n",
              "      <td>Everton</td>\n",
              "      <td>M</td>\n",
              "      <td>A.Doucoure</td>\n",
              "      <td>5.5</td>\n",
              "      <td>0.2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>9.2</td>\n",
              "      <td>4</td>\n",
              "      <td>2.0</td>\n",
              "      <td>180</td>\n",
              "      <td>5.6</td>\n",
              "      <td>5.96</td>\n",
              "      <td>5.96</td>\n",
              "      <td>4.88</td>\n",
              "      <td>4.52</td>\n",
              "      <td>4.88</td>\n",
              "      <td>26.20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>157</th>\n",
              "      <td>130</td>\n",
              "      <td>Brighton</td>\n",
              "      <td>M</td>\n",
              "      <td>Enciso</td>\n",
              "      <td>5.4</td>\n",
              "      <td>3.2</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>30</td>\n",
              "      <td>9.4</td>\n",
              "      <td>8</td>\n",
              "      <td>4.0</td>\n",
              "      <td>68</td>\n",
              "      <td>4.7</td>\n",
              "      <td>4.97</td>\n",
              "      <td>4.70</td>\n",
              "      <td>5.51</td>\n",
              "      <td>4.70</td>\n",
              "      <td>5.51</td>\n",
              "      <td>25.39</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>97</th>\n",
              "      <td>19</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>M</td>\n",
              "      <td>Saka</td>\n",
              "      <td>8.6</td>\n",
              "      <td>66.6</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>52</td>\n",
              "      <td>21.0</td>\n",
              "      <td>13</td>\n",
              "      <td>6.5</td>\n",
              "      <td>178</td>\n",
              "      <td>4.6</td>\n",
              "      <td>5.12</td>\n",
              "      <td>4.86</td>\n",
              "      <td>4.86</td>\n",
              "      <td>5.38</td>\n",
              "      <td>5.12</td>\n",
              "      <td>25.34</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>51</th>\n",
              "      <td>326</td>\n",
              "      <td>Luton Town</td>\n",
              "      <td>F</td>\n",
              "      <td>Morris</td>\n",
              "      <td>5.5</td>\n",
              "      <td>1.4</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>28</td>\n",
              "      <td>9.1</td>\n",
              "      <td>8</td>\n",
              "      <td>8.0</td>\n",
              "      <td>90</td>\n",
              "      <td>6.5</td>\n",
              "      <td>5.15</td>\n",
              "      <td>5.60</td>\n",
              "      <td>2.00</td>\n",
              "      <td>5.60</td>\n",
              "      <td>6.50</td>\n",
              "      <td>24.85</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>285</th>\n",
              "      <td>372</td>\n",
              "      <td>Manchester United</td>\n",
              "      <td>M</td>\n",
              "      <td>Antony</td>\n",
              "      <td>6.9</td>\n",
              "      <td>1.1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>9.4</td>\n",
              "      <td>4</td>\n",
              "      <td>2.0</td>\n",
              "      <td>141</td>\n",
              "      <td>4.6</td>\n",
              "      <td>5.38</td>\n",
              "      <td>4.34</td>\n",
              "      <td>4.86</td>\n",
              "      <td>4.60</td>\n",
              "      <td>5.12</td>\n",
              "      <td>24.30</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-604ec35a-e68d-46e0-ac5c-4e73768e0511')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-604ec35a-e68d-46e0-ac5c-4e73768e0511 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-604ec35a-e68d-46e0-ac5c-4e73768e0511');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0c2dbb31-9f38-4064-a114-f18a304754ac\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0c2dbb31-9f38-4064-a114-f18a304754ac')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0c2dbb31-9f38-4064-a114-f18a304754ac button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Top50 = rawdfgw228x.nlargest(50, '5GW Total')\n",
        "Top50"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Vuuihhw-Jx7s",
        "outputId": "fceafa07-917c-4aca-c628-e96385fc9aae"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      id                     team pos             name  cost  \\\n",
              "145  108                Brentford   M           Mbeumo   6.7   \n",
              "247  308                Liverpool   M            Salah  12.5   \n",
              "162  140                 Brighton   M            March   6.6   \n",
              "245  303                Liverpool   M        Luis D√≠az   7.7   \n",
              "286  373        Manchester United   M      B.Fernandes   8.5   \n",
              "13   119                Brentford   F            Wissa   6.1   \n",
              "164  143                 Brighton   M           Mitoma   6.6   \n",
              "33   225           Crystal Palace   F          Edouard   5.5   \n",
              "188  199                  Chelsea   M             Enzo   5.0   \n",
              "16   135                 Brighton   F       Jo√£o Pedro   5.6   \n",
              "273  353          Manchester City   M            Foden   7.6   \n",
              "29   211                  Chelsea   F        N.Jackson   7.1   \n",
              "94    14                  Arsenal   M         √òdegaard   8.5   \n",
              "108   43              Aston Villa   M     Douglas Luiz   5.5   \n",
              "204  226           Crystal Palace   M              Eze   6.4   \n",
              "59   355          Manchester City   F          Haaland  14.0   \n",
              "229  270                   Fulham   M  De Cordova-Reid   5.5   \n",
              "390   36              Aston Villa   D             Cash   4.5   \n",
              "419  131                 Brighton   D        Estupi√±an   5.2   \n",
              "38   258                  Everton   F           Maupay   5.0   \n",
              "360  539                 West Ham   M        L.Paquet√°   6.0   \n",
              "314  603         Newcastle United   M           Barnes   6.5   \n",
              "111   50              Aston Villa   M           McGinn   5.5   \n",
              "159  134                 Brighton   M            Gross   6.4   \n",
              "2     13                  Arsenal   F          Nketiah   5.6   \n",
              "240  294                Liverpool   M         Diogo J.   8.0   \n",
              "443  195                  Chelsea   D         Chilwell   5.7   \n",
              "117  599              Aston Villa   M            Diaby   6.6   \n",
              "347  504                Tottenham   M         Maddison   7.6   \n",
              "15   132                 Brighton   F         Ferguson   6.0   \n",
              "58   343          Manchester City   F        J.Alvarez   6.6   \n",
              "281  365          Manchester City   M          Rodrigo   5.6   \n",
              "350  513                Tottenham   M             Sarr   4.5   \n",
              "104   34              Aston Villa   M           Bailey   5.5   \n",
              "87   590  Wolverhampton Wanderers   F            Cunha   5.5   \n",
              "295  396        Manchester United   M         Rashford   9.0   \n",
              "519  395        Manchester United   D         R.Varane   5.1   \n",
              "10    85              Bournemouth   F          Solanke   6.5   \n",
              "573  511                Tottenham   D           Romero   4.5   \n",
              "369  557  Wolverhampton Wanderers   M         Hee Chan   5.5   \n",
              "355  526                 West Ham   M            Bowen   7.0   \n",
              "312  429         Newcastle United   M           Tonali   5.5   \n",
              "63   415         Newcastle United   F             Isak   7.7   \n",
              "451  611                  Chelsea   D           Disasi   5.1   \n",
              "372  565  Wolverhampton Wanderers   M           Lemina   5.0   \n",
              "214  249                  Everton   M       A.Doucoure   5.5   \n",
              "157  130                 Brighton   M           Enciso   5.4   \n",
              "97    19                  Arsenal   M             Saka   8.6   \n",
              "51   326               Luton Town   F           Morris   5.5   \n",
              "285  372        Manchester United   M           Antony   6.9   \n",
              "\n",
              "     selected_by_percent  goals_scored  assists  bps  ict_index  points  \\\n",
              "145                 23.2             3        0   57       24.6      23   \n",
              "247                 27.8             1        1   30       20.2      10   \n",
              "162                 10.6             3        0   73       27.8      24   \n",
              "245                 13.3             2        0   48       17.5      15   \n",
              "286                 22.4             0        0   26       17.1       4   \n",
              "13                  15.4             2        1   69       22.1      20   \n",
              "164                 44.7             1        2   66       26.2      17   \n",
              "33                   2.1             1        0   27       22.9       9   \n",
              "188                  4.7             0        0   27       18.2       1   \n",
              "16                  22.1             1        0   25       13.8       7   \n",
              "273                 13.6             0        1   41       23.1      12   \n",
              "29                  18.9             0        0    0       10.3       2   \n",
              "94                  23.6             1        0   43       14.0      13   \n",
              "108                  2.4             1        0   40       12.8       8   \n",
              "204                 12.4             0        0   35       20.0       5   \n",
              "59                  91.3             2        0   57       20.2      15   \n",
              "229                  0.2             1        0   25        9.3       8   \n",
              "390                  7.8             0        0   28        5.8       5   \n",
              "419                 63.9             1        2   67       26.8      18   \n",
              "38                   1.1             0        0   -5       12.0       3   \n",
              "360                  1.6             1        0   34       15.4       7   \n",
              "314                  4.1             1        1   35       10.5      11   \n",
              "111                  0.6             1        0   37       10.0      12   \n",
              "159                  2.8             0        0   30       16.8       3   \n",
              "2                    6.8             1        1   32       12.1      13   \n",
              "240                  3.4             1        1   36       18.7      13   \n",
              "443                 28.7             0        1   37       12.2       8   \n",
              "117                  8.8             1        0   34       17.7      10   \n",
              "347                 12.6             0        2   43       24.3      12   \n",
              "15                   5.4             1        0   24        8.8       6   \n",
              "58                   9.0             1        1   58       23.0      12   \n",
              "281                 10.4             1        1   61       18.4      16   \n",
              "350                  2.2             1        0   40       15.4      11   \n",
              "104                  2.0             1        1   40        9.8      15   \n",
              "87                   0.6             0        0   16       14.0       4   \n",
              "295                 42.9             0        0    1       12.2       5   \n",
              "519                  6.8             1        0   55       12.3      15   \n",
              "10                   2.9             1        1   33       19.2      12   \n",
              "573                  4.2             1        0   41       10.5      13   \n",
              "369                  0.1             1        0   21        9.8       6   \n",
              "355                  4.7             1        0   33       17.2      11   \n",
              "312                  3.4             1        0   31        9.9       7   \n",
              "63                  28.4             2        0   58       13.6      15   \n",
              "451                  5.8             1        0   33       10.3      11   \n",
              "372                  0.0             0        0   20        4.7       3   \n",
              "214                  0.2             0        0    9        9.2       4   \n",
              "157                  3.2             0        2   30        9.4       8   \n",
              "97                  66.6             1        0   52       21.0      13   \n",
              "51                   1.4             1        0   28        9.1       8   \n",
              "285                  1.1             0        0    9        9.4       4   \n",
              "\n",
              "     points_per_game  minutes  xPallgw    gw3    gw4    gw2    gw5    gw6  \\\n",
              "145             11.5      180     18.5  20.15  21.80  20.15  16.85  21.80   \n",
              "247              5.0      161     10.8  10.80  11.68  13.44  13.44  12.56   \n",
              "162             12.0      163      9.6  10.36   9.60  11.88   9.60  11.88   \n",
              "245              7.5      161      9.0   9.00   9.70  11.10  11.10  10.40   \n",
              "286              2.0      180      9.4  11.62   8.66  10.14   9.40  10.88   \n",
              "13              10.0      149      8.9   9.59  10.28   9.59   8.21  10.28   \n",
              "164              8.5      170      8.6   9.26   8.60  10.58   8.60  10.58   \n",
              "33               4.5      180      9.0   8.30  10.40   8.30   8.30   9.70   \n",
              "188              0.5      180      7.8   9.54   9.54   8.38   8.96   7.80   \n",
              "16               3.5      120      8.0   8.60   8.00   9.80   8.00   9.80   \n",
              "273              6.0      180      6.9   9.35   8.37   7.39   8.37   9.35   \n",
              "29               1.0      180      7.4   9.02   9.02   7.94   8.48   7.40   \n",
              "94               6.5      179      7.2   8.24   7.72   7.72   8.76   8.24   \n",
              "108              4.0      153      7.6   8.72   7.04   8.72   8.16   7.60   \n",
              "204              2.5      180      8.0   7.40   9.20   7.40   7.40   8.60   \n",
              "59               7.5      169      6.3   8.45   7.59   6.73   7.59   8.45   \n",
              "229              4.0      112      8.4   7.12   6.48   7.76   9.68   7.76   \n",
              "390              2.5      176      7.2   8.24   6.68   8.24   7.72   7.20   \n",
              "419              9.0      180      6.9   7.39   6.90   8.37   6.90   8.37   \n",
              "38               1.5      110      8.1   8.71   8.71   6.88   6.27   6.88   \n",
              "360              3.5      180      7.9   7.31   9.08   7.31   6.13   6.72   \n",
              "314              5.5       56      6.9   6.90   6.90   6.41   7.39   8.86   \n",
              "111              6.0      153      6.7   7.64   6.23   7.64   7.17   6.70   \n",
              "159              1.5      170      6.4   6.84   6.40   7.72   6.40   7.72   \n",
              "2                6.5      150      6.2   7.04   6.62   6.62   7.46   7.04   \n",
              "240              6.5      140      6.2   6.20   6.62   7.46   7.46   7.04   \n",
              "443              4.0      149      6.1   7.33   7.33   6.51   6.92   6.10   \n",
              "117              5.0      149      6.4   7.28   5.96   7.28   6.84   6.40   \n",
              "347              6.0      180      6.4   7.28   6.84   5.96   7.28   5.52   \n",
              "15               3.0       35      6.0   6.40   6.00   7.20   6.00   7.20   \n",
              "58               6.0      180      5.2   6.80   6.16   5.52   6.16   6.80   \n",
              "281              8.0      180      5.2   6.80   6.16   5.52   6.16   6.80   \n",
              "350              5.5       90      6.1   6.92   6.51   5.69   6.92   5.28   \n",
              "104              7.5      107      5.7   6.44   5.33   6.44   6.07   5.70   \n",
              "87               2.0      166      6.8   6.32   5.84   5.36   5.36   6.80   \n",
              "295              2.5      171      5.5   6.55   5.15   5.85   5.50   6.20   \n",
              "519              7.5      180      5.5   6.55   5.15   5.85   5.50   6.20   \n",
              "10               6.0      180      7.0   6.00   6.00   5.50   6.00   5.50   \n",
              "573              6.5      103      5.6   6.32   5.96   5.24   6.32   4.88   \n",
              "369              3.0       62      6.5   6.05   5.60   5.15   5.15   6.50   \n",
              "355              5.5      180      6.1   5.69   6.92   5.69   4.87   5.28   \n",
              "312              3.5      156      5.3   5.30   5.30   4.97   5.63   6.62   \n",
              "63               7.5      132      5.2   5.20   5.20   4.88   5.52   6.48   \n",
              "451              5.5      180      4.9   5.77   5.77   5.19   5.48   4.90   \n",
              "372              1.5      180      6.0   5.60   5.20   4.80   4.80   6.00   \n",
              "214              2.0      180      5.6   5.96   5.96   4.88   4.52   4.88   \n",
              "157              4.0       68      4.7   4.97   4.70   5.51   4.70   5.51   \n",
              "97               6.5      178      4.6   5.12   4.86   4.86   5.38   5.12   \n",
              "51               8.0       90      6.5   5.15   5.60   2.00   5.60   6.50   \n",
              "285              2.0      141      4.6   5.38   4.34   4.86   4.60   5.12   \n",
              "\n",
              "     5GW Total  \n",
              "145     100.75  \n",
              "247      61.92  \n",
              "162      53.32  \n",
              "245      51.30  \n",
              "286      50.70  \n",
              "13       47.95  \n",
              "164      47.62  \n",
              "33       45.00  \n",
              "188      44.22  \n",
              "16       44.20  \n",
              "273      42.83  \n",
              "29       41.86  \n",
              "94       40.68  \n",
              "108      40.24  \n",
              "204      40.00  \n",
              "59       38.81  \n",
              "229      38.80  \n",
              "390      38.08  \n",
              "419      37.93  \n",
              "38       37.45  \n",
              "360      36.55  \n",
              "314      36.46  \n",
              "111      35.38  \n",
              "159      35.08  \n",
              "2        34.78  \n",
              "240      34.78  \n",
              "443      34.19  \n",
              "117      33.76  \n",
              "347      32.88  \n",
              "15       32.80  \n",
              "58       31.44  \n",
              "281      31.44  \n",
              "350      31.32  \n",
              "104      29.98  \n",
              "87       29.68  \n",
              "295      29.25  \n",
              "519      29.25  \n",
              "10       29.00  \n",
              "573      28.72  \n",
              "369      28.45  \n",
              "355      28.45  \n",
              "312      27.82  \n",
              "63       27.28  \n",
              "451      27.11  \n",
              "372      26.40  \n",
              "214      26.20  \n",
              "157      25.39  \n",
              "97       25.34  \n",
              "51       24.85  \n",
              "285      24.30  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-dd326810-489e-40e6-a02f-ee45a9c23ae5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>team</th>\n",
              "      <th>pos</th>\n",
              "      <th>name</th>\n",
              "      <th>cost</th>\n",
              "      <th>selected_by_percent</th>\n",
              "      <th>goals_scored</th>\n",
              "      <th>assists</th>\n",
              "      <th>bps</th>\n",
              "      <th>ict_index</th>\n",
              "      <th>points</th>\n",
              "      <th>points_per_game</th>\n",
              "      <th>minutes</th>\n",
              "      <th>xPallgw</th>\n",
              "      <th>gw3</th>\n",
              "      <th>gw4</th>\n",
              "      <th>gw2</th>\n",
              "      <th>gw5</th>\n",
              "      <th>gw6</th>\n",
              "      <th>5GW Total</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>145</th>\n",
              "      <td>108</td>\n",
              "      <td>Brentford</td>\n",
              "      <td>M</td>\n",
              "      <td>Mbeumo</td>\n",
              "      <td>6.7</td>\n",
              "      <td>23.2</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>57</td>\n",
              "      <td>24.6</td>\n",
              "      <td>23</td>\n",
              "      <td>11.5</td>\n",
              "      <td>180</td>\n",
              "      <td>18.5</td>\n",
              "      <td>20.15</td>\n",
              "      <td>21.80</td>\n",
              "      <td>20.15</td>\n",
              "      <td>16.85</td>\n",
              "      <td>21.80</td>\n",
              "      <td>100.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>247</th>\n",
              "      <td>308</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>M</td>\n",
              "      <td>Salah</td>\n",
              "      <td>12.5</td>\n",
              "      <td>27.8</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>30</td>\n",
              "      <td>20.2</td>\n",
              "      <td>10</td>\n",
              "      <td>5.0</td>\n",
              "      <td>161</td>\n",
              "      <td>10.8</td>\n",
              "      <td>10.80</td>\n",
              "      <td>11.68</td>\n",
              "      <td>13.44</td>\n",
              "      <td>13.44</td>\n",
              "      <td>12.56</td>\n",
              "      <td>61.92</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>162</th>\n",
              "      <td>140</td>\n",
              "      <td>Brighton</td>\n",
              "      <td>M</td>\n",
              "      <td>March</td>\n",
              "      <td>6.6</td>\n",
              "      <td>10.6</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>73</td>\n",
              "      <td>27.8</td>\n",
              "      <td>24</td>\n",
              "      <td>12.0</td>\n",
              "      <td>163</td>\n",
              "      <td>9.6</td>\n",
              "      <td>10.36</td>\n",
              "      <td>9.60</td>\n",
              "      <td>11.88</td>\n",
              "      <td>9.60</td>\n",
              "      <td>11.88</td>\n",
              "      <td>53.32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>245</th>\n",
              "      <td>303</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>M</td>\n",
              "      <td>Luis D√≠az</td>\n",
              "      <td>7.7</td>\n",
              "      <td>13.3</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>48</td>\n",
              "      <td>17.5</td>\n",
              "      <td>15</td>\n",
              "      <td>7.5</td>\n",
              "      <td>161</td>\n",
              "      <td>9.0</td>\n",
              "      <td>9.00</td>\n",
              "      <td>9.70</td>\n",
              "      <td>11.10</td>\n",
              "      <td>11.10</td>\n",
              "      <td>10.40</td>\n",
              "      <td>51.30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>286</th>\n",
              "      <td>373</td>\n",
              "      <td>Manchester United</td>\n",
              "      <td>M</td>\n",
              "      <td>B.Fernandes</td>\n",
              "      <td>8.5</td>\n",
              "      <td>22.4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>26</td>\n",
              "      <td>17.1</td>\n",
              "      <td>4</td>\n",
              "      <td>2.0</td>\n",
              "      <td>180</td>\n",
              "      <td>9.4</td>\n",
              "      <td>11.62</td>\n",
              "      <td>8.66</td>\n",
              "      <td>10.14</td>\n",
              "      <td>9.40</td>\n",
              "      <td>10.88</td>\n",
              "      <td>50.70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>119</td>\n",
              "      <td>Brentford</td>\n",
              "      <td>F</td>\n",
              "      <td>Wissa</td>\n",
              "      <td>6.1</td>\n",
              "      <td>15.4</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>69</td>\n",
              "      <td>22.1</td>\n",
              "      <td>20</td>\n",
              "      <td>10.0</td>\n",
              "      <td>149</td>\n",
              "      <td>8.9</td>\n",
              "      <td>9.59</td>\n",
              "      <td>10.28</td>\n",
              "      <td>9.59</td>\n",
              "      <td>8.21</td>\n",
              "      <td>10.28</td>\n",
              "      <td>47.95</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>164</th>\n",
              "      <td>143</td>\n",
              "      <td>Brighton</td>\n",
              "      <td>M</td>\n",
              "      <td>Mitoma</td>\n",
              "      <td>6.6</td>\n",
              "      <td>44.7</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>66</td>\n",
              "      <td>26.2</td>\n",
              "      <td>17</td>\n",
              "      <td>8.5</td>\n",
              "      <td>170</td>\n",
              "      <td>8.6</td>\n",
              "      <td>9.26</td>\n",
              "      <td>8.60</td>\n",
              "      <td>10.58</td>\n",
              "      <td>8.60</td>\n",
              "      <td>10.58</td>\n",
              "      <td>47.62</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>225</td>\n",
              "      <td>Crystal Palace</td>\n",
              "      <td>F</td>\n",
              "      <td>Edouard</td>\n",
              "      <td>5.5</td>\n",
              "      <td>2.1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>27</td>\n",
              "      <td>22.9</td>\n",
              "      <td>9</td>\n",
              "      <td>4.5</td>\n",
              "      <td>180</td>\n",
              "      <td>9.0</td>\n",
              "      <td>8.30</td>\n",
              "      <td>10.40</td>\n",
              "      <td>8.30</td>\n",
              "      <td>8.30</td>\n",
              "      <td>9.70</td>\n",
              "      <td>45.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>188</th>\n",
              "      <td>199</td>\n",
              "      <td>Chelsea</td>\n",
              "      <td>M</td>\n",
              "      <td>Enzo</td>\n",
              "      <td>5.0</td>\n",
              "      <td>4.7</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>27</td>\n",
              "      <td>18.2</td>\n",
              "      <td>1</td>\n",
              "      <td>0.5</td>\n",
              "      <td>180</td>\n",
              "      <td>7.8</td>\n",
              "      <td>9.54</td>\n",
              "      <td>9.54</td>\n",
              "      <td>8.38</td>\n",
              "      <td>8.96</td>\n",
              "      <td>7.80</td>\n",
              "      <td>44.22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>135</td>\n",
              "      <td>Brighton</td>\n",
              "      <td>F</td>\n",
              "      <td>Jo√£o Pedro</td>\n",
              "      <td>5.6</td>\n",
              "      <td>22.1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>25</td>\n",
              "      <td>13.8</td>\n",
              "      <td>7</td>\n",
              "      <td>3.5</td>\n",
              "      <td>120</td>\n",
              "      <td>8.0</td>\n",
              "      <td>8.60</td>\n",
              "      <td>8.00</td>\n",
              "      <td>9.80</td>\n",
              "      <td>8.00</td>\n",
              "      <td>9.80</td>\n",
              "      <td>44.20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>273</th>\n",
              "      <td>353</td>\n",
              "      <td>Manchester City</td>\n",
              "      <td>M</td>\n",
              "      <td>Foden</td>\n",
              "      <td>7.6</td>\n",
              "      <td>13.6</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>41</td>\n",
              "      <td>23.1</td>\n",
              "      <td>12</td>\n",
              "      <td>6.0</td>\n",
              "      <td>180</td>\n",
              "      <td>6.9</td>\n",
              "      <td>9.35</td>\n",
              "      <td>8.37</td>\n",
              "      <td>7.39</td>\n",
              "      <td>8.37</td>\n",
              "      <td>9.35</td>\n",
              "      <td>42.83</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>211</td>\n",
              "      <td>Chelsea</td>\n",
              "      <td>F</td>\n",
              "      <td>N.Jackson</td>\n",
              "      <td>7.1</td>\n",
              "      <td>18.9</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>10.3</td>\n",
              "      <td>2</td>\n",
              "      <td>1.0</td>\n",
              "      <td>180</td>\n",
              "      <td>7.4</td>\n",
              "      <td>9.02</td>\n",
              "      <td>9.02</td>\n",
              "      <td>7.94</td>\n",
              "      <td>8.48</td>\n",
              "      <td>7.40</td>\n",
              "      <td>41.86</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>94</th>\n",
              "      <td>14</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>M</td>\n",
              "      <td>√òdegaard</td>\n",
              "      <td>8.5</td>\n",
              "      <td>23.6</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>43</td>\n",
              "      <td>14.0</td>\n",
              "      <td>13</td>\n",
              "      <td>6.5</td>\n",
              "      <td>179</td>\n",
              "      <td>7.2</td>\n",
              "      <td>8.24</td>\n",
              "      <td>7.72</td>\n",
              "      <td>7.72</td>\n",
              "      <td>8.76</td>\n",
              "      <td>8.24</td>\n",
              "      <td>40.68</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>108</th>\n",
              "      <td>43</td>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>M</td>\n",
              "      <td>Douglas Luiz</td>\n",
              "      <td>5.5</td>\n",
              "      <td>2.4</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>40</td>\n",
              "      <td>12.8</td>\n",
              "      <td>8</td>\n",
              "      <td>4.0</td>\n",
              "      <td>153</td>\n",
              "      <td>7.6</td>\n",
              "      <td>8.72</td>\n",
              "      <td>7.04</td>\n",
              "      <td>8.72</td>\n",
              "      <td>8.16</td>\n",
              "      <td>7.60</td>\n",
              "      <td>40.24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>204</th>\n",
              "      <td>226</td>\n",
              "      <td>Crystal Palace</td>\n",
              "      <td>M</td>\n",
              "      <td>Eze</td>\n",
              "      <td>6.4</td>\n",
              "      <td>12.4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>35</td>\n",
              "      <td>20.0</td>\n",
              "      <td>5</td>\n",
              "      <td>2.5</td>\n",
              "      <td>180</td>\n",
              "      <td>8.0</td>\n",
              "      <td>7.40</td>\n",
              "      <td>9.20</td>\n",
              "      <td>7.40</td>\n",
              "      <td>7.40</td>\n",
              "      <td>8.60</td>\n",
              "      <td>40.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59</th>\n",
              "      <td>355</td>\n",
              "      <td>Manchester City</td>\n",
              "      <td>F</td>\n",
              "      <td>Haaland</td>\n",
              "      <td>14.0</td>\n",
              "      <td>91.3</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>57</td>\n",
              "      <td>20.2</td>\n",
              "      <td>15</td>\n",
              "      <td>7.5</td>\n",
              "      <td>169</td>\n",
              "      <td>6.3</td>\n",
              "      <td>8.45</td>\n",
              "      <td>7.59</td>\n",
              "      <td>6.73</td>\n",
              "      <td>7.59</td>\n",
              "      <td>8.45</td>\n",
              "      <td>38.81</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>229</th>\n",
              "      <td>270</td>\n",
              "      <td>Fulham</td>\n",
              "      <td>M</td>\n",
              "      <td>De Cordova-Reid</td>\n",
              "      <td>5.5</td>\n",
              "      <td>0.2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>25</td>\n",
              "      <td>9.3</td>\n",
              "      <td>8</td>\n",
              "      <td>4.0</td>\n",
              "      <td>112</td>\n",
              "      <td>8.4</td>\n",
              "      <td>7.12</td>\n",
              "      <td>6.48</td>\n",
              "      <td>7.76</td>\n",
              "      <td>9.68</td>\n",
              "      <td>7.76</td>\n",
              "      <td>38.80</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>390</th>\n",
              "      <td>36</td>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>D</td>\n",
              "      <td>Cash</td>\n",
              "      <td>4.5</td>\n",
              "      <td>7.8</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>28</td>\n",
              "      <td>5.8</td>\n",
              "      <td>5</td>\n",
              "      <td>2.5</td>\n",
              "      <td>176</td>\n",
              "      <td>7.2</td>\n",
              "      <td>8.24</td>\n",
              "      <td>6.68</td>\n",
              "      <td>8.24</td>\n",
              "      <td>7.72</td>\n",
              "      <td>7.20</td>\n",
              "      <td>38.08</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>419</th>\n",
              "      <td>131</td>\n",
              "      <td>Brighton</td>\n",
              "      <td>D</td>\n",
              "      <td>Estupi√±an</td>\n",
              "      <td>5.2</td>\n",
              "      <td>63.9</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>67</td>\n",
              "      <td>26.8</td>\n",
              "      <td>18</td>\n",
              "      <td>9.0</td>\n",
              "      <td>180</td>\n",
              "      <td>6.9</td>\n",
              "      <td>7.39</td>\n",
              "      <td>6.90</td>\n",
              "      <td>8.37</td>\n",
              "      <td>6.90</td>\n",
              "      <td>8.37</td>\n",
              "      <td>37.93</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>258</td>\n",
              "      <td>Everton</td>\n",
              "      <td>F</td>\n",
              "      <td>Maupay</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1.1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>-5</td>\n",
              "      <td>12.0</td>\n",
              "      <td>3</td>\n",
              "      <td>1.5</td>\n",
              "      <td>110</td>\n",
              "      <td>8.1</td>\n",
              "      <td>8.71</td>\n",
              "      <td>8.71</td>\n",
              "      <td>6.88</td>\n",
              "      <td>6.27</td>\n",
              "      <td>6.88</td>\n",
              "      <td>37.45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>360</th>\n",
              "      <td>539</td>\n",
              "      <td>West Ham</td>\n",
              "      <td>M</td>\n",
              "      <td>L.Paquet√°</td>\n",
              "      <td>6.0</td>\n",
              "      <td>1.6</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>34</td>\n",
              "      <td>15.4</td>\n",
              "      <td>7</td>\n",
              "      <td>3.5</td>\n",
              "      <td>180</td>\n",
              "      <td>7.9</td>\n",
              "      <td>7.31</td>\n",
              "      <td>9.08</td>\n",
              "      <td>7.31</td>\n",
              "      <td>6.13</td>\n",
              "      <td>6.72</td>\n",
              "      <td>36.55</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>314</th>\n",
              "      <td>603</td>\n",
              "      <td>Newcastle United</td>\n",
              "      <td>M</td>\n",
              "      <td>Barnes</td>\n",
              "      <td>6.5</td>\n",
              "      <td>4.1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>35</td>\n",
              "      <td>10.5</td>\n",
              "      <td>11</td>\n",
              "      <td>5.5</td>\n",
              "      <td>56</td>\n",
              "      <td>6.9</td>\n",
              "      <td>6.90</td>\n",
              "      <td>6.90</td>\n",
              "      <td>6.41</td>\n",
              "      <td>7.39</td>\n",
              "      <td>8.86</td>\n",
              "      <td>36.46</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>111</th>\n",
              "      <td>50</td>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>M</td>\n",
              "      <td>McGinn</td>\n",
              "      <td>5.5</td>\n",
              "      <td>0.6</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>37</td>\n",
              "      <td>10.0</td>\n",
              "      <td>12</td>\n",
              "      <td>6.0</td>\n",
              "      <td>153</td>\n",
              "      <td>6.7</td>\n",
              "      <td>7.64</td>\n",
              "      <td>6.23</td>\n",
              "      <td>7.64</td>\n",
              "      <td>7.17</td>\n",
              "      <td>6.70</td>\n",
              "      <td>35.38</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>159</th>\n",
              "      <td>134</td>\n",
              "      <td>Brighton</td>\n",
              "      <td>M</td>\n",
              "      <td>Gross</td>\n",
              "      <td>6.4</td>\n",
              "      <td>2.8</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>30</td>\n",
              "      <td>16.8</td>\n",
              "      <td>3</td>\n",
              "      <td>1.5</td>\n",
              "      <td>170</td>\n",
              "      <td>6.4</td>\n",
              "      <td>6.84</td>\n",
              "      <td>6.40</td>\n",
              "      <td>7.72</td>\n",
              "      <td>6.40</td>\n",
              "      <td>7.72</td>\n",
              "      <td>35.08</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>13</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>F</td>\n",
              "      <td>Nketiah</td>\n",
              "      <td>5.6</td>\n",
              "      <td>6.8</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>32</td>\n",
              "      <td>12.1</td>\n",
              "      <td>13</td>\n",
              "      <td>6.5</td>\n",
              "      <td>150</td>\n",
              "      <td>6.2</td>\n",
              "      <td>7.04</td>\n",
              "      <td>6.62</td>\n",
              "      <td>6.62</td>\n",
              "      <td>7.46</td>\n",
              "      <td>7.04</td>\n",
              "      <td>34.78</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>240</th>\n",
              "      <td>294</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>M</td>\n",
              "      <td>Diogo J.</td>\n",
              "      <td>8.0</td>\n",
              "      <td>3.4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>36</td>\n",
              "      <td>18.7</td>\n",
              "      <td>13</td>\n",
              "      <td>6.5</td>\n",
              "      <td>140</td>\n",
              "      <td>6.2</td>\n",
              "      <td>6.20</td>\n",
              "      <td>6.62</td>\n",
              "      <td>7.46</td>\n",
              "      <td>7.46</td>\n",
              "      <td>7.04</td>\n",
              "      <td>34.78</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>443</th>\n",
              "      <td>195</td>\n",
              "      <td>Chelsea</td>\n",
              "      <td>D</td>\n",
              "      <td>Chilwell</td>\n",
              "      <td>5.7</td>\n",
              "      <td>28.7</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>37</td>\n",
              "      <td>12.2</td>\n",
              "      <td>8</td>\n",
              "      <td>4.0</td>\n",
              "      <td>149</td>\n",
              "      <td>6.1</td>\n",
              "      <td>7.33</td>\n",
              "      <td>7.33</td>\n",
              "      <td>6.51</td>\n",
              "      <td>6.92</td>\n",
              "      <td>6.10</td>\n",
              "      <td>34.19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>117</th>\n",
              "      <td>599</td>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>M</td>\n",
              "      <td>Diaby</td>\n",
              "      <td>6.6</td>\n",
              "      <td>8.8</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>34</td>\n",
              "      <td>17.7</td>\n",
              "      <td>10</td>\n",
              "      <td>5.0</td>\n",
              "      <td>149</td>\n",
              "      <td>6.4</td>\n",
              "      <td>7.28</td>\n",
              "      <td>5.96</td>\n",
              "      <td>7.28</td>\n",
              "      <td>6.84</td>\n",
              "      <td>6.40</td>\n",
              "      <td>33.76</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>347</th>\n",
              "      <td>504</td>\n",
              "      <td>Tottenham</td>\n",
              "      <td>M</td>\n",
              "      <td>Maddison</td>\n",
              "      <td>7.6</td>\n",
              "      <td>12.6</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>43</td>\n",
              "      <td>24.3</td>\n",
              "      <td>12</td>\n",
              "      <td>6.0</td>\n",
              "      <td>180</td>\n",
              "      <td>6.4</td>\n",
              "      <td>7.28</td>\n",
              "      <td>6.84</td>\n",
              "      <td>5.96</td>\n",
              "      <td>7.28</td>\n",
              "      <td>5.52</td>\n",
              "      <td>32.88</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>132</td>\n",
              "      <td>Brighton</td>\n",
              "      <td>F</td>\n",
              "      <td>Ferguson</td>\n",
              "      <td>6.0</td>\n",
              "      <td>5.4</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>24</td>\n",
              "      <td>8.8</td>\n",
              "      <td>6</td>\n",
              "      <td>3.0</td>\n",
              "      <td>35</td>\n",
              "      <td>6.0</td>\n",
              "      <td>6.40</td>\n",
              "      <td>6.00</td>\n",
              "      <td>7.20</td>\n",
              "      <td>6.00</td>\n",
              "      <td>7.20</td>\n",
              "      <td>32.80</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>58</th>\n",
              "      <td>343</td>\n",
              "      <td>Manchester City</td>\n",
              "      <td>F</td>\n",
              "      <td>J.Alvarez</td>\n",
              "      <td>6.6</td>\n",
              "      <td>9.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>58</td>\n",
              "      <td>23.0</td>\n",
              "      <td>12</td>\n",
              "      <td>6.0</td>\n",
              "      <td>180</td>\n",
              "      <td>5.2</td>\n",
              "      <td>6.80</td>\n",
              "      <td>6.16</td>\n",
              "      <td>5.52</td>\n",
              "      <td>6.16</td>\n",
              "      <td>6.80</td>\n",
              "      <td>31.44</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>281</th>\n",
              "      <td>365</td>\n",
              "      <td>Manchester City</td>\n",
              "      <td>M</td>\n",
              "      <td>Rodrigo</td>\n",
              "      <td>5.6</td>\n",
              "      <td>10.4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>61</td>\n",
              "      <td>18.4</td>\n",
              "      <td>16</td>\n",
              "      <td>8.0</td>\n",
              "      <td>180</td>\n",
              "      <td>5.2</td>\n",
              "      <td>6.80</td>\n",
              "      <td>6.16</td>\n",
              "      <td>5.52</td>\n",
              "      <td>6.16</td>\n",
              "      <td>6.80</td>\n",
              "      <td>31.44</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>350</th>\n",
              "      <td>513</td>\n",
              "      <td>Tottenham</td>\n",
              "      <td>M</td>\n",
              "      <td>Sarr</td>\n",
              "      <td>4.5</td>\n",
              "      <td>2.2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>40</td>\n",
              "      <td>15.4</td>\n",
              "      <td>11</td>\n",
              "      <td>5.5</td>\n",
              "      <td>90</td>\n",
              "      <td>6.1</td>\n",
              "      <td>6.92</td>\n",
              "      <td>6.51</td>\n",
              "      <td>5.69</td>\n",
              "      <td>6.92</td>\n",
              "      <td>5.28</td>\n",
              "      <td>31.32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>104</th>\n",
              "      <td>34</td>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>M</td>\n",
              "      <td>Bailey</td>\n",
              "      <td>5.5</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>40</td>\n",
              "      <td>9.8</td>\n",
              "      <td>15</td>\n",
              "      <td>7.5</td>\n",
              "      <td>107</td>\n",
              "      <td>5.7</td>\n",
              "      <td>6.44</td>\n",
              "      <td>5.33</td>\n",
              "      <td>6.44</td>\n",
              "      <td>6.07</td>\n",
              "      <td>5.70</td>\n",
              "      <td>29.98</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>87</th>\n",
              "      <td>590</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>F</td>\n",
              "      <td>Cunha</td>\n",
              "      <td>5.5</td>\n",
              "      <td>0.6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>16</td>\n",
              "      <td>14.0</td>\n",
              "      <td>4</td>\n",
              "      <td>2.0</td>\n",
              "      <td>166</td>\n",
              "      <td>6.8</td>\n",
              "      <td>6.32</td>\n",
              "      <td>5.84</td>\n",
              "      <td>5.36</td>\n",
              "      <td>5.36</td>\n",
              "      <td>6.80</td>\n",
              "      <td>29.68</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>295</th>\n",
              "      <td>396</td>\n",
              "      <td>Manchester United</td>\n",
              "      <td>M</td>\n",
              "      <td>Rashford</td>\n",
              "      <td>9.0</td>\n",
              "      <td>42.9</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>12.2</td>\n",
              "      <td>5</td>\n",
              "      <td>2.5</td>\n",
              "      <td>171</td>\n",
              "      <td>5.5</td>\n",
              "      <td>6.55</td>\n",
              "      <td>5.15</td>\n",
              "      <td>5.85</td>\n",
              "      <td>5.50</td>\n",
              "      <td>6.20</td>\n",
              "      <td>29.25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>519</th>\n",
              "      <td>395</td>\n",
              "      <td>Manchester United</td>\n",
              "      <td>D</td>\n",
              "      <td>R.Varane</td>\n",
              "      <td>5.1</td>\n",
              "      <td>6.8</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>55</td>\n",
              "      <td>12.3</td>\n",
              "      <td>15</td>\n",
              "      <td>7.5</td>\n",
              "      <td>180</td>\n",
              "      <td>5.5</td>\n",
              "      <td>6.55</td>\n",
              "      <td>5.15</td>\n",
              "      <td>5.85</td>\n",
              "      <td>5.50</td>\n",
              "      <td>6.20</td>\n",
              "      <td>29.25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>85</td>\n",
              "      <td>Bournemouth</td>\n",
              "      <td>F</td>\n",
              "      <td>Solanke</td>\n",
              "      <td>6.5</td>\n",
              "      <td>2.9</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>33</td>\n",
              "      <td>19.2</td>\n",
              "      <td>12</td>\n",
              "      <td>6.0</td>\n",
              "      <td>180</td>\n",
              "      <td>7.0</td>\n",
              "      <td>6.00</td>\n",
              "      <td>6.00</td>\n",
              "      <td>5.50</td>\n",
              "      <td>6.00</td>\n",
              "      <td>5.50</td>\n",
              "      <td>29.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>573</th>\n",
              "      <td>511</td>\n",
              "      <td>Tottenham</td>\n",
              "      <td>D</td>\n",
              "      <td>Romero</td>\n",
              "      <td>4.5</td>\n",
              "      <td>4.2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>41</td>\n",
              "      <td>10.5</td>\n",
              "      <td>13</td>\n",
              "      <td>6.5</td>\n",
              "      <td>103</td>\n",
              "      <td>5.6</td>\n",
              "      <td>6.32</td>\n",
              "      <td>5.96</td>\n",
              "      <td>5.24</td>\n",
              "      <td>6.32</td>\n",
              "      <td>4.88</td>\n",
              "      <td>28.72</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>369</th>\n",
              "      <td>557</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>M</td>\n",
              "      <td>Hee Chan</td>\n",
              "      <td>5.5</td>\n",
              "      <td>0.1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>21</td>\n",
              "      <td>9.8</td>\n",
              "      <td>6</td>\n",
              "      <td>3.0</td>\n",
              "      <td>62</td>\n",
              "      <td>6.5</td>\n",
              "      <td>6.05</td>\n",
              "      <td>5.60</td>\n",
              "      <td>5.15</td>\n",
              "      <td>5.15</td>\n",
              "      <td>6.50</td>\n",
              "      <td>28.45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>355</th>\n",
              "      <td>526</td>\n",
              "      <td>West Ham</td>\n",
              "      <td>M</td>\n",
              "      <td>Bowen</td>\n",
              "      <td>7.0</td>\n",
              "      <td>4.7</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>33</td>\n",
              "      <td>17.2</td>\n",
              "      <td>11</td>\n",
              "      <td>5.5</td>\n",
              "      <td>180</td>\n",
              "      <td>6.1</td>\n",
              "      <td>5.69</td>\n",
              "      <td>6.92</td>\n",
              "      <td>5.69</td>\n",
              "      <td>4.87</td>\n",
              "      <td>5.28</td>\n",
              "      <td>28.45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>312</th>\n",
              "      <td>429</td>\n",
              "      <td>Newcastle United</td>\n",
              "      <td>M</td>\n",
              "      <td>Tonali</td>\n",
              "      <td>5.5</td>\n",
              "      <td>3.4</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>31</td>\n",
              "      <td>9.9</td>\n",
              "      <td>7</td>\n",
              "      <td>3.5</td>\n",
              "      <td>156</td>\n",
              "      <td>5.3</td>\n",
              "      <td>5.30</td>\n",
              "      <td>5.30</td>\n",
              "      <td>4.97</td>\n",
              "      <td>5.63</td>\n",
              "      <td>6.62</td>\n",
              "      <td>27.82</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>63</th>\n",
              "      <td>415</td>\n",
              "      <td>Newcastle United</td>\n",
              "      <td>F</td>\n",
              "      <td>Isak</td>\n",
              "      <td>7.7</td>\n",
              "      <td>28.4</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>58</td>\n",
              "      <td>13.6</td>\n",
              "      <td>15</td>\n",
              "      <td>7.5</td>\n",
              "      <td>132</td>\n",
              "      <td>5.2</td>\n",
              "      <td>5.20</td>\n",
              "      <td>5.20</td>\n",
              "      <td>4.88</td>\n",
              "      <td>5.52</td>\n",
              "      <td>6.48</td>\n",
              "      <td>27.28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>451</th>\n",
              "      <td>611</td>\n",
              "      <td>Chelsea</td>\n",
              "      <td>D</td>\n",
              "      <td>Disasi</td>\n",
              "      <td>5.1</td>\n",
              "      <td>5.8</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>33</td>\n",
              "      <td>10.3</td>\n",
              "      <td>11</td>\n",
              "      <td>5.5</td>\n",
              "      <td>180</td>\n",
              "      <td>4.9</td>\n",
              "      <td>5.77</td>\n",
              "      <td>5.77</td>\n",
              "      <td>5.19</td>\n",
              "      <td>5.48</td>\n",
              "      <td>4.90</td>\n",
              "      <td>27.11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>372</th>\n",
              "      <td>565</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>M</td>\n",
              "      <td>Lemina</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>20</td>\n",
              "      <td>4.7</td>\n",
              "      <td>3</td>\n",
              "      <td>1.5</td>\n",
              "      <td>180</td>\n",
              "      <td>6.0</td>\n",
              "      <td>5.60</td>\n",
              "      <td>5.20</td>\n",
              "      <td>4.80</td>\n",
              "      <td>4.80</td>\n",
              "      <td>6.00</td>\n",
              "      <td>26.40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>214</th>\n",
              "      <td>249</td>\n",
              "      <td>Everton</td>\n",
              "      <td>M</td>\n",
              "      <td>A.Doucoure</td>\n",
              "      <td>5.5</td>\n",
              "      <td>0.2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>9.2</td>\n",
              "      <td>4</td>\n",
              "      <td>2.0</td>\n",
              "      <td>180</td>\n",
              "      <td>5.6</td>\n",
              "      <td>5.96</td>\n",
              "      <td>5.96</td>\n",
              "      <td>4.88</td>\n",
              "      <td>4.52</td>\n",
              "      <td>4.88</td>\n",
              "      <td>26.20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>157</th>\n",
              "      <td>130</td>\n",
              "      <td>Brighton</td>\n",
              "      <td>M</td>\n",
              "      <td>Enciso</td>\n",
              "      <td>5.4</td>\n",
              "      <td>3.2</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>30</td>\n",
              "      <td>9.4</td>\n",
              "      <td>8</td>\n",
              "      <td>4.0</td>\n",
              "      <td>68</td>\n",
              "      <td>4.7</td>\n",
              "      <td>4.97</td>\n",
              "      <td>4.70</td>\n",
              "      <td>5.51</td>\n",
              "      <td>4.70</td>\n",
              "      <td>5.51</td>\n",
              "      <td>25.39</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>97</th>\n",
              "      <td>19</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>M</td>\n",
              "      <td>Saka</td>\n",
              "      <td>8.6</td>\n",
              "      <td>66.6</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>52</td>\n",
              "      <td>21.0</td>\n",
              "      <td>13</td>\n",
              "      <td>6.5</td>\n",
              "      <td>178</td>\n",
              "      <td>4.6</td>\n",
              "      <td>5.12</td>\n",
              "      <td>4.86</td>\n",
              "      <td>4.86</td>\n",
              "      <td>5.38</td>\n",
              "      <td>5.12</td>\n",
              "      <td>25.34</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>51</th>\n",
              "      <td>326</td>\n",
              "      <td>Luton Town</td>\n",
              "      <td>F</td>\n",
              "      <td>Morris</td>\n",
              "      <td>5.5</td>\n",
              "      <td>1.4</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>28</td>\n",
              "      <td>9.1</td>\n",
              "      <td>8</td>\n",
              "      <td>8.0</td>\n",
              "      <td>90</td>\n",
              "      <td>6.5</td>\n",
              "      <td>5.15</td>\n",
              "      <td>5.60</td>\n",
              "      <td>2.00</td>\n",
              "      <td>5.60</td>\n",
              "      <td>6.50</td>\n",
              "      <td>24.85</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>285</th>\n",
              "      <td>372</td>\n",
              "      <td>Manchester United</td>\n",
              "      <td>M</td>\n",
              "      <td>Antony</td>\n",
              "      <td>6.9</td>\n",
              "      <td>1.1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>9.4</td>\n",
              "      <td>4</td>\n",
              "      <td>2.0</td>\n",
              "      <td>141</td>\n",
              "      <td>4.6</td>\n",
              "      <td>5.38</td>\n",
              "      <td>4.34</td>\n",
              "      <td>4.86</td>\n",
              "      <td>4.60</td>\n",
              "      <td>5.12</td>\n",
              "      <td>24.30</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dd326810-489e-40e6-a02f-ee45a9c23ae5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-dd326810-489e-40e6-a02f-ee45a9c23ae5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-dd326810-489e-40e6-a02f-ee45a9c23ae5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-347433e2-8964-456b-a864-ba4b9f1b02f7\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-347433e2-8964-456b-a864-ba4b9f1b02f7')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-347433e2-8964-456b-a864-ba4b9f1b02f7 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import string"
      ],
      "metadata": {
        "id": "JSw3vk9PJvps"
      },
      "execution_count": 49,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "fig, ax = plt.subplots(1, figsize=(10,8))\n",
        "ax.scatter(x=Top50['cost'],y=Top50['5GW Total'],c='DarkBlue')\n",
        "# set labels\n",
        "ax.set_xlabel('cost')\n",
        "ax.set_ylabel('5GW Total')\n",
        "\n",
        "# annotate points in axis\n",
        "for idx, row in Top50.iterrows():\n",
        "    ax.annotate(row['name'], (row['cost'], row['5GW Total']) )\n",
        "# force matplotlib to draw the graph\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 696
        },
        "id": "435FV-_ocWOi",
        "outputId": "00dee193-b507-410c-c3b6-387e480b6b0b"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rawdfgw228x"
      ],
      "metadata": {
        "id": "mQ58vdHpUd8O",
        "outputId": "5dcb4dac-ce02-42df-86d2-c1d784dec9c0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        }
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      id                     team pos     name  cost  selected_by_percent  \\\n",
              "0      1                  Arsenal   F  Balogun   4.5                  0.6   \n",
              "1      8                  Arsenal   F  G.Jesus   7.9                  1.2   \n",
              "2     13                  Arsenal   F  Nketiah   5.6                  6.8   \n",
              "3     33              Aston Villa   F   Archer   4.5                  5.2   \n",
              "4     39              Aston Villa   F    Davis   5.0                  0.3   \n",
              "..   ...                      ...  ..      ...   ...                  ...   \n",
              "673  647                 West Ham   G    Anang   4.0                  0.0   \n",
              "674  546  Wolverhampton Wanderers   G  Bentley   4.0                  0.4   \n",
              "675  564  Wolverhampton Wanderers   G     King   4.0                  0.8   \n",
              "676  569  Wolverhampton Wanderers   G  Jos√© S√°   5.0                  1.1   \n",
              "677  571  Wolverhampton Wanderers   G   ≈†arkiƒá   4.0                  0.5   \n",
              "\n",
              "     goals_scored  assists  bps  ict_index  points  points_per_game  minutes  \\\n",
              "0               0        0    0        0.0       0              0.0        0   \n",
              "1               0        0    0        0.0       0              0.0        0   \n",
              "2               1        1   32       12.1      13              6.5      150   \n",
              "3               0        0   -1        0.3       0              0.0        5   \n",
              "4               0        0    0        0.0       0              0.0        0   \n",
              "..            ...      ...  ...        ...     ...              ...      ...   \n",
              "673             0        0    0        0.0       0              0.0        0   \n",
              "674             0        0    0        0.0       0              0.0        0   \n",
              "675             0        0    0        0.0       0              0.0        0   \n",
              "676             0        0   31        4.6       3              1.5      180   \n",
              "677             0        0    0        0.0       0              0.0        0   \n",
              "\n",
              "     xPallgw   gw3   gw4   gw2   gw5   gw6  5GW Total  \n",
              "0        2.0  2.00  2.00  2.00  2.00  2.00      10.00  \n",
              "1        2.0  2.00  2.00  2.00  2.00  2.00      10.00  \n",
              "2        6.2  7.04  6.62  6.62  7.46  7.04      34.78  \n",
              "3        2.0  2.00  2.00  2.00  2.00  2.00      10.00  \n",
              "4        2.0  2.00  2.00  2.00  2.00  2.00      10.00  \n",
              "..       ...   ...   ...   ...   ...   ...        ...  \n",
              "673      2.0  2.00  2.00  2.00  2.00  2.00      10.00  \n",
              "674      2.0  2.00  2.00  2.00  2.00  2.00      10.00  \n",
              "675      2.0  2.00  2.00  2.00  2.00  2.00      10.00  \n",
              "676      2.0  2.00  2.00  2.00  2.00  2.00      10.00  \n",
              "677      2.0  2.00  2.00  2.00  2.00  2.00      10.00  \n",
              "\n",
              "[661 rows x 20 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6c4f5e4f-5149-42ce-ab58-d9684e3226c9\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>team</th>\n",
              "      <th>pos</th>\n",
              "      <th>name</th>\n",
              "      <th>cost</th>\n",
              "      <th>selected_by_percent</th>\n",
              "      <th>goals_scored</th>\n",
              "      <th>assists</th>\n",
              "      <th>bps</th>\n",
              "      <th>ict_index</th>\n",
              "      <th>points</th>\n",
              "      <th>points_per_game</th>\n",
              "      <th>minutes</th>\n",
              "      <th>xPallgw</th>\n",
              "      <th>gw3</th>\n",
              "      <th>gw4</th>\n",
              "      <th>gw2</th>\n",
              "      <th>gw5</th>\n",
              "      <th>gw6</th>\n",
              "      <th>5GW Total</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>F</td>\n",
              "      <td>Balogun</td>\n",
              "      <td>4.5</td>\n",
              "      <td>0.6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>10.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>8</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>F</td>\n",
              "      <td>G.Jesus</td>\n",
              "      <td>7.9</td>\n",
              "      <td>1.2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>10.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>13</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>F</td>\n",
              "      <td>Nketiah</td>\n",
              "      <td>5.6</td>\n",
              "      <td>6.8</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>32</td>\n",
              "      <td>12.1</td>\n",
              "      <td>13</td>\n",
              "      <td>6.5</td>\n",
              "      <td>150</td>\n",
              "      <td>6.2</td>\n",
              "      <td>7.04</td>\n",
              "      <td>6.62</td>\n",
              "      <td>6.62</td>\n",
              "      <td>7.46</td>\n",
              "      <td>7.04</td>\n",
              "      <td>34.78</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>33</td>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>F</td>\n",
              "      <td>Archer</td>\n",
              "      <td>4.5</td>\n",
              "      <td>5.2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>-1</td>\n",
              "      <td>0.3</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>5</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>10.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>39</td>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>F</td>\n",
              "      <td>Davis</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>10.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>673</th>\n",
              "      <td>647</td>\n",
              "      <td>West Ham</td>\n",
              "      <td>G</td>\n",
              "      <td>Anang</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>10.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>674</th>\n",
              "      <td>546</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>G</td>\n",
              "      <td>Bentley</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>10.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>675</th>\n",
              "      <td>564</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>G</td>\n",
              "      <td>King</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>10.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>676</th>\n",
              "      <td>569</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>G</td>\n",
              "      <td>Jos√© S√°</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1.1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>31</td>\n",
              "      <td>4.6</td>\n",
              "      <td>3</td>\n",
              "      <td>1.5</td>\n",
              "      <td>180</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>10.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>677</th>\n",
              "      <td>571</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>G</td>\n",
              "      <td>≈†arkiƒá</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>10.00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>661 rows √ó 20 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6c4f5e4f-5149-42ce-ab58-d9684e3226c9')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6c4f5e4f-5149-42ce-ab58-d9684e3226c9 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6c4f5e4f-5149-42ce-ab58-d9684e3226c9');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-71527ce7-09d4-46de-98fb-9131fa93886b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-71527ce7-09d4-46de-98fb-9131fa93886b')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-71527ce7-09d4-46de-98fb-9131fa93886b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "apiplayers = master"
      ],
      "metadata": {
        "id": "3bvpGcxtVMyS"
      },
      "execution_count": 57,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Mostselected = apiplayers.nlargest(20, 'selected_by_percent')\n",
        "Mostselected"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 677
        },
        "id": "O-wNiNtosYZU",
        "outputId": "2b90f72e-6b33-46a8-d8a3-02eab72ee1cc"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      id               team pos         name  cost  selected_by_percent  \\\n",
              "420  355    Manchester City   F      Haaland  14.0                 91.3   \n",
              "18    19            Arsenal   M         Saka   8.6                 66.6   \n",
              "142  131           Brighton   D    Estupi√±an   5.2                 63.9   \n",
              "154  143           Brighton   M       Mitoma   6.6                 44.7   \n",
              "463  396  Manchester United   M     Rashford   9.0                 42.9   \n",
              "502  430   Newcastle United   D     Trippier   6.5                 31.7   \n",
              "469  597  Manchester United   G        Onana   5.0                 29.3   \n",
              "219  195            Chelsea   D     Chilwell   5.7                 28.7   \n",
              "487  415   Newcastle United   F         Isak   7.7                 28.4   \n",
              "357  308          Liverpool   M        Salah  12.5                 27.8   \n",
              "19    20            Arsenal   D       Saliba   5.2                 27.7   \n",
              "61    60        Aston Villa   F      Watkins   8.0                 24.6   \n",
              "623  524           West Ham   G       Areola   4.0                 24.6   \n",
              "13    14            Arsenal   M     √òdegaard   8.5                 23.6   \n",
              "120  108          Brentford   M       Mbeumo   6.7                 23.2   \n",
              "4      5            Arsenal   D      Gabriel   4.9                 22.5   \n",
              "441  373  Manchester United   M  B.Fernandes   8.5                 22.4   \n",
              "146  135           Brighton   F   Jo√£o Pedro   5.6                 22.1   \n",
              "465  398  Manchester United   D         Shaw   5.5                 19.8   \n",
              "477  405   Newcastle United   D       Botman   4.5                 19.2   \n",
              "\n",
              "     expected_goals  expected_assists  goals_scored  assists  bps  ict_index  \\\n",
              "420            1.03              0.07             2        0   57       20.2   \n",
              "18             0.35              0.28             1        0   52       21.0   \n",
              "142            0.36              0.91             1        2   67       26.8   \n",
              "154            0.55              1.29             1        2   66       26.2   \n",
              "463            0.66              0.07             0        0    1       12.2   \n",
              "502            0.00              0.33             0        0   41       12.4   \n",
              "469            0.00              0.00             0        0   51        8.8   \n",
              "219            0.32              0.72             0        1   37       12.2   \n",
              "487            0.76              0.04             2        0   58       13.6   \n",
              "357            1.51              0.42             1        1   30       20.2   \n",
              "19             0.00              0.04             0        1   51        7.8   \n",
              "61             0.38              0.15             0        2   29       13.7   \n",
              "623            0.00              0.00             0        0   47        5.9   \n",
              "13             0.94              0.18             1        0   43       14.0   \n",
              "120            3.14              0.27             3        0   57       24.6   \n",
              "4              0.00              0.00             0        0    7        1.3   \n",
              "441            0.79              1.15             0        0   26       17.1   \n",
              "146            1.46              0.04             1        0   25       13.8   \n",
              "465            0.00              0.51             0        0   48       15.5   \n",
              "477            0.07              0.25             0        1   42        6.6   \n",
              "\n",
              "     points  points_per_game  minutes  apppoint  assistvalue  \n",
              "420      15              7.5      169         2            3  \n",
              "18       13              6.5      178         2            3  \n",
              "142      18              9.0      180         2            3  \n",
              "154      17              8.5      170         2            3  \n",
              "463       5              2.5      171         2            3  \n",
              "502       4              2.0      180         2            3  \n",
              "469      11              5.5      180         2            3  \n",
              "219       8              4.0      149         2            3  \n",
              "487      15              7.5      132         2            3  \n",
              "357      10              5.0      161         2            3  \n",
              "19       13              6.5      180         2            3  \n",
              "61       10              5.0      163         2            3  \n",
              "623      13              6.5      180         2            3  \n",
              "13       13              6.5      179         2            3  \n",
              "120      23             11.5      180         2            3  \n",
              "4         2              1.0       24         2            3  \n",
              "441       4              2.0      180         2            3  \n",
              "146       7              3.5      120         2            3  \n",
              "465       6              3.0      180         2            3  \n",
              "477       7              3.5      180         2            3  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d6d068b7-c298-4570-ab5d-88d712833c0d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>team</th>\n",
              "      <th>pos</th>\n",
              "      <th>name</th>\n",
              "      <th>cost</th>\n",
              "      <th>selected_by_percent</th>\n",
              "      <th>expected_goals</th>\n",
              "      <th>expected_assists</th>\n",
              "      <th>goals_scored</th>\n",
              "      <th>assists</th>\n",
              "      <th>bps</th>\n",
              "      <th>ict_index</th>\n",
              "      <th>points</th>\n",
              "      <th>points_per_game</th>\n",
              "      <th>minutes</th>\n",
              "      <th>apppoint</th>\n",
              "      <th>assistvalue</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>420</th>\n",
              "      <td>355</td>\n",
              "      <td>Manchester City</td>\n",
              "      <td>F</td>\n",
              "      <td>Haaland</td>\n",
              "      <td>14.0</td>\n",
              "      <td>91.3</td>\n",
              "      <td>1.03</td>\n",
              "      <td>0.07</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>57</td>\n",
              "      <td>20.2</td>\n",
              "      <td>15</td>\n",
              "      <td>7.5</td>\n",
              "      <td>169</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>19</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>M</td>\n",
              "      <td>Saka</td>\n",
              "      <td>8.6</td>\n",
              "      <td>66.6</td>\n",
              "      <td>0.35</td>\n",
              "      <td>0.28</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>52</td>\n",
              "      <td>21.0</td>\n",
              "      <td>13</td>\n",
              "      <td>6.5</td>\n",
              "      <td>178</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>142</th>\n",
              "      <td>131</td>\n",
              "      <td>Brighton</td>\n",
              "      <td>D</td>\n",
              "      <td>Estupi√±an</td>\n",
              "      <td>5.2</td>\n",
              "      <td>63.9</td>\n",
              "      <td>0.36</td>\n",
              "      <td>0.91</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>67</td>\n",
              "      <td>26.8</td>\n",
              "      <td>18</td>\n",
              "      <td>9.0</td>\n",
              "      <td>180</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>154</th>\n",
              "      <td>143</td>\n",
              "      <td>Brighton</td>\n",
              "      <td>M</td>\n",
              "      <td>Mitoma</td>\n",
              "      <td>6.6</td>\n",
              "      <td>44.7</td>\n",
              "      <td>0.55</td>\n",
              "      <td>1.29</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>66</td>\n",
              "      <td>26.2</td>\n",
              "      <td>17</td>\n",
              "      <td>8.5</td>\n",
              "      <td>170</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>463</th>\n",
              "      <td>396</td>\n",
              "      <td>Manchester United</td>\n",
              "      <td>M</td>\n",
              "      <td>Rashford</td>\n",
              "      <td>9.0</td>\n",
              "      <td>42.9</td>\n",
              "      <td>0.66</td>\n",
              "      <td>0.07</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>12.2</td>\n",
              "      <td>5</td>\n",
              "      <td>2.5</td>\n",
              "      <td>171</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>502</th>\n",
              "      <td>430</td>\n",
              "      <td>Newcastle United</td>\n",
              "      <td>D</td>\n",
              "      <td>Trippier</td>\n",
              "      <td>6.5</td>\n",
              "      <td>31.7</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.33</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>41</td>\n",
              "      <td>12.4</td>\n",
              "      <td>4</td>\n",
              "      <td>2.0</td>\n",
              "      <td>180</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>469</th>\n",
              "      <td>597</td>\n",
              "      <td>Manchester United</td>\n",
              "      <td>G</td>\n",
              "      <td>Onana</td>\n",
              "      <td>5.0</td>\n",
              "      <td>29.3</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>51</td>\n",
              "      <td>8.8</td>\n",
              "      <td>11</td>\n",
              "      <td>5.5</td>\n",
              "      <td>180</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>219</th>\n",
              "      <td>195</td>\n",
              "      <td>Chelsea</td>\n",
              "      <td>D</td>\n",
              "      <td>Chilwell</td>\n",
              "      <td>5.7</td>\n",
              "      <td>28.7</td>\n",
              "      <td>0.32</td>\n",
              "      <td>0.72</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>37</td>\n",
              "      <td>12.2</td>\n",
              "      <td>8</td>\n",
              "      <td>4.0</td>\n",
              "      <td>149</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>487</th>\n",
              "      <td>415</td>\n",
              "      <td>Newcastle United</td>\n",
              "      <td>F</td>\n",
              "      <td>Isak</td>\n",
              "      <td>7.7</td>\n",
              "      <td>28.4</td>\n",
              "      <td>0.76</td>\n",
              "      <td>0.04</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>58</td>\n",
              "      <td>13.6</td>\n",
              "      <td>15</td>\n",
              "      <td>7.5</td>\n",
              "      <td>132</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>357</th>\n",
              "      <td>308</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>M</td>\n",
              "      <td>Salah</td>\n",
              "      <td>12.5</td>\n",
              "      <td>27.8</td>\n",
              "      <td>1.51</td>\n",
              "      <td>0.42</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>30</td>\n",
              "      <td>20.2</td>\n",
              "      <td>10</td>\n",
              "      <td>5.0</td>\n",
              "      <td>161</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>20</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>D</td>\n",
              "      <td>Saliba</td>\n",
              "      <td>5.2</td>\n",
              "      <td>27.7</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.04</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>51</td>\n",
              "      <td>7.8</td>\n",
              "      <td>13</td>\n",
              "      <td>6.5</td>\n",
              "      <td>180</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>61</th>\n",
              "      <td>60</td>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>F</td>\n",
              "      <td>Watkins</td>\n",
              "      <td>8.0</td>\n",
              "      <td>24.6</td>\n",
              "      <td>0.38</td>\n",
              "      <td>0.15</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>29</td>\n",
              "      <td>13.7</td>\n",
              "      <td>10</td>\n",
              "      <td>5.0</td>\n",
              "      <td>163</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>623</th>\n",
              "      <td>524</td>\n",
              "      <td>West Ham</td>\n",
              "      <td>G</td>\n",
              "      <td>Areola</td>\n",
              "      <td>4.0</td>\n",
              "      <td>24.6</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>47</td>\n",
              "      <td>5.9</td>\n",
              "      <td>13</td>\n",
              "      <td>6.5</td>\n",
              "      <td>180</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>14</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>M</td>\n",
              "      <td>√òdegaard</td>\n",
              "      <td>8.5</td>\n",
              "      <td>23.6</td>\n",
              "      <td>0.94</td>\n",
              "      <td>0.18</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>43</td>\n",
              "      <td>14.0</td>\n",
              "      <td>13</td>\n",
              "      <td>6.5</td>\n",
              "      <td>179</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>120</th>\n",
              "      <td>108</td>\n",
              "      <td>Brentford</td>\n",
              "      <td>M</td>\n",
              "      <td>Mbeumo</td>\n",
              "      <td>6.7</td>\n",
              "      <td>23.2</td>\n",
              "      <td>3.14</td>\n",
              "      <td>0.27</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>57</td>\n",
              "      <td>24.6</td>\n",
              "      <td>23</td>\n",
              "      <td>11.5</td>\n",
              "      <td>180</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>D</td>\n",
              "      <td>Gabriel</td>\n",
              "      <td>4.9</td>\n",
              "      <td>22.5</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>1.3</td>\n",
              "      <td>2</td>\n",
              "      <td>1.0</td>\n",
              "      <td>24</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>441</th>\n",
              "      <td>373</td>\n",
              "      <td>Manchester United</td>\n",
              "      <td>M</td>\n",
              "      <td>B.Fernandes</td>\n",
              "      <td>8.5</td>\n",
              "      <td>22.4</td>\n",
              "      <td>0.79</td>\n",
              "      <td>1.15</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>26</td>\n",
              "      <td>17.1</td>\n",
              "      <td>4</td>\n",
              "      <td>2.0</td>\n",
              "      <td>180</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>146</th>\n",
              "      <td>135</td>\n",
              "      <td>Brighton</td>\n",
              "      <td>F</td>\n",
              "      <td>Jo√£o Pedro</td>\n",
              "      <td>5.6</td>\n",
              "      <td>22.1</td>\n",
              "      <td>1.46</td>\n",
              "      <td>0.04</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>25</td>\n",
              "      <td>13.8</td>\n",
              "      <td>7</td>\n",
              "      <td>3.5</td>\n",
              "      <td>120</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>465</th>\n",
              "      <td>398</td>\n",
              "      <td>Manchester United</td>\n",
              "      <td>D</td>\n",
              "      <td>Shaw</td>\n",
              "      <td>5.5</td>\n",
              "      <td>19.8</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.51</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>48</td>\n",
              "      <td>15.5</td>\n",
              "      <td>6</td>\n",
              "      <td>3.0</td>\n",
              "      <td>180</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>477</th>\n",
              "      <td>405</td>\n",
              "      <td>Newcastle United</td>\n",
              "      <td>D</td>\n",
              "      <td>Botman</td>\n",
              "      <td>4.5</td>\n",
              "      <td>19.2</td>\n",
              "      <td>0.07</td>\n",
              "      <td>0.25</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>42</td>\n",
              "      <td>6.6</td>\n",
              "      <td>7</td>\n",
              "      <td>3.5</td>\n",
              "      <td>180</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d6d068b7-c298-4570-ab5d-88d712833c0d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d6d068b7-c298-4570-ab5d-88d712833c0d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d6d068b7-c298-4570-ab5d-88d712833c0d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-07205054-73f0-4b49-a02b-492f0c2c566e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-07205054-73f0-4b49-a02b-492f0c2c566e')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-07205054-73f0-4b49-a02b-492f0c2c566e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 58
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ax = sns.barplot(x='selected_by_percent', y='name', data=Mostselected, hue='pos', dodge=False)\n",
        "sns.set(rc={'figure.figsize':(11.7,8.27)})\n",
        "plt.title(\"Most Selected\")\n",
        "plt.xticks(rotation=90)\n",
        "plt.ylabel(\"selected_by_percent\")\n",
        "plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0)\n",
        "plt.gcf().set_size_inches(30,10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 601
        },
        "id": "8PBz92opthgG",
        "outputId": "a2772491-8193-42e0-921c-40f5114e8169"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 3000x1000 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAClQAAANbCAYAAAA+euANAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAC9oUlEQVR4nOzdd5SV1aE+/ucwwABOQYoiBhhBVBTQK2pUVFAkKoq9YQt2Y4vtxmBHE7uCRo1XjWKisQaNV2MlGBWiRoOoCVHhWkgsKAojgpRhfn/4dX6ZgA0HBjmfz1pnrTn73e/ez3vIyh9ZT/ZbqK2trQ0AAAAAAAAAAABAEWvS2AEAAAAAAAAAAAAAGptCJQAAAAAAAAAAAFD0FCoBAAAAAAAAAACAoqdQCQAAAAAAAAAAABQ9hUoAAAAAAAAAAACg6ClUAgAAAAAAAAAAAEVPoRIAAAAAAAAAAAAoegqVAAAAAAAAAAAAQNFTqAQAAAAAAAAAAACKnkIlAAAAAPCFhg4dmqqqqsaOsUQKhULOOeecxo4BAAAAAHxHKFQCAAAAwGKMGjUqhUIhhUIhTz311CLXa2tr06lTpxQKhey0005LJcPbb7+dc845Jy+88MLXvuell17KnnvumS5duqRFixZZffXVM3DgwPziF79YKhm/rd/+9rcZOXJkY8cAAAAAAFCoBAAAAIAv06JFi/z2t79dZPxPf/pT/vnPf6a0tHSp7f32229n+PDhX7tQOX78+Gy00UaZOHFiDj/88Fx11VU57LDD0qRJk1xxxRVLLee3oVAJAAAAACwvmjZ2AAAAAABYng0aNCh33XVXrrzyyjRt+v//z2m//e1v06dPn3zwwQeNmK6+n//856msrMxf/vKXtG7dut61adOmNU4oAAAAAIDvCCdUAgAAAMCXGDJkSKZPn55HH320bmzevHm5++67s99++y32nk8++SQnn3xyOnXqlNLS0qy99tq59NJLU1tbW2/eo48+mi222CKtW7dOWVlZ1l577Zx22mlJkscffzwbb7xxkuTggw+ue/34qFGjvjDrlClTst566y1SpkySVVZZZZGxW265JX369EnLli3Tpk2b7Lvvvpk6depX/SRZuHBhRo4cmfXWWy8tWrTIqquumiOPPDIfffTRInMffPDB9OvXL+Xl5amoqMjGG29cd+Jn//7988ADD+TNN9+se76qqqq6e+fOnZuzzz47a665ZkpLS9OpU6f85Cc/ydy5c+vtMXfu3Jx44olp3759ysvLs/POO+ef//znVz4HAAAAAMC/c0IlAAAAAHyJqqqqbLbZZrntttuyww47JPmsJDhz5szsu+++ufLKK+vNr62tzc4775yxY8fm0EMPzQYbbJCHH344//3f/51//etfGTFiRJLkb3/7W3baaaf07t075557bkpLSzN58uSMGzcuSdKjR4+ce+65Oeuss3LEEUdkyy23TJJsvvnmX5i1S5cu+fOf/5yXX345PXv2/NLn+vnPf54zzzwze++9dw477LC8//77+cUvfpGtttoqEyZMWGwp83NHHnlkRo0alYMPPjjHH398Xn/99Vx11VWZMGFCxo0bl2bNmiVJRo0alUMOOSTrrbdehg0bltatW2fChAl56KGHst9+++X000/PzJkz889//rPudykrK0vyWWlz5513zlNPPZUjjjgiPXr0yEsvvZQRI0bk1Vdfzb333luX57DDDsstt9yS/fbbL5tvvnn++Mc/Zscdd/zS5wcAAAAA+E8KlQAAAADwFfbbb78MGzYsc+bMScuWLXPrrbemX79+6dix4yJz77vvvvzxj3/Mz372s5x++ulJkmOOOSZ77bVXrrjiihx77LHp1q1bHn300cybNy8PPvhg2rVrt8g6q666anbYYYecddZZ2WyzzXLAAQd8Zc5TTjklO+ywQzbYYINssskm2XLLLTNgwIBsvfXWdSXHJHnzzTdz9tln52c/+1ndiZhJsvvuu+e//uu/cs0119Qb/3dPPfVUbrjhhtx66631Tujceuuts/322+euu+7Kfvvtl5kzZ+b444/PJptskscffzwtWrSom/v5SZ0DBw7M6quvno8++miR5/vtb3+bxx57LH/605+yxRZb1I337NkzRx11VMaPH5/NN988EydOzC233JKjjz46V199dd3vvf/+++fFF1/8yt8MAAAAAOBzXvkNAAAAAF9h7733zpw5c3L//ffn448/zv333/+Fr/v+wx/+kJKSkhx//PH1xk8++eTU1tbmwQcfTJK6EyB///vfZ+HChQ2Sc+DAgfnzn/+cnXfeORMnTszFF1+c7bbbLquvvnruu+++unmjR4/OwoULs/fee+eDDz6o+3To0CHdu3fP2LFjv3CPu+66K5WVlRk4cGC9e/v06ZOysrK6ex999NF8/PHH+elPf1qvTJkkhULhK5/lrrvuSo8ePbLOOuvU22ebbbZJkrp9/vCHPyTJIr/3CSec8NU/GAAAAADAv3FCJQAAAAB8hfbt22fbbbfNb3/728yePTs1NTXZc889Fzv3zTffTMeOHVNeXl5vvEePHnXXk2SfffbJDTfckMMOOyw//elPM2DAgOy+++7Zc88906TJkv//oDfeeOOMHj068+bNy8SJE3PPPfdkxIgR2XPPPfPCCy9k3XXXzWuvvZba2tp07959sWv8+2mW/+m1117LzJkzs8oqqyz2+rRp05IkU6ZMSZKvfPX4l+0zadKktG/f/kv3efPNN9OkSZN069at3vW11157ifYFAAAAAIqXQiUAAAAAfA377bdfDj/88Lz77rvZYYcd6k6YXFItW7bME088kbFjx+aBBx7IQw89lDvuuCPbbLNNHnnkkZSUlHyr9Zs3b56NN944G2+8cdZaa60cfPDBueuuu3L22Wdn4cKFKRQKefDBBxe7T1lZ2Reuu3Dhwqyyyiq59dZbF3v9iwqQ39TChQvTq1evXH755Yu93qlTpwbZBwAAAADgcwqVAAAAAPA17LbbbjnyyCPz9NNP54477vjCeV26dMljjz2Wjz/+uN4plf/4xz/qrn+uSZMmGTBgQAYMGJDLL788559/fk4//fSMHTs222677dd6NfbXsdFGGyVJ3nnnnSRJt27dUltbmzXWWCNrrbXWN1qrW7dueeyxx9K3b9+0bNnyS+clycsvv5w111zzC+d90TN269YtEydOzIABA770d+jSpUsWLlyYKVOm1DuV8pVXXvmqRwEAAAAAqGfJ3x0EAAAAAEWkrKwsv/zlL3POOedk8ODBXzhv0KBBqampyVVXXVVvfMSIESkUCtlhhx2SJB9++OEi926wwQZJkrlz5yZJVlpppSTJjBkzvlbGsWPHpra2dpHxP/zhD0n+/9dg77777ikpKcnw4cMXmV9bW5vp06d/4R577713ampqct555y1ybcGCBXVZf/CDH6S8vDwXXHBBPv3000X2+NxKK62UmTNnLnaff/3rX7n++usXuTZnzpx88sknSVL3e1555ZX15owcOfILnwEAAAAAYHGcUAkAAAAAX9MPf/jDr5wzePDgbL311jn99NPzxhtvZP31188jjzyS3//+9znhhBPqTm4899xz88QTT2THHXdMly5dMm3atFxzzTX53ve+ly222CLJZ6c0tm7dOtdee23Ky8uz0kor5fvf/37WWGONxe593HHHZfbs2dltt92yzjrrZN68eRk/fnzuuOOOVFVV5eCDD65b92c/+1mGDRuWN954I7vuumvKy8vz+uuv55577skRRxyRU045ZbF79OvXL0ceeWQuuOCCvPDCC/nBD36QZs2a5bXXXstdd92VK664InvuuWcqKioyYsSIHHbYYdl4442z3377ZeWVV87EiRMze/bs3HzzzUmSPn365I477shJJ52UjTfeOGVlZRk8eHAOPPDA3HnnnTnqqKMyduzY9O3bNzU1NfnHP/6RO++8Mw8//HA22mijbLDBBhkyZEiuueaazJw5M5tvvnnGjBmTyZMnf+N/XwAAAACguClUAgAAAEADatKkSe67776cddZZueOOO3LTTTelqqoql1xySU4++eS6eTvvvHPeeOON3Hjjjfnggw/Srl279OvXL8OHD09lZWWSpFmzZrn55pszbNiwHHXUUVmwYEFuuummLyxUXnrppbnrrrvyhz/8Idddd13mzZuXzp075+ijj84ZZ5yR1q1b18396U9/mrXWWisjRozI8OHDkySdOnXKD37wg+y8885f+ozXXntt+vTpk//5n//JaaedlqZNm6aqqioHHHBA+vbtWzfv0EMPzSqrrJILL7ww5513Xpo1a5Z11lknJ554Yt2co48+Oi+88EJuuummjBgxIl26dMngwYPTpEmT3HvvvRkxYkR+/etf55577kmrVq3StWvX/PjHP673qvIbb7wx7du3z6233pp7770322yzTR544IF06tTp6//DAQAAAABFr1C7uHcAAQAAAAAAAAAAABSRJo0dAAAAAAAAAAAAAKCxKVQCAAAAAAAAAAAARU+hEgAAAAAAAAAAACh6CpUAAAAAAAAAAABA0VOoBAAAAAAAAAAAAIqeQiUAAAAAAAAAAABQ9Jo2dgCWrYULF+btt99OeXl5CoVCY8cBAAAAAAAAAAAaWW1tbT7++ON07NgxTZo4o29FU1NTk/nz5zd2jEbTrFmzlJSUfK25CpVF5u23306nTp0aOwYAAAAAAAAAALCcmTp1ar73ve81dgwaSG1tbd55553MmDEjtbWNnabxFApJ69ats9pqq33lIYQKlUWmvLw8yWf/5VdRUdHIaQAAAAAAAAAAgMZWXV2dTp061XWLWDG88847+eijGSkvb53S0tIkxfhG49rMnTs3H300I0nSsWPHL52tUFlkPm/YVlRUKFQCAAAAAAAAAAB1vur0Pr47ampqMmPGZ2XK8vLKxo7TqJo3b5EkmTFjRlZdddUvff23F94DAAAAAAAAAADACmT+/Pmprc3/O5mS0tLS1NZ+9rt8GSdUFqmtzrgtJaUtGzsGAAAAAAAAAAArmOcvOaixIwB1nDr6ma/3OzihEgAAAAAAAAAAACh6TqgEAAAAAAAAAAAAlkvXX39tfvWr6xYZ79q1W37727sadC+FSgAAAAAAAAAAACgS257/u0bZ97HT9ljie0tLW+Tqq69dZKyhKVQCAAAAAAAAAAAAy60mTQrp2bP30t9nqe8AAAAAAAAAAAAAsJxzQiUAAAAAAAAAAACwXFuwYEG97yUlJSkUCg26h0IlAAAAAAAAAAAAsNyaM2dOtthik3pjZ599XnbYYccG3UehEgAAAAAAAAAAAFhulZa2yLXX3lBvrGPH1Rt8H4VKAAAAAAAAAAAAYLnVpEkhPXqsu/T3Weo7FKE33ngjhUIhL7zwwlLfq6qqKiNHjlzq+wAAAAAAAAAAAMCKrKgKlUOHDs2uu+66yPjjjz+eQqGQGTNmLPNMAAAAAAAAAAAAQOMrqkIlAAAAAAAAAAAAwOIoVP6H6dOnZ8iQIVl99dXTqlWr9OrVK7fddlu9OQ899FC22GKLtG7dOm3bts1OO+2UKVOmfOGaNTU1OfTQQ7PGGmukZcuWWXvttXPFFVfUm/P56ZmXXnppVltttbRt2zbHHHNM5s+fXzdn2rRpGTx4cFq2bJk11lgjt956a8M+PAAAAAAAAAAAABSppo0dYHnz6aefpk+fPjn11FNTUVGRBx54IAceeGC6deuWTTbZJEnyySef5KSTTkrv3r0za9asnHXWWdltt93ywgsvpEmTRTuqCxcuzPe+973cddddadu2bcaPH58jjjgiq622Wvbee++6eWPHjs1qq62WsWPHZvLkydlnn32ywQYb5PDDD0/yWeny7bffztixY9OsWbMcf/zxmTZt2pc+z9y5czN37ty679XV1Q3xMwEAAAAAAAAAAPAd9NhpezR2hG/k8MOPyuGHH7VM9iq6QuX999+fsrKyemM1NTV1f6+++uo55ZRT6r4fd9xxefjhh3PnnXfWFSr32KP+f6BuvPHGtG/fPn//+9/Ts2fPRfZs1qxZhg8fXvd9jTXWyJ///Ofceeed9QqVK6+8cq666qqUlJRknXXWyY477pgxY8bk8MMPz6uvvpoHH3wwzz77bDbeeOMkya9+9av06NHjS5/3ggsuqLc3AAAAAAAAAAAAsKiie+X31ltvnRdeeKHe54Ybbqi7XlNTk/POOy+9evVKmzZtUlZWlocffjhvvfVW3ZzXXnstQ4YMSdeuXVNRUZGqqqokqTfnP1199dXp06dP2rdvn7Kyslx33XWLzF9vvfVSUlJS93211VarO4Fy0qRJadq0afr06VN3fZ111knr1q2/9HmHDRuWmTNn1n2mTp36lb8RAAAAAAAAAAAAFJuiO6FypZVWypprrllv7J///Gfd35dcckmuuOKKjBw5Mr169cpKK62UE044IfPmzaubM3jw4HTp0iXXX399OnbsmIULF6Znz5715vy722+/Paecckouu+yybLbZZikvL88ll1ySZ555pt68Zs2a1fteKBSycOHCb/W8paWlKS0t/VZrAAAAAAAAAAAAwIqu6AqVX2XcuHHZZZddcsABByRJFi5cmFdffTXrrrtukmT69Ol55ZVXcv3112fLLbdMkjz11FNfuebmm2+eo48+um5sypQp3yjXOuuskwULFuT555+ve+X3K6+8khkzZnyjdQAAAAAAAAAAAIBFFd0rv79K9+7d8+ijj2b8+PGZNGlSjjzyyLz33nt111deeeW0bds21113XSZPnpw//vGPOemkk75yzeeeey4PP/xwXn311Zx55pn5y1/+8o1yrb322tl+++1z5JFH5plnnsnzzz+fww47LC1btlyi5wQAAAAAAAAAAAD+fwqV/+GMM87IhhtumO222y79+/dPhw4dsuuuu9Zdb9KkSW6//fY8//zz6dmzZ0488cRccsklX7rmkUcemd133z377LNPvv/972f69On1Tqv8um666aZ07Ngx/fr1y+67754jjjgiq6yyyjdeBwAAAAAAAAAAAKivUFtbW9vYIVh2qqurU1lZmfWPuzYlpU63BAAAAAAAAACgYT1/yUGNHYFv6PNO0cyZM1NRUdHYcWgAn376aaZM+b+0a9chzZuXNnacRjdv3tx88MG76data1q0aPGF85xQCQAAAAAAAAAAABQ9hUoAAAAAAAAAAACg6ClUAgAAAAAAAAAAAEVPoRIAAAAAAAAAAABYLl1//bXZdNMNM3jwdlm4cOEi1w8//OBsuumGOffcs7/1Xk2/9QoAAAAAAAAAAADAd8LHv9i0UfYtP+7pJb63adOmmTFjRiZM+Gv69Nmobvydd97Oyy+/mFatWjVERCdUAgAAAAAAAAAAAMuvZs2aZbPN+ubRRx+qN/7oo4+ka9duWX317zXIPgqVAAAAAAAAAAAAwHJt4MDt8sc/jsmCBfPrxh555MH84AfbN9geCpUAAAAAAAAAAADAcm3LLbfK/Pnz8swzn706/PXX/y+TJ7+WgQO3a7A9FCoBAAAAAAAAAACA5VqLFi2z5Zb98+ijDydJHnnkofTq1TsdO67eYHs0bbCV+E554mdDUlFR0dgxAAAAAAAAAAAA4Gv5wQ+2y1lnnZ5PP/00jz76cPbee0iDru+ESgAAAAAAAAAAAGC5t+mmm6Vp06a5/vpf5p133s6AAQMbdH2FSgAAAAAAAAAAAGC517Rps2y99Ta57bZb06fPxmnbtm3Drt+gqwEAAAAAAAAAAAAsJTvvvFs++uij7LLLbg2+tkIlAAAAAAAAAAAA8J2w3no9c/HFly+Vtb3yGwAAAAAAAAAAACh6hdra2trGDsGyU11dncrKysycOTMVFRWNHQcAAAAAAAAAAGhkOkUrnk8//TRTpvxf2rXrkObNSxs7TqObN29uPvjg3XTr1jUtWrT4wnle+V2kpl64acpblDR2DAAAAAAAgOVC57NeauwIAAAANDKv/AYAAAAAAAAAAACKnkIlAAAAAAAAAAAAUPQUKgEAAAAAAAAAAICip1AJAAAAAAAAAAAAFD2FSgAAAAAAAAAAAKDoKVQCAAAAAAAAAAAARU+hEgAAAAAAAAAAACh6CpUAAAAAAAAAAABA0VOoBAAAAAAAAAAAAIpe08YOAAAAAAAAAAAAALA4119/bX71q+uSJIVCIa1arZQOHTrkv/5rw+yxx95ZY42uDbaXQuVyZtSoUTnhhBMyY8aMxo4CAAAAAAAAAADACmanW37QKPvef8AjS3xvaWmLXH31tUmSTz6ZnSlTJuf3vx+d3//+npx22lnZYYcdGySjV343sPfffz8/+tGP0rlz55SWlqZDhw7ZbrvtMm7cuMaOBgAAAAAAAAAAAN85TZoU0rNn7/Ts2Tvf//6m2W+/A/LrX9+W9dffIOeff27+9a9/Nsw+DbIKdfbYY49MmDAhN998c1599dXcd9996d+/f6ZPn97Y0QAAAAAAAAAAAGCFUFpampNPPjXz58/Pfffd0yBrKlQ2oBkzZuTJJ5/MRRddlK233jpdunTJJptskmHDhmXnnXdOklx++eXp1atXVlpppXTq1ClHH310Zs2a9YVrvv/++9loo42y2267Ze7cuZkyZUp22WWXrLrqqikrK8vGG2+cxx57bFk9IgAAAAAAAAAAACwX1lija9q3XyUvvfRSg6ynUNmAysrKUlZWlnvvvTdz585d7JwmTZrkyiuvzN/+9rfcfPPN+eMf/5if/OQni507derUbLnllunZs2fuvvvulJaWZtasWRk0aFDGjBmTCRMmZPvtt8/gwYPz1ltvLXaNuXPnprq6ut4HAAAAAAAAAAAAVgSrrrpqpk//oEHWUqhsQE2bNs2oUaNy8803p3Xr1unbt29OO+20vPjii3VzTjjhhGy99dapqqrKNttsk5/97Ge58847F1nrlVdeSd++fbPddtvlpptuSklJSZJk/fXXz5FHHpmePXume/fuOe+889KtW7fcd999i810wQUXpLKysu7TqVOnpfPwAAAAAAAAAAAAsIzV1tamUCg0yFoKlQ1sjz32yNtvv5377rsv22+/fR5//PFsuOGGGTVqVJLksccey4ABA7L66qunvLw8Bx54YKZPn57Zs2fXrTFnzpxsueWW2X333XPFFVfU+8eeNWtWTjnllPTo0SOtW7dOWVlZJk2a9IUnVA4bNiwzZ86s+0ydOnWpPj8AAAAAAAAAAAAsK9OmTUvbtm0bZC2FyqWgRYsWGThwYM4888yMHz8+Q4cOzdlnn5033ngjO+20U3r37p3f/e53ef7553P11VcnSebNm1d3f2lpabbddtvcf//9+de//lVv7VNOOSX33HNPzj///Dz55JN54YUX0qtXr3r3/7vS0tJUVFTU+wAAAAAAAAAAAMB33f/935S8//609Oq1foOsp1C5DKy77rr55JNP8vzzz2fhwoW57LLLsummm2attdbK22+/vcj8Jk2a5De/+U369OmTrbfeut6ccePGZejQodltt93Sq1evdOjQIW+88cYyfBoAAAAAAAAAAABoXHPnzs1ll12U5s2bZ+edd2uQNZs2yCokSaZPn5699torhxxySHr37p3y8vI899xzufjii7PLLrtkzTXXzPz58/OLX/wigwcPzrhx43Lttdcudq2SkpLceuutGTJkSLbZZps8/vjj6dChQ7p3757Ro0dn8ODBKRQKOfPMM7Nw4cJl/KQAAAAAAAAAAACwbCxcWJuXX34xSTJ79pxMmfJa7r13dN5++18588zh6dixY4Pso1DZgMrKyvL9738/I0aMyJQpUzJ//vx06tQphx9+eE477bS0bNkyl19+eS666KIMGzYsW221VS644IIcdNBBi12vadOmue2227LPPvvUlSovv/zyHHLIIdl8883Trl27nHrqqamurl7GTwoAAAAAAAAAAMB30f0HPNLYEb6xuXM/zWGHDU2StGrVKqut1jEbb7xJ9txzn1RVrdFg+xRqa2trG2w1lnvV1dWprKzMy8N6pLxFSWPHAQAAAAAAWC50Puulxo4AAACN5vNO0cyZM1NRUdHYcWgAn376aaZM+b+0a9chzZuXNnacRjdv3tx88MG76data1q0aPGF85osw0wAAAAAAAAAAAAAyyWFSgAAAAAAAAAAAKDoKVQCAAAAAAAAAAAARU+hEgAAAAAAAAAAACh6CpUAAAAAAAAAAABA0VOoBAAAAAAAAAAAAIqeQiUAAAAAAAAAAABQ9BQqAQAAAAAAAAAAgKLXtLED0Dg6/fTpVFRUNHYMAAAAAAAAAAAAWC4oVAIAAAAAAAAAAADLtfHjx+Wuu27PpEl/y8cfz0pFRUV69Fg3228/KNtu+4M0afLtX9itUAkAAAAAAAAAAABF4sVdBjXKvr1//4clvveXv/xFbr75pvTrt3VOPvnUtGvXLh9++GH+9KfHc845Z6SioiKbbrr5t86oUAkAAAAAAAAAAAAsl8aNezI333xTDj30iBx++FH1rg0YMDD77DMkTZs2TBVSoRIAAAAAAAAAAABYLt122y1p165dDj74sMVeX2+9ng2217d/aTgAAAAAAAAAAABAA1uwYEFefHFi+vTZuMFOofwyTqgEAAAAAAAAAAAAljszZ87MvHnzsuqqHeqN19bWpqampu57kyZN0qTJtz9f0gmVAAAAAAAAAAAAwHKrUKj/fezYMdlii03qPpdffnGD7OOEyiI18NqBadrSPz8AAAAAABS7cceNa+wIAAAAsFiVlZVp3rx5pk2bVm98o402yU033ZIk+e//PqHB9tOoAwAAAAAAAAAAAJY7TZs2Te/e6+e5555NTU1NSkpKkiQVFRWpqFj3/81p1mD7eeU3AAAAAAAAAAAAsFwaMuSAvP/++7n55huX+l5OqAQAAAAAAAAAAACWS337bpmDDjo41133y7z66ivZdtsfpF27dpk1a1ZeeGFCPvxwelq1WqlB9lKoBAAAAAAAAAAAAJZbRx99XNZff4PcffedueSSCzNr1qxUVFRknXV65PTTz87Agds1yD4KlQAAAAAAAAAAAFAkev/+D40dYYn07btl+vbdcqnu0WSprg4AAAAAAAAAAADwHaBQCQAAAAAAAAAAABQ9hUoAAAAAAAAAAACg6ClUAgAAAAAAAAAAAEVPoXIp6d+/f0444YR6YzfccENat26dyy+/PLfcckvOPvvsxgkHAAAAAAAAAAAA1POdL1QOHTo0hUJhkc/222//lfdWVVVl5MiRSyXX6NGjc95559Ub+93vfpff//73eeaZZ/Kzn/0sQ4YMWSp7AwAAAAAAAAAAQFLb2AGWE1/vd2i6lFMsE9tvv31uuummemOlpaWNlOYzbdq0WWTswQcfTJL069dvWccBAAAAAAAAAACgSDRr1iyFQjJ37tw0b96iseM0urlz56ZQ+Ox3+TLf+RMqk8/Kkx06dKj3WXnllVNbW5tzzjknnTt3TmlpaTp27Jjjjz8+yWev5H7zzTdz4okn1p1qmSTnnHNONthgg3rrjxw5MlVVVXXfhw4dml133TXDhw9P+/btU1FRkaOOOirz5s2rm/Ofr/yuqqrK+eefn0MOOSTl5eXp3Llzrrvuunr7nHrqqVlrrbXSqlWrdO3aNWeeeWbmz59fd/3zbL/5zW9SVVWVysrK7Lvvvvn4448b6JcEAAAAAAAAAADgu66kpCStW7fOxx/PyMcfz8y8eZ9m3ry5Rfj5NB9/PDMffzwjrVu3TklJyZf+bivECZVf5He/+11GjBiR22+/Peutt17efffdTJw4Mclnr+Ref/31c8QRR+Twww//xmuPGTMmLVq0yOOPP5433ngjBx98cNq2bZuf//znX3jPZZddlvPOOy+nnXZa7r777vzoRz9Kv379svbaaydJysvLM2rUqHTs2DEvvfRSDj/88JSXl+cnP/lJ3RpTpkzJvffem/vvvz8fffRR9t5771x44YVfuO/cuXMzd+7cuu/V1dXf+FkBAAAAAAAAAAD4bllttdWSJDNmzEgxn9lXKCQrr9y67vf4MitEofL+++9PWVlZvbHTTjstLVq0SIcOHbLtttumWbNm6dy5czbZZJMkn72Su6SkJOXl5enQocM33rN58+a58cYb06pVq6y33no599xz89///d8577zz0qTJ4g/+HDRoUI4++ugkn51GOWLEiIwdO7auUHnGGWfUza2qqsopp5yS22+/vV6hcuHChRk1alTKy8uTJAceeGDGjBnzhYXKCy64IMOHD//GzwcAAAAAAAAAAMB3V6FQSMeOHbPqqqvWe1NysWnWrNlXnkz5uRWiULn11lvnl7/8Zb2xNm3a5JNPPsnIkSPTtWvXbL/99hk0aFAGDx6cpk2//WOvv/76adWqVd33zTbbLLNmzcrUqVPTpUuXxd7Tu3fvur8LhUI6dOiQadOm1Y3dcccdufLKKzNlypTMmjUrCxYsSEVFRb01qqqq6sqUyWct4n9f4z8NGzYsJ510Ut336urqdOrU6es/KAAAAAAAAAAAAN9ZJSUlX7tQWOwWf5Tid8xKK62UNddcs96nTZs26dSpU1555ZVcc801admyZY4++uhstdVWX9q2bdKkSWpra+uNNVQ7t1mzZvW+FwqFLFy4MEny5z//Ofvvv38GDRqU+++/PxMmTMjpp5+eefPmfe01Fqe0tDQVFRX1PgAAAAAAAAAAAEB9K8QJlV+mZcuWGTx4cAYPHpxjjjkm66yzTl566aVsuOGGad68eWpqaurNb9++fd59993U1tamUCgkSV544YVF1p04cWLmzJmTli1bJkmefvrplJWVLfHpj+PHj0+XLl1y+umn1429+eabS7QWAAAAAAAAAAAA8M2sEIXKuXPn5t1336031rRp09x///2pqanJ97///bRq1Sq33HJLWrZsWfdK7qqqqjzxxBPZd999U1pamnbt2qV///55//33c/HFF2fPPffMQw89lAcffHCRkx3nzZuXQw89NGeccUbeeOONnH322Tn22GPTpMmSHfrZvXv3vPXWW7n99tuz8cYb54EHHsg999yzZD8IAAAAAAAAAAAA8I2sEK/8fuihh7LaaqvV+2yxxRZp3bp1rr/++vTt2ze9e/fOY489lv/93/9N27ZtkyTnnntu3njjjXTr1i3t27dPkvTo0SPXXHNNrr766qy//vp59tlnc8oppyyy54ABA9K9e/dstdVW2WeffbLzzjvnnHPOWeJn2HnnnXPiiSfm2GOPzQYbbJDx48fnzDPPXOL1AAAAAAAAAAAAgK+vUFtbW9vYIb5rhg4dmhkzZuTee+9t7CjfWHV1dSorK7PJRZukacsV4oBSAAAAAADgWxh33LjGjgAAADSyzztFM2fOXORNvlBMVogTKgEAAAAAAAAAAAC+DYVKAAAAAAAAAAAAoOh55/MSGDVqVGNHAAAAAAAAAAAAABqQEyoBAAAAAAAAAACAoqdQCQAAAAAAAAAAABQ9hUoAAAAAAAAAAACg6ClUAgAAAAAAAAAAAEVPoRIAAAAAAAAAAAAoegqVAAAAAAAAAAAAQNFr2tgBaByPHvVoKioqGjsGAAAAAAAAAAAALBecUAkAAAAAAAAAAAAUPYVKAAAAAAAAAAAAoOgpVAIAAAAAAAAAAABFT6ESAAAAAAAAAAAAKHoKlQAAAAAAAAAAAEDRU6gEAAAAAAAAAAAAil7Txg5A45h64aYpb1HS2DEAAAAAGkTns15q7AgAAAAAAHzHOaESAAAAAAAAAAAAKHoKlQAAAAAAAAAAAEDRU6gEAAAAAAAAAAAAip5CJQAAAAAAAAAAAFD0FCoBAAAAAAAAAACAoqdQCQAAAAAAAAAAABQ9hUoAAAAAAAAAAACg6ClUAgAAAAAAAAAAAEVPoRIAAAAAAAAAAAAoegqVAAAAAAAAAAAAQNFTqPyG+vfvnxNOOKGxYwAAAAAAAAAAAAANSKEyydChQ1MoFHLUUUctcu2YY45JoVDI0KFDkySjR4/OeeedV3e9qqoqI0eOXEZJAQAAAAAAAAAAgKVBofL/6dSpU26//fbMmTOnbuzTTz/Nb3/723Tu3LlurE2bNikvL2+MiAAAAAAAAAAAAMBSolD5/2y44Ybp1KlTRo8eXTc2evTodO7cOf/1X/9VN/bvr/zu379/3nzzzZx44okpFAopFAp18373u99lvfXWS2lpaaqqqnLZZZfV26+qqio/+9nPctBBB6WsrCxdunTJfffdl/fffz+77LJLysrK0rt37zz33HN190yfPj1DhgzJ6quvnlatWqVXr1657bbbltIvAgAAAAAAAAAAAMVDofLfHHLIIbnpppvqvt944405+OCDv3D+6NGj873vfS/nnntu3nnnnbzzzjtJkueffz5777139t1337z00ks555xzcuaZZ2bUqFH17h8xYkT69u2bCRMmZMcdd8yBBx6Ygw46KAcccED++te/plu3bjnooINSW1ub5LMTM/v06ZMHHnggL7/8co444ogceOCBefbZZ78w49y5c1NdXV3vAwAAAAAAAAAAANSnUPlvDjjggDz11FN588038+abb2bcuHE54IADvnB+mzZtUlJSkvLy8nTo0CEdOnRIklx++eUZMGBAzjzzzKy11loZOnRojj322FxyySX17h80aFCOPPLIdO/ePWeddVaqq6uz8cYbZ6+99spaa62VU089NZMmTcp7772XJFl99dVzyimnZIMNNkjXrl1z3HHHZfvtt8+dd975hRkvuOCCVFZW1n06derUAL8UAAAAAAAAAAAArFgUKv9N+/bts+OOO2bUqFG56aabsuOOO6Zdu3bfeJ1Jkyalb9++9cb69u2b1157LTU1NXVjvXv3rvt71VVXTZL06tVrkbFp06YlSWpqanLeeeelV69eadOmTcrKyvLwww/nrbfe+sIsw4YNy8yZM+s+U6dO/cbPAwAAAAAAAAAAACu6po0dYHlzyCGH5Nhjj02SXH311Ut1r2bNmtX9XSgUvnBs4cKFSZJLLrkkV1xxRUaOHJlevXplpZVWygknnJB58+Z94R6lpaUpLS1dGvEBAAAAAAAAAABghaFQ+R+23377zJs3L4VCIdttt91Xzm/evHm9UyeTpEePHhk3bly9sXHjxmWttdZKSUnJEmcbN25cdtlll7rXkC9cuDCvvvpq1l133SVeEwAAAAAAAAAAAPDK70WUlJRk0qRJ+fvf//61yo9VVVV54okn8q9//SsffPBBkuTkk0/OmDFjct555+XVV1/NzTffnKuuuiqnnHLKt8rWvXv3PProoxk/fnwmTZqUI488Mu+99963WhMAAAAAAAAAAABQqFysioqKVFRUfK255557bt54441069Yt7du3T5JsuOGGufPOO3P77benZ8+eOeuss3Luuedm6NCh3yrXGWeckQ033DDbbbdd+vfvnw4dOmTXXXf9VmsCAAAAAAAAAAAASaG2tra2sUOw7FRXV6eysjIvD+uR8hZL/vpxAAAAgOVJ57NeauwIAAAAAPCd9XmnaObMmV/7IDpYETmhEgAAAAAAAAAAACh6CpUAAAAAAAAAAABA0VOoBAAAAAAAAAAAAIqeQiUAAAAAAAAAAABQ9BQqAQAAAAAAAAAAgKKnUAkAAAAAAAAAAAAUPYVKAAAAAAAAAAAAoOgpVAIAAAAAAAAAAABFr2ljB6BxdPrp06moqGjsGAAAAAAAAAAAALBccEIlAAAAAAAAAAAAUPQUKgEAAAAAAAAAAICip1AJAAAAAAAAAAAAFD2FSgAAAAAAAAAAAKDoKVQCAAAAAAAAAAAARU+hEgAAAAAAAAAAACh6CpUAAAAAAAAAAABA0Wva2AFoHFMv3DTlLUoaOwYAAACwHOt81kuNHQEAAAAAAJYZJ1QCAAAAAAAAAAAARU+hEgAAAAAAAAAAACh6CpUAAAAAAAAAAABA0VOoBAAAAAAAAAAAAIqeQiUAAAAAAAAAAABQ9BQqAQAAAAAAAAAAgKKnUAkAAAAAAAAAAAAUPYVKAAAAAAAAAAAAoOgpVAIAAAAAAAAAAABFT6HyWxg6dGh23XXXL50ze/bs7LHHHqmoqEihUMiMGTMaNENVVVVGjhzZoGsCAAAAAAAAAABAsVmhC5VDhw5NoVBIoVBIs2bNssYaa+QnP/lJPv3002WW4eabb86TTz6Z8ePH55133kllZeUy2xsAAAAAAAAAAAD4epo2doClbfvtt89NN92U+fPn5/nnn88Pf/jDFAqFXHTRRctk/ylTpqRHjx7p2bPnEq9RU1OTQqGQJk1W6P4rAAAAAAAAAAAANJoVvqFXWlqaDh06pFOnTtl1112z7bbb5tFHH02STJ8+PUOGDMnqq6+eVq1apVevXrntttvq3X/33XenV69eadmyZdq2bZttt902n3zySb05l156aVZbbbW0bds2xxxzTObPn58k6d+/fy677LI88cQTKRQK6d+/f5Lko48+ykEHHZSVV145rVq1yg477JDXXnutbr1Ro0aldevWue+++7LuuuumtLQ0b731VqZNm5bBgwenZcuWWWONNXLrrbcuxV8OAAAAAAAAAAAAiscKf0Llv3v55Zczfvz4dOnSJUny6aefpk+fPjn11FNTUVGRBx54IAceeGC6deuWTTbZJO+8806GDBmSiy++OLvttls+/vjjPPnkk6mtra1bc+zYsVlttdUyduzYTJ48Ofvss0822GCDHH744Rk9enR++tOf5uWXX87o0aPTvHnzJJ+9ivy1117Lfffdl4qKipx66qkZNGhQ/v73v6dZs2ZJktmzZ+eiiy7KDTfckLZt22aVVVbJnnvumbfffjtjx45Ns2bNcvzxx2fatGlf+sxz587N3Llz675XV1c39M8KAAAAAAAAAAAA33krfKHy/vvvT1lZWRYsWJC5c+emSZMmueqqq5Ikq6++ek455ZS6uccdd1wefvjh3HnnnXWFygULFmT33XevK2H26tWr3vorr7xyrrrqqpSUlGSdddbJjjvumDFjxuTwww9PmzZt0qpVqzRv3jwdOnRIkroi5bhx47L55psnSW699dZ06tQp9957b/baa68kyfz583PNNddk/fXXT5K8+uqrefDBB/Pss89m4403TpL86le/So8ePb70+S+44IIMHz782/6MAAAAAAAAAAAAsEJb4V/5vfXWW+eFF17IM888kx/+8Ic5+OCDs8ceeyRJampqct5556VXr15p06ZNysrK8vDDD+ett95Kkqy//voZMGBAevXqlb322ivXX399Pvroo3rrr7feeikpKan7vtpqq33pqZGTJk1K06ZN8/3vf79urG3btll77bUzadKkurHmzZund+/ei9zXp0+furF11lknrVu3/tLnHzZsWGbOnFn3mTp16pfOBwAAAAAAAAAAgGK0whcqV1pppay55ppZf/31c+ONN+aZZ57Jr371qyTJJZdckiuuuCKnnnpqxo4dmxdeeCHbbbdd5s2blyQpKSnJo48+mgcffDDrrrtufvGLX2TttdfO66+/Xrf+56/o/lyhUMjChQu/de6WLVumUCh863VKS0tTUVFR7wMAAAAAAAAAAADUt8IXKv9dkyZNctppp+WMM87InDlzMm7cuOyyyy454IADsv7666dr16559dVX691TKBTSt2/fDB8+PBMmTEjz5s1zzz33LHGGHj16ZMGCBXnmmWfqxqZPn55XXnkl66677hfet84662TBggV5/vnn68ZeeeWVzJgxY4mzAAAAAAAAAAAAAJ8pqkJlkuy1114pKSnJ1Vdfne7du+fRRx/N+PHjM2nSpBx55JF577336uY+88wzOf/88/Pcc8/lrbfeyujRo/P++++nR48eS7x/9+7ds8suu+Twww/PU089lYkTJ+aAAw7I6quvnl122eUL71t77bWz/fbb58gjj8wzzzyT559/Pocddlhatmy5xFkAAAAAAAAAAACAzxRdobJp06Y59thjc/HFF+fkk0/OhhtumO222y79+/dPhw4dsuuuu9bNraioyBNPPJFBgwZlrbXWyhlnnJHLLrssO+yww7fKcNNNN6VPnz7Zaaedstlmm6W2tjZ/+MMfFnl9+OLu69ixY/r165fdd989RxxxRFZZZZVvlQUAAAAAAAAAAABICrW1tbWNHYJlp7q6OpWVlXl5WI+Utyhp7DgAAADAcqzzWS81dgQAAAAAYBn4vFM0c+bMVFRUNHYcaDRFd0IlAAAAAAAAAAAAwH9SqAQAAAAAAAAAAACKnkIlAAAAAAAAAAAAUPQUKgEAAAAAAAAAAICip1AJAAAAAAAAAAAAFD2FSgAAAAAAAAAAAKDoKVQCAAAAAAAAAAAARU+hEgAAAAAAAAAAACh6CpUAAAAAAAAAAABA0Wva2AFoHJ1++nQqKioaOwYAAAAAAAAAAAAsF5xQCQAAAAAAAAAAABQ9hUoAAAAAAAAAAACg6ClUAgAAAAAAAAAAAEVPoRIAAAAAAAAAAAAoegqVAAAAAAAAAAAAQNFTqAQAAAAAAAAAAACKXtPGDkDjGHjtwDRt6Z8fAACKwbjjxjV2BAAAAAAAAFjuOaESAAAAAAAAAAAAKHoKlQAAAAAAAAAAAEDRU6gEAAAAAAAAAAAAip5CJQAAAAAAAAAAAFD0FCoBAAAAAAAAAACAoqdQCQAAAAAAAAAAABQ9hUoAAAAAAAAAAACg6ClUAgAAAAAAAAAAAEVPoRIAAAAAAAAAAAAoegqVAAAAAAAAAAAAQNFTqFwC55xzTjbYYIMGX7eqqiojR45s8HUBAAAAAAAAAACAL1f0hcpCofCln3POOWeRe0455ZSMGTOmwbP85S9/yRFHHNHg6wIAAAAAAAAAAABfrmljB2hs77zzTt3fd9xxR84666y88sordWNlZWV1f9fW1qampiZlZWX1xhtK+/btv9X98+bNS/PmzRsoDQAAAAAAAAAAABSPoj+hskOHDnWfysrKFAqFuu//+Mc/Ul5engcffDB9+vRJaWlpnnrqqUVe+T106NDsuuuuGT58eNq3b5+KioocddRRmTdvXt2c/v3759hjj82xxx6bysrKtGvXLmeeeWZqa2vr5vznK79nzJiRww47rG7NbbbZJhMnTqy7/nmOG264IWussUZatGixVH8rAAAAAAAAAAAAWFEV/QmVX8dPf/rTXHrppenatWtWXnnlPP7444vMGTNmTFq0aJHHH388b7zxRg4++OC0bds2P//5z+vm3HzzzTn00EPz7LPP5rnnnssRRxyRzp075/DDD1/svnvttVdatmyZBx98MJWVlfmf//mfDBgwIK+++mratGmTJJk8eXJ+97vfZfTo0SkpKVlkjblz52bu3Ll136urq7/lrwEAAAAAAAAAAAArHoXKr+Hcc8/NwIEDv3RO8+bNc+ONN6ZVq1ZZb731cu655+a///u/c95556VJk88OAu3UqVNGjBiRQqGQtddeOy+99FJGjBix2ELlU089lWeffTbTpk1LaWlpkuTSSy/Nvffem7vvvjtHHHFEks9e8/3rX//6C18XfsEFF2T48OHf5vEBAAAAAAAAAABghVf0r/z+OjbaaKOvnLP++uunVatWdd8322yzzJo1K1OnTq0b23TTTVMoFOrNee2111JTU7PIehMnTsysWbPStm3blJWV1X1ef/31TJkypW5ely5dvrBMmSTDhg3LzJkz6z7/ngcAAAAAAAAAAAD4jBMqv4aVVlppme85a9asrLbaaot9vXjr1q3r/v6qbKWlpXUnXAIAAAAAAAAAAACLp1DZQCZOnJg5c+akZcuWSZKnn346ZWVl6dSpU92cZ555pt49Tz/9dLp3756SkpJF1ttwww3z7rvvpmnTpqmqqlqq2QEAAAAAAAAAAKDYeeV3A5k3b14OPfTQ/P3vf88f/vCHnH322Tn22GPTpMn//xO/9dZbOemkk/LKK6/ktttuyy9+8Yv8+Mc/Xux62267bTbbbLPsuuuueeSRR/LGG29k/PjxOf300/Pcc88tq8cCAAAAAAAAAACAouCEygYyYMCAdO/ePVtttVXmzp2bIUOG5Jxzzqk356CDDsqcOXOyySabpKSkJD/+8Y9zxBFHLHa9QqGQP/zhDzn99NNz8MEH5/3330+HDh2y1VZbZdVVV10GTwQAAAAAAAAAAADFo1BbW1vb2CG+64YOHZoZM2bk3nvv/cI5/fv3zwYbbJCRI0cus1yLU11dncrKymxy0SZp2lKfFgAAisG448Y1dgQAAAAAAGA59nmnaObMmamoqGjsONBovPIbAAAAAAAAAAAAKHoKlQAAAAAAAAAAAEDR887nBjBq1KivnPP4448v9RwAAAAAAAAAAADAknFCJQAAAAAAAAAAAFD0FCoBAAAAAAAAAACAoqdQCQAAAAAAAAAAABQ9hUoAAAAAAAAAAACg6ClUAgAAAAAAAAAAAEWvaWMHoHE8etSjqaioaOwYAAAAAAAAAAAAsFxwQiUAAAAAAAAAAABQ9BQqAQAAAAAAAAAAgKKnUAkAAAAAAAAAAAAUPYVKAAAAAAAAAAAAoOgpVAIAAAAAAAAAAABFT6ESAAAAAAAAAAAAKHoKlQAAAAAAAAAAAEDRa9rYAWgcT22/Q1Zq6p8fAIDi1u+JPzV2BAAAAAAAAGA54YRKAAAAAAAAAAAAoOgpVAIAAAAAAAAAAABFT6ESAAAAAAAAAAAAKHoKlQAAAAAAAAAAAEDRU6gEAAAAAAAAAAAAip5CJQAAAAAAAAAAAFD0FCoBAAAAAAAAAACAoqdQCQAAAAAAAAAAABQ9hUoAAAAAAAAAAACg6ClUAgAAAAAAAAAAAEVPofJrmDp1ag455JB07NgxzZs3T5cuXfLjH/8406dPb+xoAAAAAAAAAAAAQANQqPwK//d//5eNNtoor732Wm677bZMnjw51157bcaMGZPNNtssH374YWNHBAAAAAAAAAAAAL4lhcqvcMwxx6R58+Z55JFH0q9fv3Tu3Dk77LBDHnvssfzrX//K6aefniSpqqrK+eefn0MOOSTl5eXp3LlzrrvuunprnXrqqVlrrbXSqlWrdO3aNWeeeWbmz59fd/2cc87JBhtskN/85jepqqpKZWVl9t1333z88cd1cx566KFsscUWad26ddq2bZuddtopU6ZMWTY/BgAAAAAAAAAAAKygFCq/xIcffpiHH344Rx99dFq2bFnvWocOHbL//vvnjjvuSG1tbZLksssuy0YbbZQJEybk6KOPzo9+9KO88sordfeUl5dn1KhR+fvf/54rrrgi119/fUaMGFFv3SlTpuTee+/N/fffn/vvvz9/+tOfcuGFF9Zd/+STT3LSSSflueeey5gxY9KkSZPstttuWbhw4WKfYe7cuamurq73AQAAAAAAAAAAAOpTqPwSr732Wmpra9OjR4/FXu/Ro0c++uijvP/++0mSQYMG5eijj86aa66ZU089Ne3atcvYsWPr5p9xxhnZfPPNU1VVlcGDB+eUU07JnXfeWW/NhQsXZtSoUenZs2e23HLLHHjggRkzZkzd9T322CO777571lxzzWywwQa58cYb89JLL+Xvf//7YjNecMEFqaysrPt06tTp2/4sAAAAAAAAAAAAsMJRqPwaPj+B8qv07t277u9CoZAOHTpk2rRpdWN33HFH+vbtmw4dOqSsrCxnnHFG3nrrrXprVFVVpby8vO77aqutVm+N1157LUOGDEnXrl1TUVGRqqqqJFlknc8NGzYsM2fOrPtMnTr1az0LAAAAAAAAAAAAFBOFyi+x5pprplAoZNKkSYu9PmnSpKy88spp3759kqRZs2b1rhcKhbpXcf/5z3/O/vvvn0GDBuX+++/PhAkTcvrpp2fevHn17vmyNZJk8ODB+fDDD3P99dfnmWeeyTPPPJMki6zzudLS0lRUVNT7AAAAAAAAAAAAAPUpVH6Jtm3bZuDAgbnmmmsyZ86cetfefffd3Hrrrdlnn31SKBS+cq3x48enS5cuOf3007PRRhule/fuefPNN79RnunTp+eVV17JGWeckQEDBtS9chwAAAAAAAAAAAD4dhQqv8JVV12VuXPnZrvttssTTzyRqVOn5qGHHsrAgQOz+uqr5+c///nXWqd79+556623cvvtt2fKlCm58sorc88993yjLCuvvHLatm2b6667LpMnT84f//jHnHTSSUvyWAAAAAAAAAAAAMC/Uaj8Ct27d89zzz2Xrl27Zu+99063bt1yxBFHZOutt86f//zntGnT5muts/POO+fEE0/Msccemw022CDjx4/PmWee+Y2yNGnSJLfffnuef/759OzZMyeeeGIuueSSJXksAAAAAAAAAAAA4N8Uamtraxs7BMtOdXV1Kisr88Bmm2elpk0bOw4AADSqfk/8qbEjAAAAAAAANLrPO0UzZ85MRUVFY8eBRuOESgAAAAAAAAAAAKDoKVQCAAAAAAAAAAAARU+hEgAAAAAAAAAAACh6CpUAAAAAAAAAAABA0VOoBAAAAAAAAAAAAIqeQiUAAAAAAAAAAABQ9BQqAQAAAAAAAAAAgKKnUAkAAAAAAAAAAAAUPYVKAAAAAAAAAAAAoOg1bewANI4tHnowFRUVjR0DAAAAAAAAAAAAlgtOqAQAAAAAAAAAAACKnkIlAAAAAAAAAAAAUPQUKgEAAAAAAAAAAICip1AJAAAAAAAAAAAAFD2FSgAAAAAAAAAAAKDoKVQCAAAAAAAAAAAARa9pYwegcQy8dmCatvTPDwDAd9+448Y1dgQAAAAAAABgBeCESgAAAAAAAAAAAKDoKVQCAAAAAAAAAAAARU+hEgAAAAAAAAAAACh6CpUAAAAAAAAAAABA0VOoBAAAAAAAAAAAAIqeQiUAAAAAAAAAAABQ9BQqAQAAAAAAAAAAgKKnUAkAAAAAAAAAAAAUPYVKAAAAAAAAAAAAoOgpVAIAAAAAAAAAAABFT6HyKxQKhdx7771feP3xxx9PoVDIjBkzkiSjRo1K69atl1qeoUOHZtddd6373r9//5xwwglLbT8AAAAAAAAAAAAoBkVfqHz33Xdz3HHHpWvXriktLU2nTp0yePDgjBkz5mvdv/nmm+edd95JZWXlUk4KAAAAAAAAAAAALC1NGztAY3rjjTfSt2/ftG7dOpdcckl69eqV+fPn5+GHH84xxxyTf/zjH1+5RvPmzdOhQ4dlkBYAAAAAAAAAAABYWor6hMqjjz46hUIhzz77bPbYY4+stdZaWW+99XLSSSfl6aefrpv3wQcfZLfddkurVq3SvXv33HfffXXX/vOV3/9u5syZKSkpyXPPPZckWbhwYdq0aZNNN920bs4tt9ySTp061X2fOnVq9t5777Ru3Tpt2rTJLrvskjfeeKPhHx4AAAAAAAAAAACoU7SFyg8//DAPPfRQjjnmmKy00kqLXG/dunXd38OHD8/ee++dF198MYMGDcr++++fDz/88Cv3qKyszAYbbJDHH388SfLSSy+lUChkwoQJmTVrVpLkT3/6U/r165ckmT9/frbbbruUl5fnySefzLhx41JWVpbtt98+8+bNW6LnnDt3bqqrq+t9AAAAAAAAAAAAgPqKtlA5efLk1NbWZp111vnKuUOHDs2QIUOy5ppr5vzzz8+sWbPy7LPPfq19+vfvX1eofPzxxzNw4MD06NEjTz31VN3Y54XKO+64IwsXLswNN9yQXr16pUePHrnpppvy1ltv1a3xTV1wwQWprKys+/z7aZgAAAAAAAAAAADAZ4q2UFlbW/u15/bu3bvu75VWWikVFRWZNm3a17q3X79+eeqpp1JTU5M//elP6d+/f13J8u23387kyZPTv3//JMnEiRMzefLklJeXp6ysLGVlZWnTpk0+/fTTTJky5Rs93+eGDRuWmTNn1n2mTp26ROsAAAAAAAAAAADAiqxpYwdoLN27d0+hUMg//vGPr5zbrFmzet8LhUIWLlz4tfbZaqut8vHHH+evf/1rnnjiiZx//vnp0KFDLrzwwqy//vrp2LFjunfvniSZNWtW+vTpk1tvvXWRddq3b/+19vtPpaWlKS0tXaJ7AQAAAAAAAAAAoFgU7QmVbdq0yXbbbZerr746n3zyySLXZ8yY0SD7tG7dOr17985VV12VZs2aZZ111slWW22VCRMm5P7776973XeSbLjhhnnttdeyyiqrZM0116z3qaysbJA8AAAAAAAAAAAAwKKKtlCZJFdffXVqamqyySab5He/+11ee+21TJo0KVdeeWU222yzBtunf//+ufXWW+vKk23atEmPHj1yxx131CtU7r///mnXrl122WWXPPnkk3n99dfz+OOP5/jjj88///nPBssDAAAAAAAAAAAA1FfUhcquXbvmr3/9a7beeuucfPLJ6dmzZwYOHJgxY8bkl7/8ZYPt069fv9TU1KR///51Y/37919krFWrVnniiSfSuXPn7L777unRo0cOPfTQfPrpp6moqGiwPAAAAAAAAAAAAEB9hdra2trGDsGyU11dncrKymxy0SZp2rJpY8cBAIBvbdxx4xo7AgAAAAAAwHfa552imTNnOviNolbUJ1QCAAAAAAAAAAAAJAqVAAAAAAAAAAAAAAqVAAAAAAAAAAAAAAqVAAAAAAAAAAAAQNFTqAQAAAAAAAAAAACKnkIlAAAAAAAAAAAAUPQUKgEAAAAAAAAAAICip1AJAAAAAAAAAAAAFL2mjR2AxvHoUY+moqKisWMAAAAAAAAAAADAcsEJlQAAAAAAAAAAAEDRU6gEAAAAAAAAAAAAip5CJQAAAAAAAAAAAFD0FCoBAAAAAAAAAACAoqdQCQAAAAAAAAAAABQ9hUoAAAAAAAAAAACg6ClUAgAAAAAAAAAAAEWvaWMHoHFsdcZtKSlt2dgxAADga3n+koMaOwIAAAAAAACwgnNCJQAAAAAAAAAAAFD0FCoBAAAAAAAAAACAoqdQCQAAAAAAAAAAABS9JSpUnnvuuZk9e/Yi43PmzMm55577rUMBAAAAAAAAAAAALEtLVKgcPnx4Zs2atcj47NmzM3z48G8dCgAAAAAAAAAAAGBZWqJCZW1tbQqFwiLjEydOTJs2bb51KAAAAAAAAAAAAIBlqek3mbzyyiunUCikUChkrbXWqleqrKmpyaxZs3LUUUc1eEgAAAAAAAAAAACApekbFSpHjhyZ2traHHLIIRk+fHgqKyvrrjVv3jxVVVXZbLPNGjwkAAAAAAAAAAAAwNL0jQqVP/zhD5Mka6yxRjbffPM0a9ZsqYQCAAAAAAAAAAAAWJa+UaHyc/369cvChQvz6quvZtq0aVm4cGG961tttVWDhGNRhUIh99xzT3bdddfGjgIAAAAAAAAAAAArjCUqVD799NPZb7/98uabb6a2trbetUKhkJqamgYJt6IYOnRoZsyYkXvvvbexowAAAAAAAAAAAACLsUSFyqOOOiobbbRRHnjggay22mopFAoNnQsAAAAAAAAAAABgmWmyJDe99tprOf/889OjR4+0bt06lZWV9T58sbvvvju9evVKy5Yt07Zt22y77bb55JNPkiR/+ctfMnDgwLRr1y6VlZXp169f/vrXv37pemeffXZWW221vPjii8siPgAAAAAAAAAAAKyQlqhQ+f3vfz+TJ09u6CwrvHfeeSdDhgzJIYcckkmTJuXxxx/P7rvvXvfa9I8//jg//OEP89RTT+Xpp59O9+7dM2jQoHz88ceLrFVbW5vjjjsuv/71r/Pkk0+md+/ei91z7ty5qa6urvcBAAAAAAAAAAAA6luiV34fd9xxOfnkk/Puu++mV69eadasWb3rX1TuK3bvvPNOFixYkN133z1dunRJkvTq1avu+jbbbFNv/nXXXZfWrVvnT3/6U3baaae68QULFuSAAw7IhAkT8tRTT2X11Vf/wj0vuOCCDB8+vIGfBAAAAAAAAAAAAFYsS1So3GOPPZIkhxxySN1YoVBIbW1tCoVCampqGibdCmb99dfPgAED0qtXr2y33Xb5wQ9+kD333DMrr7xykuS9997LGWeckccffzzTpk1LTU1NZs+enbfeeqveOieeeGJKS0vz9NNPp127dl+657Bhw3LSSSfVfa+urk6nTp0a/uEAAAAAAAAAAADgO2yJCpWvv/56Q+coCiUlJXn00Uczfvz4PPLII/nFL36R008/Pc8880zWWGON/PCHP8z06dNzxRVXpEuXLiktLc1mm22WefPm1Vtn4MCBue222/Lwww9n//33/9I9S0tLU1paujQfCwAAAAAAAAAAAL7zlqhQ+fnrqvnmCoVC+vbtm759++ass85Kly5dcs899+Skk07KuHHjcs0112TQoEFJkqlTp+aDDz5YZI2dd945gwcPzn777ZeSkpLsu+++y/oxAAAAAAAAAAAAYIXSZElv/M1vfpO+ffumY8eOefPNN5MkI0eOzO9///sGC7eieeaZZ3L++efnueeey1tvvZXRo0fn/fffT48ePZIk3bt3z29+85tMmjQpzzzzTPbff/+0bNlysWvttttu+c1vfpODDz44d99997J8DAAAAAAAAAAAAFjhLFGh8pe//GVOOumkDBo0KDNmzEhNTU2SpHXr1hk5cmRD5luhVFRU5IknnsigQYOy1lpr5Ywzzshll12WHXbYIUnyq1/9Kh999FE23HDDHHjggTn++OOzyiqrfOF6e+65Z26++eYceOCBGT169LJ6DAAAAAAAAAAAAFjhFGpra2u/6U3rrrtuzj///Oy6664pLy/PxIkT07Vr17z88svp37//Yl9TzfKhuro6lZWVWf+4a1NSuvjTLwEAYHnz/CUHNXYEAAAAAACAFdbnnaKZM2emoqKiseNAo1miEypff/31/Nd//dci46Wlpfnkk0++dSgAAAAAAAAAAACAZWmJCpVrrLFGXnjhhUXGH3roofTo0ePbZgIAAAAAAAAAAABYppouyU0nnXRSjjnmmHz66aepra3Ns88+m9tuuy0XXHBBbrjhhobOCAAAAAAAAAAAALBULVGh8rDDDkvLli1zxhlnZPbs2dlvv/3SsWPHXHHFFdl3330bOiMAAAAAAAAAAADAUrVEhcok2X///bP//vtn9uzZmTVrVlZZZZWGzAUAAAAAAAAAAACwzCxRofL111/PggUL0r1797Rq1SqtWrVKkrz22mtp1qxZqqqqGjIjAAAAAAAAAAAAwFLVZEluGjp0aMaPH7/I+DPPPJOhQ4d+20wAAAAAAAAAAAAAy9QSFSonTJiQvn37LjK+6aab5oUXXvi2mQAAAAAAAAAAAACWqSUqVBYKhXz88ceLjM+cOTM1NTXfOhQAAAAAAAAAAADAslSora2t/aY3DR48OC1btsxtt92WkpKSJElNTU322WeffPLJJ3nwwQcbPCgNo7q6OpWVlZk5c2YqKioaOw4AAAAAAAAAANDIdIrgM02X5KYLL7ww/fr1y9prr50tt9wySfLkk0+muro6f/zjHxs0IAAAAAAAAAAAAMDStkSv/F5vvfXy4osvZu+99860adPy8ccf56CDDso//vGP9OzZs6EzAgAAAAAAAAAAACxV3/iEyvnz52f77bfPtddem/PPP39pZAIAAAAAAAAAAABYpr7xCZXNmjXLiy++uDSyAAAAAAAAAAAAADSKJXrl9wEHHJBf/epXDZ0FAAAAAAAAAAAAoFF841d+J8mCBQty44035rHHHkufPn2y0kor1bt++eWXN0g4AAAAAAAAAAAAgGVhiQqVL7/8cjbccMMkyauvvlrvWqFQ+PapWOqmXrhpyluUNHYMAACKTOezXmrsCAAAAAAAAACLtUSFyrFjxzZ0DgAAAAAAAAAAAIBG0+Tb3Dx58uQ8/PDDmTNnTpKktra2QUIBAAAAAAAAAAAALEtLVKicPn16BgwYkLXWWiuDBg3KO++8kyQ59NBDc/LJJzdoQAAAAAAAAAAAAIClbYkKlSeeeGKaNWuWt956K61ataob32efffLQQw81WDgAAAAAAAAAAACAZaHpktz0yCOP5OGHH873vve9euPdu3fPm2++2SDBAAAAAAAAAAAAAJaVJTqh8pNPPql3MuXnPvzww5SWln7rUAAAAAAAAAAAAADL0hIVKrfccsv8+te/rvteKBSycOHCXHzxxdl6660bLBwAAAAAAAAAAADAsrBEr/y++OKLM2DAgDz33HOZN29efvKTn+Rvf/tbPvzww4wbN66hMwIAAAAAAAAAAAAsVUt0QmXPnj3z6quvZosttsguu+ySTz75JLvvvnsmTJiQbt26NXRGAAAAAAAAAAAAgKVqiU6oTJLKysqcfvrpDZkFAAAAAAAAAAAAoFEs0QmVSfLRRx/l0ksvzaGHHppDDz00l112WT788MOGzLbCGzVqVFq3bv2N7qmqqsrIkSOXSh4AAAAAAAAAAAAoVktUqHziiSdSVVWVK6+8Mh999FE++uijXHnllVljjTXyxBNPNHTG5db777+fH/3oR+ncuXNKS0vToUOHbLfddhk3blxjRwMAAAAAAAAAAAC+gSV65fcxxxyTffbZJ7/85S9TUlKSJKmpqcnRRx+dY445Ji+99FKDhlxe7bHHHpk3b15uvvnmdO3aNe+9917GjBmT6dOnN3Y0AAAAAAAAAAAA4BtYohMqJ0+enJNPPrmuTJkkJSUlOemkkzJ58uQGC7c8mzFjRp588slcdNFF2XrrrdOlS5dssskmGTZsWHbeeeckyeWXX55evXplpZVWSqdOnXL00Udn1qxZX7jmlClTsssuu2TVVVdNWVlZNt544zz22GOLzJs9e3YOOeSQlJeXp3PnzrnuuuuW2nMCAAAAAAAAAABAMViiQuWGG26YSZMmLTI+adKkrL/++t861HdBWVlZysrKcu+992bu3LmLndOkSZNceeWV+dvf/pabb745f/zjH/OTn/zkC9ecNWtWBg0alDFjxmTChAnZfvvtM3jw4Lz11lv15l122WXZaKONMmHChBx99NH50Y9+lFdeeWWxa86dOzfV1dX1PgAAAAAAAAAAAEB9hdra2tpvetMdd9yRn/zkJznuuOOy6aabJkmefvrpXH311bnwwgvTo0ePurm9e/duuLTLmd/97nc5/PDDM2fOnGy44Ybp169f9t133y985rvvvjtHHXVUPvjggyTJqFGjcsIJJ2TGjBlfuEfPnj1z1FFH5dhjj02SVFVVZcstt8xvfvObJEltbW06dOiQ4cOH56ijjlrk/nPOOSfDhw9fZPzlYT1S3qJkkXEAAFiaOp/1UmNHAAAAAAAA4D9UV1ensrIyM2fOTEVFRWPHgUbTdEluGjJkSJIs9rTFIUOGpFAopLa2NoVCITU1Nd8u4XJsjz32yI477pgnn3wyTz/9dB588MFcfPHFueGGGzJ06NA89thjueCCC/KPf/wj1dXVWbBgQT799NPMnj07rVq1WmS9WbNm5ZxzzskDDzyQd955JwsWLMicOXMWOaHy3wubhUIhHTp0yLRp0xabcdiwYTnppJPqvldXV6dTp04N9AsAAAAAAAAAAADAimGJCpWvv/56Q+f4zmrRokUGDhyYgQMH5swzz8xhhx2Ws88+O/37989OO+2UH/3oR/n5z3+eNm3a5Kmnnsqhhx6aefPmLbZQecopp+TRRx/NpZdemjXXXDMtW7bMnnvumXnz5tWb16xZs3rfC4VCFi5cuNh8paWlKS0tbbgHBgAAAAAAAAAAgBXQEhUqu3Tp8rXm7bjjjrnhhhuy2mqrLck230nrrrtu7r333jz//PNZuHBhLrvssjRp0iRJcuedd37pvePGjcvQoUOz2267JfnsxMo33nhjaUcGAAAAAAAAAACAordEhcqv64knnsicOXOW5haNZvr06dlrr71yyCGHpHfv3ikvL89zzz2Xiy++OLvsskvWXHPNzJ8/P7/4xS8yePDgjBs3Ltdee+2Xrtm9e/eMHj06gwcPTqFQyJlnnvmFJ08CAAAAAAAAAAAADWepFipXZGVlZfn+97+fESNGZMqUKZk/f346deqUww8/PKeddlpatmyZyy+/PBdddFGGDRuWrbbaKhdccEEOOuigL1zz8ssvzyGHHJLNN9887dq1y6mnnprq6upl+FQAAAAAAAAAAABQnAq1tbW1S2vx8vLyTJw4MV27dl1aW/ANVVdXp7KyMi8P65HyFiWNHQcAgCLT+ayXGjsCAAAAAAAA/+HzTtHMmTNTUVHR2HGg0TRp7AAAAAAAAAAAAAAAjU2hEgAAAAAAAAAAACh6CpUAAAAAAAAAAABA0VuiQuUnn3zyteaddtppadOmzZJsAQAAAAAAAAAAALDMLFGhctVVV80hhxySp5566kvnDRs2LK1bt16SLQAAAAAAAAAAAACWmSUqVN5yyy358MMPs80222SttdbKhRdemLfffruhswEAAAAAAAAAAAAsE0tUqNx1111z77335l//+leOOuqo/Pa3v02XLl2y0047ZfTo0VmwYEFD5wQAAAAAAAAAAABYapaoUPm59u3b56STTsqLL76Yyy+/PI899lj23HPPdOzYMWeddVZmz57dUDkBAAAAAAAAAAAAlpqm3+bm9957LzfffHNGjRqVN998M3vuuWcOPfTQ/POf/8xFF12Up59+Oo888khDZaUBdfrp06moqGjsGAAAAAAAAAAAALBcWKJC5ejRo3PTTTfl4Ycfzrrrrpujjz46BxxwQFq3bl03Z/PNN0+PHj0aKicAAAAAAAAAAADAUrNEhcqDDz44++67b8aNG5eNN954sXM6duyY008//VuFAwAAAAAAAAAAAFgWCrW1tbXf9KbZs2enVatWSyMPS1l1dXUqKyszc+ZMr/wGAAAAAAAAAAB0iuD/WaITKlu1apWamprcc889mTRpUpKkR48e2XXXXdO06RItCQAAAAAAAAAAANBolqj9+Le//S2DBw/Oe++9l7XXXjtJctFFF6V9+/b53//93/Ts2bNBQwIAAAAAAAAAAAAsTU2W5KbDDjssPXv2zD//+c/8f+zdebTXc+I/8Oetq9ttuUWiolJKsrSQYkJFphiNbYylkWgYS0xofDVjKVuYsWcZa7YZYxtjmLE1MjRUMik0jb3ma4nQVVGp+/tjvu5v7mRJqg8+j8c573N6L6/X+/n+dI435zy93k8//XSefvrpzJ49O506dcrhhx++qjMCAAAAAAAAAAAArFYrtULl1KlT89RTT2XttdeuPrb22mvnrLPOyjbbbLPKwgEAAAAAAAAAAACsCStVqNxkk03y1ltvZfPNN69xfM6cOWnXrt0qCcbqtcuVu6S0fKX++gEA4EuZcMyEQkcAAAAAAAAA+EIr/MnvysrK6m306NE59thjc8cdd+Rf//pX/vWvf+WOO+7IsGHDcu65567OvAAAAAAAAAAAAACr3AovUdi4ceOUlJRU71dVVeWHP/xh9bGqqqokyYABA7J06dJVHBMAAAAAAAAAAABg9VnhQuUjjzyyOnMAAAAAAAAAAAAAFMwKFyp79er1pSc/6qijcvrpp2fdddf90mMBAAAAAAAAAAAA1pRaq3Pym2++OZWVlavzFgAAAAAAAAAAAABf2WotVFZVVa3O6QEAAAAAAAAAAABWidVaqAQAAAAAAAAAAAD4JlCoBAAAAAAAAAAAAIqeQiUAAAAAAAAAAABQ9BQq16CxY8emcePG1fsjR45Mly5dqvcHDx6cPffcc43nAgAAAAAAAAAAgGK3WguVP/rRj1JRUbE6b7FGvf322znyyCPTqlWrlJWVpVmzZunXr18mTJiwUvMNHz4848aNW8UpAQAAAAAAAAAAgC+rdEUvnDZt2gpP2qlTpyTJFVdc8eUTfY3ts88+Wbx4cW644Ya0bds2b731VsaNG5e5c+eu1HwNGjRIgwYNVnFKAAAAAAAAAAAA4Mta4UJlly5dUlJSkqqqqpSUlHzutUuXLv3Kwb5u3n///Tz22GMZP358evXqlSRp3bp1unfvXn3NBRdckOuvvz4vv/xy1llnnQwYMCDnnXfeZ5YmR44cmbvvvjtTp06tcXzUqFEZM2ZMFi1alAMPPDCXXHJJ6tSpkyS5//77c+aZZ+bZZ59N7dq1s9122+Xiiy/OxhtvvHoeHAAAAAAAAAAAAIrACn/y+5VXXsnLL7+cV155JXfeeWfatGmTyy+/PH//+9/z97//PZdffnk23njj3Hnnnaszb8F8sprk3XffnUWLFn3qNbVq1coll1yS5557LjfccEP+8pe/5MQTT/xS9xk3blxmzJiR8ePH57e//W3uuuuujBo1qvr8ggULcvzxx+epp57KuHHjUqtWrey1115ZtmzZp863aNGiVFZW1tgAAAAAAAAAAACAmlZ4hcrWrVtX/3nffffNJZdckt122636WKdOndKyZcuccsop2XPPPVdpyK+D0tLSjB07NocddliuvPLKbLXVVunVq1f233//6k+cDxs2rPr6jTbaKGeeeWaOOOKIXH755St8nzp16uS6665LvXr1svnmm+f000/Pz372s5xxxhmpVatW9tlnnxrXX3fddWnatGmef/75bLHFFsvNN3r06BqFTAAAAAAAAAAAAGB5K7xC5X+aPn162rRps9zxNm3a5Pnnn//Kob6u9tlnn7z++uu555570r9//4wfPz5bbbVVxo4dmyR5+OGHs/POO2eDDTZIw4YNc9BBB2Xu3LlZuHDhCt+jc+fOqVevXvX+dtttl/nz52f27NlJkhdeeCEHHHBA2rZtm4qKimy00UZJklmzZn3qfCNGjMi8efOqt0/mAQAAAAAAAAAAAP6/lSpUduzYMaNHj87ixYurjy1evDijR49Ox44dV1m4r6O6detml112ySmnnJK//e1vGTx4cE477bS8+uqr2X333dOpU6fceeedmTJlSi677LIkqfE7fVUDBgzIu+++m6uvvjoTJ07MxIkTP/ceZWVlqaioqLEBAAAAAAAAAAAANa3wJ7//05VXXpkBAwZkww03rP7c9bRp01JSUpI//vGPqzTg191mm22Wu+++O1OmTMmyZcty/vnnp1atf/dUb7vtti893zPPPJMPP/ww5eXlSZInn3wyDRo0SMuWLTN37tzMnDkzV199dXbYYYckyeOPP77qHgYAAAAAAAAAAACK1EoVKrt3756XX345t9xyS/7xj38kSfbbb78ceOCBqV+//ioN+HUxd+7c7Lvvvjn00EPTqVOnNGzYME899VTOO++87LHHHmnXrl2WLFmSSy+9NAMGDMiECRNy5ZVXfun7LF68OEOGDMnJJ5+cV199NaeddlqGDh2aWrVqZe21106TJk1y1VVXpXnz5pk1a1ZOOumk1fC0AAAAAAAAAAAAUFxWqlCZJPXr18/hhx++KrN8rTVo0CA9evTIhRdemJdeeilLlixJy5Ytc9hhh+XnP/95ysvLc8EFF+Tcc8/NiBEjsuOOO2b06NEZNGjQl7rPzjvvnPbt22fHHXfMokWLcsABB2TkyJFJklq1auXWW2/Nsccemy222CIdOnTIJZdckt69e6/6BwYAAAAAAAAAAIAiUlJVVVW1MgNvuumm/PrXv87LL7+cJ554Iq1bt86FF16Ytm3bZo899ljVOVlFKisr06hRo3Q/t3tKy1e6TwsAACtswjETCh0BAAAAAACAz/FJp2jevHmpqKgodBwomForM+iKK67I8ccfn1133TXvvfdeli5dmiRZe+21c9FFF63KfAAAAAAAAAAAAACr3UoVKi+99NJcffXV+cUvfpHS0v+/ymG3bt0yffr0VRYOAAAAAAAAAAAAYE1YqULlK6+8kq5duy53vKysLAsWLPjKoQAAAAAAAAAAAADWpJUqVLZp0yZTp05d7vj999+fjh07ftVMAAAAAAAAAAAAAGtU6Rdfsrzjjz8+Rx99dD766KNUVVVl0qRJ+e1vf5vRo0fnmmuuWdUZAQAAAAAAAAAAAFarlSpU/vjHP055eXlOPvnkLFy4MAceeGBatGiRiy++OPvvv/+qzggAAAAAAAAAAACwWq1UoTJJBg4cmIEDB2bhwoWZP39+1ltvvVWZCwAAAAAAAAAAAGCNqbUyg3baaae8//77SZJ69epVlykrKyuz0047rbJwAAAAAAAAAAAAAGvCShUqx48fn8WLFy93/KOPPspjjz32lUMBAAAAAAAAAAAArElf6pPf06ZNq/7z888/nzfffLN6f+nSpbn//vuzwQYbrLp0rDYPHfFQKioqCh0DAAAAAAAAAAAAvha+VKGyS5cuKSkpSUlJyad+2ru8vDyXXnrpKgsHAAAAAAAAAAAAsCZ8qULlK6+8kqqqqrRt2zaTJk1K06ZNq8/VqVMn6623XmrXrr3KQwIAAAAAAAAAAACsTl+qUNm6deskybJly1ZLGAAAAAAAAAAAAIBCqLUyg0aPHp3rrrtuuePXXXddzj333K8cCgAAAAAAAAAAAGBNWqlC5a9//etsuummyx3ffPPNc+WVV37lUAAAAAAAAAAAAABr0koVKt988800b958ueNNmzbNG2+88ZVDAQAAAAAAAAAAAKxJpSszqGXLlpkwYULatGlT4/iECRPSokWLVRKM1WvHk3+b2mXlhY4BAPCNNeWXgwodAQAAAAAAAIBVaKUKlYcddliGDRuWJUuWZKeddkqSjBs3LieeeGJOOOGEVRoQAAAAAAAAAAAAYHVbqULlz372s8ydOzdHHXVUFi9enCSpW7du/ud//icjRoxYpQEBAAAAAAAAAAAAVreVKlSWlJTk3HPPzSmnnJIZM2akvLw87du3T1lZ2arOBwAAAAAAAAAAALDa1foqg9988828++672XjjjVNWVpaqqqpVlQsAAAAAAAAAAABgjVmpQuXcuXOz8847Z5NNNsluu+2WN954I0kyZMiQnHDCCas0IAAAAAAAAAAAAMDqtlKFyuOOOy5rrbVWZs2alXr16lUf32+//XL//fevsnAAAAAAAAAAAAAAa0Lpygx68MEH88ADD2TDDTescbx9+/Z57bXXVkkwAAAAAAAAAAAAgDVlpVaoXLBgQY2VKT/x7rvvpqys7CuHAgAAAAAAAAAAAFiTVqpQucMOO+TGG2+s3i8pKcmyZcty3nnnpU+fPqssHAAAAAAAAAAAAMCasFKf/D7vvPOy884756mnnsrixYtz4okn5rnnnsu7776bCRMmrOqMAAAAAAAAAAAAAKvVSq1QucUWW+Sf//xntt9+++yxxx5ZsGBB9t577/z973/PxhtvvKozfqP17t07w4YN+8zzgwcPzp577rnG8gAAAAAAAAAAAADLW6kVKpOkUaNG+cUvfrEqs6wxV155ZX72s5/lvffeS2npv3+C+fPnZ+21107Pnj0zfvz46mvHjx+fPn365MUXX/zcsugn17333ntp3LjxCme5+OKLU1VVtbKPAgAAAAAAAAAAAKwCK1yonDZt2gpP2qlTp5UKs6b06dMn8+fPz1NPPZVtt902SfLYY4+lWbNmmThxYj766KPUrVs3SfLII4+kVatWq23lzUaNGq2WeQEAAAAAAAAAAIAVt8Kf/O7SpUu6du2aLl26fO7WtWvX1Zl3lejQoUOaN2++3EqUe+yxR9q0aZMnn3yyxvE+ffrkpptuSrdu3dKwYcM0a9YsBx54YObMmZMkefXVV9OnT58kydprr52SkpIMHjz4U+993333pVGjRrnllluSLP/J7969e+fYY4/NiSeemHXWWSfNmjXLyJEjq89XVVVl5MiRadWqVcrKytKiRYsce+yxq+aHAQAAAAAAAAAAgCK1witUvvLKK6szxxrXp0+fPPLIIznppJOS/HslyhNPPDFLly7NI488kt69e+fDDz/MxIkTc+ihh2bJkiU544wz0qFDh8yZMyfHH398Bg8enD/96U9p2bJl7rzzzuyzzz6ZOXNmKioqUl5evtw9f/Ob3+SII47Ib37zm+y+++6fme2GG27I8ccfn4kTJ+aJJ57I4MGD07Nnz+yyyy658847c+GFF+bWW2/N5ptvnjfffDPPPPPMZ861aNGiLFq0qHq/srLyK/xqAAAAAAAAAAAA8O20woXK1q1br84ca1yfPn0ybNiwfPzxx/nwww/z97//Pb169cqSJUty5ZVXJkmeeOKJLFq0KH369EmrVq2qx7Zt2zaXXHJJttlmm8yfPz8NGjTIOuuskyRZb7310rhx4+Xud9lll+UXv/hF/vjHP6ZXr16fm61Tp0457bTTkiTt27fPmDFjMm7cuOyyyy6ZNWtWmjVrlr59+2attdZKq1at0r1798+ca/To0Rk1atSX/XkAAAAAAAAAAACgqKzwJ7//20033ZSePXumRYsWee2115IkF110Uf7whz+ssnCrU+/evbNgwYJMnjw5jz32WDbZZJM0bdo0vXr1ysSJE/PRRx9l/Pjxadu2bVq1apUpU6ZkwIABadWqVRo2bFhdipw1a9YX3uuOO+7Icccdl4ceeugLy5TJvwuV/6l58+bVnxffd9998+GHH6Zt27Y57LDD8vvf/z4ff/zxZ841YsSIzJs3r3qbPXv2F94fAAAAAAAAAAAAis1KFSqvuOKKHH/88dltt93y/vvvZ+nSpUmSxo0b56KLLlqV+Vabdu3aZcMNN8wjjzySRx55pLro2KJFi7Rs2TJ/+9vf8sgjj2SnnXbKggUL0q9fv1RUVOSWW27J5MmT8/vf/z5Jsnjx4i+8V9euXdO0adNcd911qaqq+sLr11prrRr7JSUlWbZsWZKkZcuWmTlzZi6//PKUl5fnqKOOyo477pglS5Z86lxlZWWpqKiosQEAAAAAAAAAAAA1rVSh8tJLL83VV1+dX/ziF6ldu3b18W7dumX69OmrLNzq1qdPn4wfPz7jx49P7969q4/vuOOO+fOf/5xJkyalT58++cc//pG5c+fmnHPOyQ477JBNN920esXIT9SpUydJqsul/2njjTfOI488kj/84Q855phjvnLu8vLyDBgwIJdccknGjx+fJ5544hv1uwMAAAAAAAAAAMDXTenKDHrllVfStWvX5Y6XlZVlwYIFXznUmtKnT58cffTRWbJkSY1Pcffq1StDhw7N4sWL06dPn5SWlqZOnTq59NJLc8QRR+TZZ5/NGWecUWOu1q1bp6SkJPfee2922223lJeXp0GDBtXnN9lkkzzyyCPp3bt3SktLV3olz7Fjx2bp0qXp0aNH6tWrl5tvvjnl5eVp3br1Ss0HAAAAAAAAAAAArOQKlW3atMnUqVOXO37//fenY8eOXzXTGtOnT598+OGHadeuXdZff/3q47169coHH3yQDh06pHnz5mnatGnGjh2b22+/PZtttlnOOeec/OpXv6ox1wYbbJBRo0blpJNOyvrrr5+hQ4cud78OHTrkL3/5S37729/mhBNOWKnMjRs3ztVXX52ePXumU6dOefjhh/PHP/4xTZo0Wan5AAAAAAAAAAAAgKSkqqqq6ssOuuaaazJy5Micf/75GTJkSK655pq89NJLGT16dK655prsv//+qyMrq0BlZWUaNWqUzsdcmdpl5YWOAwDwjTXll4MKHQEAAAAAAABWiU86RfPmzUtFRUWh40DBrNQnv3/84x+nvLw8J598chYuXJgDDzwwG2ywQS6++GJlSgAAAAAAAAAAAOAbZ6UKlR9++GH22muvDBw4MAsXLsyzzz6bCRMmZMMNN1zV+QAAAAAAAAAAAABWu1orM2iPPfbIjTfemCRZvHhxvv/97+eCCy7InnvumSuuuGKVBgQAAAAAAAAAAABY3VaqUPn0009nhx12SJLccccdWX/99fPaa6/lxhtvzCWXXLJKAwIAAAAAAAAAAACsbitVqFy4cGEaNmyYJHnwwQez9957p1atWtl2223z2muvrdKAAAAAAAAAAAAAAKvbShUq27Vrl7vvvjuzZ8/OAw88kO9+97tJkjlz5qSiomKVBgQAAAAAAAAAAABY3VaqUHnqqadm+PDh2WijjdKjR49st912Sf69WmXXrl1XaUAAAAAAAAAAAACA1a10ZQb94Ac/yPbbb5833ngjnTt3rj6+8847Z6+99lpl4QAAAAAAAAAAAADWhJKqqqqqQodgzamsrEyjRo0yb948n2cHAAAAAAAAAAB0iuD/rNQnvwEAAAAAAAAAAAC+TRQqAQAAAAAAAAAAgKKnUAkAAAAAAAAAAAAUPYVKAAAAAAAAAAAAoOgpVAIAAAAAAAAAAABFT6ESAAAAAAAAAAAAKHoKlQAAAAAAAAAAAEDRKy10AArj8f67pn6pv34AgJXV66+PFjoCAAAAAAAAAKuQFSoBAAAAAAAAAACAoqdQCQAAAAAAAAAAABQ9hUoAAAAAAAAAAACg6ClUAgAAAAAAAAAAAEVPoRIAAAAAAAAAAAAoegqVAAAAAAAAAAAAQNFTqAQAAAAAAAAAAACKnkIlAAAAAAAAAAAAUPQUKgEAAAAAAAAAAICip1D5Nda7d+8MGzas0DEAAAAAAAAAAADgW0+hcgU98cQTqV27dr73ve8VOgoAAAAAAAAAAACwiilUrqBrr702xxxzTP7617/m9ddf/8zrqqqq8vHHH6/BZAAAAAAAAAAAAMBXpVC5AubPn5/f/e53OfLII/O9730vY8eOrT43fvz4lJSU5M9//nO23nrrlJWV5fHHH8+yZcsyevTotGnTJuXl5encuXPuuOOOGvM++uij6d69e8rKytK8efOcdNJJn1vGvOmmm9KtW7c0bNgwzZo1y4EHHpg5c+asrscGAAAAAAAAAACAoqFQuQJuu+22bLrppunQoUN+9KMf5brrrktVVVWNa0466aScc845mTFjRjp16pTRo0fnxhtvzJVXXpnnnnsuxx13XH70ox/l0UcfTZL87//+b3bbbbdss802eeaZZ3LFFVfk2muvzZlnnvmZOZYsWZIzzjgjzzzzTO6+++68+uqrGTx48OdmX7RoUSorK2tsAAAAAAAAAAAAQE2lhQ7wTXDttdfmRz/6UZKkf//+mTdvXh599NH07t27+prTTz89u+yyS5J/lxjPPvvsPPzww9luu+2SJG3bts3jjz+eX//61+nVq1cuv/zytGzZMmPGjElJSUk23XTTvP766/mf//mfnHrqqalVa/mu66GHHlr957Zt2+aSSy7JNttsk/nz56dBgwafmn306NEZNWrUqvopAAAAAAAAAAAA4FvJCpVfYObMmZk0aVIOOOCAJElpaWn222+/XHvttTWu69atW/WfX3zxxSxcuDC77LJLGjRoUL3deOONeemll5IkM2bMyHbbbZeSkpLqcT179sz8+fPzr3/961OzTJkyJQMGDEirVq3SsGHD9OrVK0kya9asz8w/YsSIzJs3r3qbPXv2yv0QAAAAAAAAAAAA8C1mhcovcO211+bjjz9OixYtqo9VVVWlrKwsY8aMqT5Wv3796j/Pnz8/SXLfffdlgw02qDFfWVnZSuVYsGBB+vXrl379+uWWW25J06ZNM2vWrPTr1y+LFy/+zHFlZWUrfU8AAAAAAAAAAAAoFgqVn+Pjjz/OjTfemPPPPz/f/e53a5zbc88989vf/jabbrrpcuM222yzlJWVZdasWdWrSP63jh075s4770xVVVX1KpUTJkxIw4YNs+GGGy53/T/+8Y/MnTs355xzTlq2bJkkeeqpp77qIwIAAAAAAAAAAABRqPxc9957b957770MGTIkjRo1qnFun332ybXXXptf/vKXy41r2LBhhg8fnuOOOy7Lli3L9ttvn3nz5mXChAmpqKjIwQcfnKOOOioXXXRRjjnmmAwdOjQzZ87MaaedluOPPz61ai3/JfZWrVqlTp06ufTSS3PEEUfk2WefzRlnnLHanh0AAAAAAAAAAACKyfLNPapde+216du373JlyuTfhcqnnnoq06ZN+9SxZ5xxRk455ZSMHj06HTt2TP/+/XPfffelTZs2SZINNtggf/rTnzJp0qR07tw5RxxxRIYMGZKTTz75U+dr2rRpxo4dm9tvvz2bbbZZzjnnnPzqV79adQ8LAAAAAAAAAAAARaykqqqqqtAhWHMqKyvTqFGj3Lfdd1K/1AKlAAArq9dfHy10BAAAAAAAAFglPukUzZs3LxUVFYWOAwVjhUoAAAAAAAAAAACg6ClUAgAAAAAAAAAAAEVPoRIAAAAAAAAAAAAoegqVAAAAAAAAAAAAQNFTqAQAAAAAAAAAAACKnkIlAAAAAAAAAAAAUPQUKgEAAAAAAAAAAICip1AJAAAAAAAAAAAAFD2FSgAAAAAAAAAAAKDolRY6AIWx/f1/TkVFRaFjAAAAAAAAAAAAwNeCFSoBAAAAAAAAAACAoqdQCQAAAAAAAAAAABQ9hUoAAAAAAAAAAACg6ClUAgAAAAAAAAAAAEVPoRIAAAAAAAAAAAAoegqVAAAAAAAAAAAAQNErLXQACmP2OdumYd3ahY4BALDatDp1eqEjAAAAAAAAAPANYoVKAAAAAAAAAAAAoOgpVAIAAAAAAAAAAABFT6ESAAAAAAAAAAAAKHoKlQAAAAAAAAAAAEDRU6gEAAAAAAAAAAAAip5CJQAAAAAAAAAAAFD0FCoBAAAAAAAAAACAoqdQCQAAAAAAAAAAABQ9hUoAAAAAAAAAAACg6ClUAgAAAAAAAAAAAEXvW1+ofOeddz7z3EYbbZSLLrpozYVZDb4NzwAAAAAAAAAAAACF9q0oVL722msZPHhwmjdvnjp16qRNmzYZMWJEHn744Wy33XZZuHBhoSMCAAAAAAAAAAAAX2OlhQ7wVb3wwgv5zne+k/bt2+c3v/lNNtpoo0yfPj0nn3xyzjnnnPz1r39NvXr1Ch3zK1m6dGlKSkpSq9a3ov8KAAAAAAAAAAAAXzvf+Ibe0KFDU6dOnTz88MPp06dP2rRpk169emXrrbdO165dc/fddydJ5syZkwEDBqS8vDxt2rTJLbfcstxc77//fn784x+nadOmqaioyE477ZRnnnmmxjVnnnlm1ltvvTRs2DA//vGPc9JJJ6VLly7V5ydPnpxddtkl6667bho1apRevXrl6aefrjHHBRdckC233DL169dPy5Ytc9RRR2X+/PnV58eOHZvGjRvnnnvuyWabbZaysrLMmjVrhZ4BAAAAAAAAAAAA+PK+0YXKuXPn5qGHHsrRRx9dvQrlokWLcvjhh+f000/P7rvvnhtvvDFVVVUZPHhwZs+enUceeSR33HFHLr/88syZM6fGfPvuu2/mzJmTP//5z5kyZUq22mqr7Lzzznn33XeTJLfcckvOOuusnHvuuZkyZUpatWqVK664osYcH3zwQQ4++OA8/vjjefLJJ9O+ffvstttu+eCDD6qvqVWrVi655JI899xzueGGG/KXv/wlJ554Yo15Fi5cmHPPPTfXXHNNnnvuuay33nor9Az/bdGiRamsrKyxAQAAAAAAAAAAADV9oz/5/eKLL6aqqiodO3ZMkixbtixDhgzJ0KFD07Jly7Ro0SLvvPNOJk+enD//+c+ZNGlSttlmmyTJtddeWz0uSR5//PFMmjQpc+bMSVlZWZLkV7/6Ve6+++7ccccdOfzww3PppZdmyJAhOeSQQ5Ikp556ah588MEaq0vutNNONTJeddVVady4cR599NHsvvvuSZJhw4ZVn99oo41y5pln5ogjjsjll19efXzJkiW5/PLL07lz5yTJP//5zy98hk8zevTojBo1asV/VAAAAAAAAAAAAChC3+gVKj9Rp06dJMlxxx2X7bffPjvssEOSf3/CO0lmzJiR0tLSbL311tVjNt100zRu3Lh6/5lnnsn8+fPTpEmTNGjQoHp75ZVX8tJLLyVJZs6cme7du9e493/vv/XWWznssMPSvn37NGrUKBUVFZk/f35mzZpVfc3DDz+cnXfeORtssEEaNmyYgw46KHPnzs3ChQtrPFOnTp2q91fkGT7NiBEjMm/evOpt9uzZn3s9AAAAAAAAAAAAFKNv9AqV7dq1S0lJSWbMmJFnn302ixYtyhFHHFF9/tlnn03jxo2/sHSYJPPnz0/z5s0zfvz45c6tyPhPHHzwwZk7d24uvvjitG7dOmVlZdluu+2yePHiJMmrr76a3XffPUceeWTOOuusrLPOOnn88cczZMiQLF68uPrT5eXl5SkpKVnh+36WsrKy6hU3AQAAAAAAAAAAgE/3jS5UNmnSJN/97ndzzjnnZPPNN8/DDz9cfe61117L7bffnkGDBmXTTTfNxx9/nClTplR/LnvmzJnVK1gmyVZbbZU333wzpaWl2WijjT71fh06dMjkyZMzaNCg6mOTJ0+ucc2ECRNy+eWXZ7fddkuSzJ49O++88071+SlTpmTZsmU5//zzU6vWvxcIve22277wWVfkGQAAAAAAAAAAAICV843/5Pdee+2VuXPnZv78+Rk/fnxee+213Hffffnud7+bDTbYIGeffXY6dOiQ/v375yc/+UkmTpyYKVOm5Mc//nHKy8ur5+nbt2+222677LnnnnnwwQfz6quv5m9/+1t+8Ytf5KmnnkqSHHPMMbn22mtzww035IUXXsiZZ56ZadOm1VhJsn379rnpppsyY8aMTJw4MQMHDqxxn3bt2mXJkiW59NJL8/LLL+emm27KlVde+YXPuSLPAAAAAAAAAAAAAKycb3Shcvbs2TnrrLPy+OOPZ9ttt80hhxyS9u3b54gjjkjfvn0zceLENG3aNEly/fXXp0WLFunVq1f23nvvHH744VlvvfWq5yopKcmf/vSn7LjjjjnkkEOyySabZP/9989rr72W9ddfP0kycODAjBgxIsOHD89WW22VV155JYMHD07dunWr57n22mvz3nvvZauttspBBx2UY489tsZ9OnfunAsuuCDnnntutthii9xyyy0ZPXr0Cj3vFz0DAAAAAAAAAAAAsHJKqqqqqgod4qt4++23q0uThbDLLrukWbNmuemmmwqW4cuorKxMo0aN8uyIjmlYt3ah4wAArDatTp1e6AgAAAAAAADwjfBJp2jevHmpqKgodBwomNJCB/iq1mSZcuHChbnyyivTr1+/1K5dO7/97W/z8MMP56GHHlpjGQAAAAAAAAAAAIBV7xtfqFyTPvks+FlnnZWPPvooHTp0yJ133pm+ffsWOhoAAAAAAAAAAADwFShUfgnl5eV5+OGHCx0DAAAAAAAAAAAAWMVqFToAAAAAAAAAAAAAQKEpVAIAAAAAAAAAAABFT6ESAAAAAAAAAAAAKHoKlQAAAAAAAAAAAEDRU6gEAAAAAAAAAAAAil5poQNQGC1PejIVFRWFjgEAAAAAAAAAAABfC1aoBAAAAAAAAAAAAIqeQiUAAAAAAAAAAABQ9BQqAQAAAAAAAAAAgKKnUAkAAAAAAAAAAAAUPYVKAAAAAAAAAAAAoOgpVAIAAAAAAAAAAABFT6ESAAAAAAAAAAAAKHqlhQ5AYcw+Z9s0rFu70DEAAL60VqdOL3QEAAAAAAAAAL6FrFAJAAAAAAAAAAAAFD2FSgAAAAAAAAAAAKDoKVQCAAAAAAAAAAAARU+hEgAAAAAAAAAAACh6CpUAAAAAAAAAAABA0VOoBAAAAAAAAAAAAIqeQiUAAAAAAAAAAABQ9BQqAQAAAAAAAAAAgKKnUAkAAAAAAAAAAAAUPYXK/9K7d+8MGzas0DEAAAAAAAAAAACANagoCpWDBw9OSUlJjjjiiOXOHX300SkpKcngwYPXfDAAAAAAAAAAAADga6EoCpVJ0rJly9x666358MMPq4999NFH+c1vfpNWrVoVMBkAAAAAAAAAAABQaEVTqNxqq63SsmXL3HXXXdXH7rrrrrRq1Spdu3atce3HH3+coUOHplGjRll33XVzyimnpKqqqvr8okWLMnz48GywwQapX79+evTokfHjx1efHzlyZLp06VJjzosuuigbbbRR9f7gwYOz55575uyzz87666+fxo0b5/TTT8/HH3+cn/3sZ1lnnXWy4YYb5vrrr68xz/Tp07PTTjulvLw8TZo0yeGHH5758+d/9R8IAAAAAAAAAAAAiljRFCqT5NBDD61RULzuuutyyCGHLHfdDTfckNLS0kyaNCkXX3xxLrjgglxzzTXV54cOHZonnngit956a6ZNm5Z99903/fv3zwsvvPCl8vzlL3/J66+/nr/+9a+54IILctppp2X33XfP2muvnYkTJ+aII47IT37yk/zrX/9KkixYsCD9+vXL2muvncmTJ+f222/Pww8/nKFDh37mPRYtWpTKysoaGwAAAAAAAAAAAFBTURUqf/SjH+Xxxx/Pa6+9ltdeey0TJkzIj370o+Wua9myZS688MJ06NAhAwcOzDHHHJMLL7wwSTJr1qxcf/31uf3227PDDjtk4403zvDhw7P99tsvt5rkF1lnnXVyySWXpEOHDjn00EPToUOHLFy4MD//+c/Tvn37jBgxInXq1Mnjjz+eJPnNb36Tjz76KDfeeGO22GKL7LTTThkzZkxuuummvPXWW596j9GjR6dRo0bVW8uWLb/krwYAAAAAAAAAAADffqWFDrAmNW3aNN/73vcyduzYVFVV5Xvf+17WXXfd5a7bdtttU1JSUr2/3Xbb5fzzz8/SpUszffr0LF26NJtsskmNMYsWLUqTJk2+VJ7NN988tWr9/07r+uuvny222KJ6v3bt2mnSpEnmzJmTJJkxY0Y6d+6c+vXrV1/Ts2fPLFu2LDNnzsz666+/3D1GjBiR448/vnq/srJSqRIAAAAAAAAAAAD+S1EVKpN/f/b7k09kX3bZZV96/Pz581O7du1MmTIltWvXrnGuQYMGSZJatWqlqqqqxrklS5YsN9daa61VY7+kpORTjy1btuxL5/xEWVlZysrKVno8AAAAAAAAAAAAFIOiK1T2798/ixcvTklJSfr16/ep10ycOLHG/pNPPpn27dundu3a6dq1a5YuXZo5c+Zkhx12+NTxTZs2zZtvvpmqqqrqlS6nTp36lbN37NgxY8eOzYIFC6pXqZwwYUJq1aqVDh06fOX5AQAAAAAAAAAAoFjV+uJLvl1q166dGTNm5Pnnn19uhclPzJo1K8cff3xmzpyZ3/72t7n00kvz05/+NEmyySabZODAgRk0aFDuuuuuvPLKK5k0aVJGjx6d++67L0nSu3fvvP322znvvPPy0ksv5bLLLsuf//znr5x94MCBqVu3bg4++OA8++yzeeSRR3LMMcfkoIMO+tTPfQMAAAAAAAAAAAArpugKlUlSUVGRioqKzzw/aNCgfPjhh+nevXuOPvro/PSnP83hhx9eff7666/PoEGDcsIJJ6RDhw7Zc889M3ny5LRq1SrJv1eSvPzyy3PZZZelc+fOmTRpUoYPH/6Vc9erVy8PPPBA3n333WyzzTb5wQ9+kJ133jljxoz5ynMDAAAAAAAAAABAMSupqqqqKnQI1pzKyso0atQoz47omIZ1P32FTgCAr7NWp04vdAQAAAAAAAD4VvmkUzRv3rzPXagOvu2KcoVKAAAAAAAAAAAAgP+kUAkAAAAAAAAAAAAUPYVKAAAAAAAAAAAAoOgpVAIAAAAAAAAAAABFT6ESAAAAAAAAAAAAKHoKlQAAAAAAAAAAAEDRU6gEAAAAAAAAAAAAip5CJQAAAAAAAAAAAFD0FCoBAAAAAAAAAACAolda6AAURsuTnkxFRUWhYwAAAAAAAAAAAMDXghUqAQAAAAAAAAAAgKKnUAkAAAAAAAAAAAAUPYVKAAAAAAAAAAAAoOgpVAIAAAAAAAAAAABFT6ESAAAAAAAAAAAAKHoKlQAAAAAAAAAAAEDRKy10AApjlyt3SWm5v34AYM2acMyEQkcAAAAAAAAAgE9lhUoAAAAAAAAAAACg6ClUAgAAAAAAAAAAAEVPoRIAAAAAAAAAAAAoegqVAAAAAAAAAAAAQNFTqAQAAAAAAAAAAACKnkIlAAAAAAAAAAAAUPQUKgEAAAAAAAAAAICip1AJAAAAAAAAAAAAFD2FSgAAAAAAAAAAAKDoKVQCAAAAAAAAAAAARU+hcjUYO3ZsGjduvFJje/funWHDhq2RewEAAAAAAAAAAAD/plD5X95888389Kc/Tbt27VK3bt2sv/766dmzZ6644oosXLhwtd//rrvuyhlnnLHa7wMAAAAAAAAAAAD8f6WFDvB18vLLL6dnz55p3Lhxzj777Gy55ZYpKyvL9OnTc9VVV2WDDTbI97///dVy78WLF6dOnTpZZ511Vsv8AAAAAAAAAAAAwGezQuV/OOqoo1JaWpqnnnoqP/zhD9OxY8e0bds2e+yxR+67774MGDAgSXLBBRdkyy23TP369dOyZcscddRRmT9//nLz3X333Wnfvn3q1q2bfv36Zfbs2dXnRo4cmS5duuSaa65JmzZtUrdu3STLf/J70aJFGT58eDbYYIPUr18/PXr0yPjx41fr7wAAAAAAAAAAAADFRqHy/8ydOzcPPvhgjj766NSvX/9TrykpKUmS1KpVK5dcckmee+653HDDDfnLX/6SE088sca1CxcuzFlnnZUbb7wxEyZMyPvvv5/999+/xjUvvvhi7rzzztx1112ZOnXqp95z6NCheeKJJ3Lrrbdm2rRp2XfffdO/f/+88MILK/RcixYtSmVlZY0NAAAAAAAAAAAAqEmh8v+8+OKLqaqqSocOHWocX3fdddOgQYM0aNAg//M//5MkGTZsWPr06ZONNtooO+20U84888zcdtttNcYtWbIkY8aMyXbbbZett946N9xwQ/72t79l0qRJ1dcsXrw4N954Y7p27ZpOnTotl2nWrFm5/vrrc/vtt2eHHXbIxhtvnOHDh2f77bfP9ddfv0LPNXr06DRq1Kh6a9my5Zf9aQAAAAAAAAAAAOBbT6HyC0yaNClTp07N5ptvnkWLFiVJHn744ey8887ZYIMN0rBhwxx00EGZO3duFi5cWD2utLQ022yzTfX+pptumsaNG2fGjBnVx1q3bp2mTZt+5r2nT5+epUuXZpNNNqkudTZo0CCPPvpoXnrppRXKP2LEiMybN696+8/PjgMAAAAAAAAAAAD/VlroAF8X7dq1S0lJSWbOnFnjeNu2bZMk5eXlSZJXX301u+++e4488sicddZZWWeddfL4449nyJAhWbx4cerVq7fC9/ysT4t/Yv78+aldu3amTJmS2rVr1zjXoEGDFbpHWVlZysrKVjgTAAAAAAAAAAAAFCMrVP6fJk2aZJdddsmYMWOyYMGCz7xuypQpWbZsWc4///xsu+222WSTTfL6668vd93HH3+cp556qnp/5syZef/999OxY8cVztS1a9csXbo0c+bMSbt27WpszZo1+3IPCAAAAAAAAAAAAHwmhcr/cPnll+fjjz9Ot27d8rvf/S4zZszIzJkzc/PNN+cf//hHateunXbt2mXJkiW59NJL8/LLL+emm27KlVdeudxca621Vo455phMnDgxU6ZMyeDBg7Ptttume/fuK5xnk002ycCBAzNo0KDcddddeeWVVzJp0qSMHj06991336p8dAAAAAAAAAAAAChqCpX/YeONN87f//739O3bNyNGjEjnzp3TrVu3XHrppRk+fHjOOOOMdO7cORdccEHOPffcbLHFFrnlllsyevTo5eaqV69e/ud//icHHnhgevbsmQYNGuR3v/vdl850/fXXZ9CgQTnhhBPSoUOH7Lnnnpk8eXJatWq1Kh4ZAAAAAAAAAAAASFJSVVVVVegQrDmVlZVp1KhRup/bPaXlpYWOAwAUmQnHTCh0BAAAAAAAAOC/fNIpmjdvXioqKgodBwrGCpUAAAAAAAAAAABA0VOoBAAAAAAAAAAAAIqeQiUAAAAAAAAAAABQ9BQqAQAAAAAAAAAAgKKnUAkAAAAAAAAAAAAUPYVKAAAAAAAAAAAAoOgpVAIAAAAAAAAAAABFT6ESAAAAAAAAAAAAKHqlhQ5AYTx0xEOpqKgodAwAAAAAAAAAAAD4WrBCJQAAAAAAAAAAAFD0FCoBAAAAAAAAAACAoqdQCQAAAAAAAAAAABQ9hUoAAAAAAAAAAACg6ClUAgAAAAAAAAAAAEVPoRIAAAAAAAAAAAAoegqVAAAAAAAAAAAAQNErLXQACmP2OdumYd3ahY4BABSJVqdOL3QEAAAAAAAAAPhcVqgEAAAAAAAAAAAAip5CJQAAAAAAAAAAAFD0FCoBAAAAAAAAAACAoqdQCQAAAAAAAAAAABQ9hUoAAAAAAAAAAACg6ClUAgAAAAAAAAAAAEVPoRIAAAAAAAAAAAAoegqVAAAAAAAAAAAAQNFTqAQAAAAAAAAAAACKnkJlgY0dOzaNGzcudAwAAAAAAAAAAAAoagUtVA4ePDglJSXVW5MmTdK/f/9MmzZthcd8sr344otrMDkAAAAAAAAAAADwbVLwFSr79++fN954I2+88UbGjRuX0tLS7L777is85pOtTZs2K3X/JUuWrNQ4AAAAAAAAAAAA4Nuj4IXKsrKyNGvWLM2aNUuXLl1y0kknZfbs2Xn77bdXaMwnW+3atZMkf/jDH7LVVlulbt26adu2bUaNGpWPP/64emxJSUmuuOKKfP/730/9+vVz1llnZeTIkenSpUtuuummbLTRRmnUqFH233//fPDBB9Xj7r///my//fZp3LhxmjRpkt133z0vvfRS9flXX301JSUlueuuu9KnT5/Uq1cvnTt3zhNPPFEj+9ixY9OqVavUq1cve+21V+bOnbvc833eM1RVVWXkyJFp1apVysrK0qJFixx77LEr9+MDAAAAAAAAAAAASb4Ghcr/NH/+/Nx8881p165dmjRp8qXHP/bYYxk0aFB++tOf5vnnn8+vf/3rjB07NmeddVaN60aOHJm99tor06dPz6GHHpokeemll3L33Xfn3nvvzb333ptHH30055xzTvWYBQsW5Pjjj89TTz2VcePGpVatWtlrr72ybNmyGnP/4he/yPDhwzN16tRssskmOeCAA6rLkBMnTsyQIUMydOjQTJ06NX369MmZZ575pZ7hzjvvzIUXXphf//rXeeGFF3L33Xdnyy23/MzfZNGiRamsrKyxAQAAAAAAAAAAADWVVFVVVRXq5oMHD87NN9+cunXrJvl3abF58+a59957s9VWW63QmCTZddddc/vtt6dv377ZeeedM2LEiOpzN998c0488cS8/vrrSf69QuWwYcNy4YUXVl8zcuTI/PKXv8ybb76Zhg0bJklOPPHE/PWvf82TTz75qTneeeedNG3aNNOnT88WW2yRV199NW3atMk111yTIUOGJEmef/75bL755pkxY0Y23XTTHHjggZk3b17uu+++6nn233//3H///Xn//feT5Auf4YILLsivf/3rPPvss1lrrbW+8DceOXJkRo0atdzxZ0d0TMO6tb9wPADAqtDq1OmFjgAAAAAAAAB8hsrKyjRq1Cjz5s1LRUVFoeNAwRR8hco+ffpk6tSpmTp1aiZNmpR+/fpl1113zWuvvbZCY6ZOnZpLLrkkSfLMM8/k9NNPT4MGDaq3ww47LG+88UYWLlxYPb5bt27LzbnRRhtVlymTpHnz5pkzZ071/gsvvJADDjggbdu2TUVFRTbaaKMkyaxZs2rM06lTpxpzJKmeZ8aMGenRo0eN67fbbrsa+1/0DPvuu28+/PDDtG3bNocddlh+//vf1/ik+X8bMWJE5s2bV73Nnj37M68FAAAAAAAAAACAYlVa6AD169dPu3btqvevueaaNGrUKFdfffVyn8P+rDGfmD9/fkaNGpW99957uXP/uaJl/fr1lzv/36s9lpSU1Pic94ABA9K6detcffXVadGiRZYtW5Ytttgiixcv/sx5SkpKkmS5z4J/ni96hpYtW2bmzJl5+OGH89BDD+Woo47KL3/5yzz66KOfumJlWVlZysrKVvj+AAAAAAAAAAAAUIwKXqj8byUlJalVq1Y+/PDDLz12q622ysyZMz+1bPlVzJ07NzNnzszVV1+dHXbYIUny+OOPf+l5OnbsmIkTJ9Y49t+fFF+RZygvL8+AAQMyYMCAHH300dl0000zffr0z/xMOgAAAAAAAAAAAPD5Cl6oXLRoUd58880kyXvvvZcxY8Zk/vz5GTBgQJJk5513zl577ZWhQ4d+4Vynnnpqdt9997Rq1So/+MEPUqtWrTzzzDN59tlnP3O1yxWx9tprp0mTJrnqqqvSvHnzzJo1KyeddNKXnufYY49Nz54986tf/Sp77LFHHnjggdx///1f6hnGjh2bpUuXpkePHqlXr15uvvnmlJeXp3Xr1iv9fAAAAAAAAAAAAFDsahU6wP3335/mzZunefPm6dGjRyZPnpzbb789vXv3TpK89NJLeeedd1Zorn79+uXee+/Ngw8+mG222SbbbrttLrzwwq9cNqxVq1ZuvfXWTJkyJVtssUWOO+64/PKXv/zS82y77ba5+uqrc/HFF6dz58558MEHc/LJJ3+pZ2jcuHGuvvrq9OzZM506dcrDDz+cP/7xj2nSpMlXekYAAAAAAAAAAAAoZiVVVVVVhQ7BmlNZWZlGjRrl2REd07Bu7ULHAQCKRKtTpxc6AgAAAAAAAPAZPukUzZs3LxUVFYWOAwVT8BUqAQAAAAAAAAAAAApNoRIAAAAAAAAAAAAoegqVAAAAAAAAAAAAQNFTqAQAAAAAAAAAAACKnkIlAAAAAAAAAAAAUPQUKgEAAAAAAAAAAICip1AJAAAAAAAAAAAAFD2FSgAAAAAAAAAAAKDoKVQCAAAAAAAAAAAARa+00AEojJYnPZmKiopCxwAAAAAAAAAAAICvBStUAgAAAAAAAAAAAEVPoRIAAAAAAAAAAAAoegqVAAAAAAAAAAAAQNFTqAQAAAAAAAAAAACKnkIlAAAAAAAAAAAAUPQUKgEAAAAAAAAAAICiV1roABTGjif/NrXLygsdAwD4lpjyy0GFjgAAAAAAAAAAX4kVKgEAAAAAAAAAAICip1AJAAAAAAAAAAAAFD2FSgAAAAAAAAAAAKDoKVQCAAAAAAAAAAAARU+hEgAAAAAAAAAAACh6CpUAAAAAAAAAAABA0VOoBAAAAAAAAAAAAIqeQiUAAAAAAAAAAABQ9BQqAQAAAAAAAAAAgKKnUAkAAAAAAAAAAAAUvW99ofLJJ59MkyZN8uMf/zgzZszI9773vUJH+lRjx45N48aNCx0DAAAAAAAAAAAAitI3rlA5ePDg7Lnnnit8/T333JNzzz036667bnbbbbf85Cc/WSUZSkpKUlJSkjp16qRdu3Y5/fTT8/HHH3/luQEAAAAAAAAAAIA1r7TQAVa3s88+u/rP55xzziqbt3///rn++uuzaNGi/OlPf8rRRx+dtdZaKyNGjFhl9/hPixcvTp06dVbL3AAAAAAAAAAAAFDsvnErVP6nRYsW5dhjj816662XunXrZvvtt8/kyZOrzy9dujRDhgxJmzZtUl5eng4dOuTiiy+uMceyZcty+umnZ8MNN0xZWVm6dOmS+++//wvvXVZWlmbNmqV169Y58sgj07dv39xzzz3VuYYPH54NNtgg9evXT48ePTJ+/Pga48eOHZtWrVqlXr162WuvvTJ37twa50eOHJkuXbrkmmuuSZs2bVK3bt0kyaxZs7LHHnukQYMGqaioyA9/+MO89dZbK/PzAQAAAAAAAAAAAP/nG12oPPHEE3PnnXfmhhtuyNNPP5127dqlX79+effdd5P8uyy54YYb5vbbb8/zzz+fU089NT//+c9z2223Vc9x8cUX5/zzz8+vfvWrTJs2Lf369cv3v//9vPDCC18qS3l5eRYvXpwkGTp0aJ544onceuutmTZtWvbdd9/079+/es6JEydmyJAhGTp0aKZOnZo+ffrkzDPPXG7OF198MXfeeWfuuuuuTJ06NcuWLcsee+yRd999N48++mgeeuihvPzyy9lvv/0+M9eiRYtSWVlZYwMAAAAAAAAAAABqKqmqqqoqdIgvY/DgwXn//fdzyy23ZO21187YsWNz4IEHJkmWLFmSjTbaKMOGDcvPfvazTx0/dOjQvPnmm7njjjuSJBtssEGOPvro/PznP6++pnv37tlmm21y2WWXfW6Gu+++O1VVVRk3blx23333HHPMMTnmmGPStm3bzJo1Ky1atKge07dv33Tv3j1nn312DjzwwMybNy/33Xdf9fn9998/999/f95///0k/16h8uyzz87//u//pmnTpkmShx56KLvuumteeeWVtGzZMkny/PPPZ/PNN8+kSZOyzTbbLJd15MiRGTVq1HLHOx9zZWqXlX/m7wwA8GVM+eWgQkcAAAAAAAAAVlJlZWUaNWqUefPmpaKiotBxoGC+sStUvvTSS1myZEl69uxZfWyttdZK9+7dM2PGjOpjl112Wbbeeus0bdo0DRo0yFVXXZVZs2Yl+fc/CF5//fUacyRJz549a8zxae699940aNAgdevWza677pr99tsvI0eOzPTp07N06dJssskmadCgQfX26KOP5qWXXkqSzJgxIz169Kgx33bbbbfcPVq3bl1dpvxkXMuWLavLlEmy2WabpXHjxp+Zd8SIEZk3b171Nnv27M99LgAAAAAAAAAAAChGpYUOsDrdeuutGT58eM4///xst912adiwYX75y19m4sSJX3nuPn365IorrkidOnXSokWLlJb++6ecP39+ateunSlTpqR27do1xjRo0OBL3aN+/fpfOWdZWVnKysq+8jwAAAAAAAAAAADwbfaNLVRuvPHGqVOnTiZMmJDWrVsn+fcnvydPnpxhw4YlSSZMmJDvfOc7Oeqoo6rHfbJKZJJUVFSkRYsWmTBhQnr16lV9fMKECenevfvn3r9+/fpp167dcse7du2apUuXZs6cOdlhhx0+dWzHjh2XK3U++eSTn//A/zdu9uzZmT17do1Pfr///vvZbLPNvnA8AAAAAAAAAAAA8Om+sYXK+vXr58gjj8zPfvazrLPOOmnVqlXOO++8LFy4MEOGDEmStG/fPjfeeGMeeOCBtGnTJjfddFMmT56cNm3aVM/zs5/9LKeddlo23njjdOnSJddff32mTp2aW265ZaVybbLJJhk4cGAGDRqU888/P127ds3bb7+dcePGpVOnTvne976XY489Nj179syvfvWr7LHHHnnggQdy//33f+Hcffv2zZZbbpmBAwfmoosuyscff5yjjjoqvXr1Srdu3VYqLwAAAAAAAAAAAJDUKnSAL2vZsmXVn9c+55xzss8+++Sggw7KVlttlRdffDEPPPBA1l577STJT37yk+y9997Zb7/90qNHj8ydO7fGapVJcuyxx+b444/PCSeckC233DL3339/7rnnnrRv336lM15//fUZNGhQTjjhhHTo0CF77rlnJk+enFatWiVJtt1221x99dW5+OKL07lz5zz44IM5+eSTv3DekpKS/OEPf8jaa6+dHXfcMX379k3btm3zu9/9bqWzAgAAAAAAAAAAAElJVVVVVaFDfBn9+/dPu3btMmbMmEJH+UaqrKxMo0aN0vmYK1O7rLzQcQCAb4kpvxxU6AgAAAAAAADASvqkUzRv3rxUVFQUOg4UzDdmhcr33nsv9957b8aPH5++ffsWOg4AAAAAAAAAAADwLVJa6AAr6tBDD83kyZNzwgknZI899ih0HAAAAAAAAAAAAOBb5BtTqPz9739f6AgAAAAAAAAAAADAt9Q35pPfAAAAAAAAAAAAAKuLQiUAAAAAAAAAAABQ9BQqAQAAAAAAAAAAgKKnUAkAAAAAAAAAAAAUPYVKAAAAAAAAAAAAoOiVFjoAhfHXMw9IRUVFoWMAAAAAAAAAAADA14IVKgEAAAAAAAAAAICip1AJAAAAAAAAAAAAFD2FSgAAAAAAAAAAAKDoKVQCAAAAAAAAAAAARU+hEgAAAAAAAAAAACh6CpUAAAAAAAAAAABA0VOoBAAAAAAAAAAAAIpeaaEDUBi7XLlLSsv99QPAmjLhmAmFjgAAAAAAAAAAfA4rVAIAAAAAAAAAAABFT6ESAAAAAAAAAAAAKHoKlQAAAAAAAAAAAEDRU6gEAAAAAAAAAAAAip5CJQAAAAAAAAAAAFD0FCoBAAAAAAAAAACAoqdQCQAAAAAAAAAAABQ9hUoAAAAAAAAAAACg6ClUAgAAAAAAAAAAAEVPoXI1Kykpyd13313oGAAAAAAAAAAAAMDnUKj8it5+++0ceeSRadWqVcrKytKsWbP069cvEyZMKHQ0AAAAAAAAAAAAYAWVFjrAN90+++yTxYsX54Ybbkjbtm3z1ltvZdy4cZk7d26howEAAAAAAAAAAAAryAqVX8H777+fxx57LOeee2769OmT1q1bp3v37hkxYkS+//3vV1/3zjvvZK+99kq9evXSvn373HPPPdXnli5dmiFDhqRNmzYpLy9Phw4dcvHFF1eff/bZZ1OrVq28/fbbSZJ33303tWrVyv777199zZlnnpntt99+DTwxAAAAAAAAAAAAfDspVH4FDRo0SIMGDXL33Xdn0aJFn3ndqFGj8sMf/jDTpk3LbrvtloEDB+bdd99Nkixbtiwbbrhhbr/99jz//PM59dRT8/Of/zy33XZbkmTzzTdPkyZN8uijjyZJHnvssRr7SfLoo4+md+/en3rvRYsWpbKyssYGAAAAAAAAAAAA1KRQ+RWUlpZm7NixueGGG9K4ceP07NkzP//5zzNt2rQa1w0ePDgHHHBA2rVrl7PPPjvz58/PpEmTkiRrrbVWRo0alW7duqVNmzYZOHBgDjnkkOpCZUlJSXbccceMHz8+STJ+/PgccsghWbRoUf7xj39kyZIl+dvf/pZevXp9asbRo0enUaNG1VvLli1X3w8CAAAAAAAAAAAA31AKlV/RPvvsk9dffz333HNP+vfvn/Hjx2errbbK2LFjq6/p1KlT9Z/r16+fioqKzJkzp/rYZZddlq233jpNmzZNgwYNctVVV2XWrFnV53v16lVdqHz00Uez0047VZcsJ0+enCVLlqRnz56fmm/EiBGZN29e9TZ79uxV+wMAAAAAAAAAAADAt4BC5SpQt27d7LLLLjnllFPyt7/9LYMHD85pp51WfX6ttdaqcX1JSUmWLVuWJLn11lszfPjwDBkyJA8++GCmTp2aQw45JIsXL66+vnfv3nn++efzwgsv5Pnnn8/222+f3r17Z/z48Xn00UfTrVu31KtX71OzlZWVpaKiosYGAAAAAAAAAAAA1FRa6ADfRptttlnuvvvuFbp2woQJ+c53vpOjjjqq+thLL71U45ott9wya6+9ds4888x06dIlDRo0SO/evXPuuefmvffeS+/evVdhegAAAAAAAAAAACg+Vqj8CubOnZuddtopN998c6ZNm5ZXXnklt99+e84777zsscceKzRH+/bt89RTT+WBBx7IP//5z5xyyimZPHlyjWtKSkqy44475pZbbqkuT3bq1CmLFi3KuHHj0qtXr1X9aAAAAAAAAAAAAFBUFCq/ggYNGqRHjx658MILs+OOO2aLLbbIKaecksMOOyxjxoxZoTl+8pOfZO+9985+++2XHj16ZO7cuTVWq/xEr169snTp0upCZa1atbLjjjumpKQkPXv2XJWPBQAAAAAAAAAAAEWnpKqqqqrQIVhzKisr06hRo3Q/t3tKy33xHQDWlAnHTCh0BAAAAAAAAIBP9UmnaN68eamoqCh0HCgYK1QCAAAAAAAAAAAARU+hEgAAAAAAAAAAACh6CpUAAAAAAAAAAABA0VOoBAAAAAAAAAAAAIqeQiUAAAAAAAAAAABQ9BQqAQAAAAAAAAAAgKKnUAkAAAAAAAAAAAAUPYVKAAAAAAAAAAAAoOgpVAIAAAAAAAAAAABFr7TQASiMh454KBUVFYWOAQAAAAAAAAAAAF8LVqgEAAAAAAAAAAAAip5CJQAAAAAAAAAAAFD0FCoBAAAAAAAAAACAoqdQCQAAAAAAAAAAABQ9hUoAAAAAAAAAAACg6ClUAgAAAAAAAAAAAEWvtNABKIxdrtwlpeX++gHgy5pwzIRCRwAAAAAAAAAAVgMrVAIAAAAAAAAAAABFT6ESAAAAAAAAAAAAKHoKlQAAAAAAAAAAAEDRU6gEAAAAAAAAAAAAip5CJQAAAAAAAAAAAFD0FCoBAAAAAAAAAACAoqdQCQAAAAAAAAAAABQ9hUoAAAAAAAAAAACg6ClUAgAAAAAAAAAAAEVPoRIAAAAAAAAAAAAoegqVAAAAAAAAAAAAQNEr2kLl4MGDU1JSUr01adIk/fv3z7Rp077UHHvuuefqCwkAAAAAAAAAAACsEUVbqEyS/v3754033sgbb7yRcePGpbS0NLvvvnuhYwEAAAAAAAAAAABrWFEXKsvKytKsWbM0a9YsXbp0yUknnZTZs2fn7bffTpJMnz49O+20U8rLy9OkSZMcfvjhmT9/fpJk5MiRueGGG/KHP/yhepXL8ePH59VXX01JSUluu+227LDDDikvL88222yTf/7zn5k8eXK6deuWBg0aZNddd62+T5JMnjw5u+yyS9Zdd900atQovXr1ytNPP10jb0lJSa655prstddeqVevXtq3b5977rlnzf1gAAAAAAAAAAAA8C1V1IXK/zR//vzcfPPNadeuXZo0aZIFCxakX79+WXvttTN58uTcfvvtefjhhzN06NAkyfDhw/PDH/6wxiqX3/nOd6rnO+2003LyySfn6aefTmlpaQ488MCceOKJufjii/PYY4/lxRdfzKmnnlp9/QcffJCDDz44jz/+eJ588sm0b98+u+22Wz744IMaOUeNGpUf/vCHmTZtWnbbbbcMHDgw77777mc+16JFi1JZWVljAwAAAAAAAAAAAGoqLXSAQrr33nvToEGDJMmCBQvSvHnz3HvvvalVq1Z+85vf5KOPPsqNN96Y+vXrJ0nGjBmTAQMG5Nxzz83666+f8vLyLFq0KM2aNVtu7uHDh6dfv35Jkp/+9Kc54IADMm7cuPTs2TNJMmTIkIwdO7b6+p122qnG+KuuuiqNGzfOo48+WuMz5IMHD84BBxyQJDn77LNzySWXZNKkSenfv/+nPuPo0aMzatSolfyFAAAAAAAAAAAAoDgU9QqVffr0ydSpUzN16tRMmjQp/fr1y6677prXXnstM2bMSOfOnavLlEnSs2fPLFu2LDNnzvzCuTt16lT95/XXXz9JsuWWW9Y4NmfOnOr9t956K4cddljat2+fRo0apaKiIvPnz8+sWbM+c9769eunoqKixjz/bcSIEZk3b171Nnv27C/MDgAAAAAAAAAAAMWmqFeorF+/ftq1a1e9f80116RRo0a5+uqrv/Lca621VvWfS0pKPvXYsmXLqvcPPvjgzJ07NxdffHFat26dsrKybLfddlm8ePFnzvtp8/y3srKylJWVfaVnAQAAAAAAAAAAgG+7ol6h8r+VlJSkVq1a+fDDD9OxY8c888wzWbBgQfX5CRMmpFatWunQoUOSpE6dOlm6dOkqufeECRNy7LHHZrfddsvmm2+esrKyvPPOO6tkbgAAAAAAAAAAAODzFXWhctGiRXnzzTfz5ptvZsaMGTnmmGMyf/78DBgwIAMHDkzdunVz8MEH59lnn80jjzySY445JgcddFD1J7w32mijTJs2LTNnzsw777yTJUuWrHSW9u3b56abbsqMGTMyceLEDBw4MOXl5avqUQEAAAAAAAAAAIDPUdSFyvvvvz/NmzdP8+bN06NHj0yePDm33357evfunXr16uWBBx7Iu+++m2222SY/+MEPsvPOO2fMmDHV4w877LB06NAh3bp1S9OmTTNhwoSVznLttdfmvffey1ZbbZWDDjooxx57bNZbb71V8ZgAAAAAAAAAAADAFyipqqqqKnQI1pzKyso0atQo3c/tntLy0kLHAYBvnAnHrPz/QAEAAAAAAADwdfRJp2jevHmpqKgodBwomKJeoRIAAAAAAAAAAAAgUagEAAAAAAAAAAAAUKgEAAAAAAAAAAAAUKgEAAAAAAAAAAAAip5CJQAAAAAAAAAAAFD0FCoBAAAAAAAAAACAoqdQCQAAAAAAAAAAABQ9hUoAAAAAAAAAAACg6JUWOgCF8dARD6WioqLQMQAAAAAAAAAAAOBrwQqVAAAAAAAAAAAAQNFTqAQAAAAAAAAAAACKnk9+F5mqqqokSWVlZYGTAAAAAAAAAAAAXwefdIk+6RZBsVKoLDJz585NkrRs2bLASQAAAAAAAAAAgK+TDz74II0aNSp0DCgYhcois8466yRJZs2a5R9+AFBAlZWVadmyZWbPnp2KiopCxwGAouWdDABfD97JAPD14b0MUJyqqqrywQcfpEWLFoWOAgWlUFlkatWqlSRp1KiRf/kFgK+BiooK72QA+BrwTgaArwfvZAD4+vBeBig+FmeDpFahAwAAAAAAAAAAAAAUmkIlAAAAAAAAAAAAUPQUKotMWVlZTjvttJSVlRU6CgAUNe9kAPh68E4GgK8H72QA+PrwXgYAillJVVVVVaFDAAAAAAAAAAAAABSSFSoBAAAAAAAAAACAoqdQCQAAAAAAAAAAABQ9hUoAAAAAAAAAAACg6ClUAgAAAAAAAAAAAEVPoRIAAAAAAAAAAAAoeqWFDsDq9c477+S6667LE088kTfffDNJ0qxZs3znO9/J4MGD07Rp0wInBAAAAAAAAAAAgMIrqaqqqip0CFaPyZMnp1+/fqlXr1769u2b9ddfP0ny1ltvZdy4cVm4cGEeeOCBdOvWrcBJAaA4TJo0abn/yWG77bZL9+7dC5wMAIqLdzIAFN7ixYtz9913f+piAHvssUfq1KlT4IQAUDy8lwEA/j+Fym+xbbfdNp07d86VV16ZkpKSGueqqqpyxBFHZNq0aXniiScKlBAAisOcOXOyzz77ZMKECWnVqlWN/8lh1qxZ6dmzZ+68886st956BU4KAN9u3skA8PXw4osvpl+/fnn99dfTo0ePGu/kiRMnZsMNN8yf//zntGvXrsBJAeDbz3sZAKAmhcpvsfLy8vz973/Ppptu+qnn//GPf6Rr16758MMP13AyACguP/jBD/L666/n+uuvT4cOHWqcmzlzZg499NC0aNEit99+e4ESAkBx8E4GgK+HXXbZJfXr18+NN96YioqKGucqKyszaNCgfPjhh3nggQcKlBAAiof3MgBATQqV32Jt2rTJqFGjMmjQoE89f+ONN+bUU0/Nq6++umaDAUCRadiwYf7617+ma9eun3p+ypQp6d27dz744IM1nAwAiot3MgB8PdSrVy+TJk3KFlts8annp0+fnh49emThwoVrOBkAFB/vZQCAmkoLHYDVZ/jw4Tn88MMzZcqU7LzzzjWWZx83blyuvvrq/OpXvypwSgD49isrK0tlZeVnnv/ggw9SVla2BhMBQHHyTgaAr4fGjRvn1Vdf/czixquvvprGjRuv2VAAUKS8lwEAalKo/BY7+uijs+666+bCCy/M5ZdfnqVLlyZJateuna233jpjx47ND3/4wwKnBIBvv/322y8HH3xwLrzwwuy8887Vn02prKzMuHHjcvzxx+eAAw4ocEoA+PbzTgaAr4cf//jHGTRoUE455ZRPXQzgzDPPzDHHHFPglABQHLyXAQBq8snvIrFkyZK88847SZJ11103a621VoETAUDxWLRoUYYNG5brrrsuH3/8cerUqZMkWbx4cUpLSzNkyJBceOGFVsQCgNXss97JixYtylprreWdDABr0LnnnpuLL744b775ZkpKSpIkVVVVadasWYYNG5YTTzyxwAkBoHh4LwMA/H8KlQAAa0hlZWWmTJmSN998M0nSrFmzbL311tWrYwEAa0ZlZWWeeuqpvPXWW0mS9ddfP926dfNOBoACeOWVV2r8d3KbNm0KnAgAipf3MgCAQiUAAABQ5OrUqZNnnnkmHTt2LHQUAAAAAACggEoLHQAAoBh8+OGHmTJlStZZZ51sttlmNc599NFHue222zJo0KACpQOA4nD88cd/6vGlS5fmnHPOSZMmTZIkF1xwwZqMBQBF5+mnn87aa69dverVTTfdlCuvvDKzZs1K69atM3To0Oy///4FTgkAxWPMmDGZNGlSdtttt+y///656aabMnr06Cxbtix77713Tj/99JSWqhYAAMXBv/UAAKxm//znP/Pd7343s2bNSklJSbbffvv89re/TYsWLZIk8+bNyyGHHKJQCQCr2UUXXZTOnTuncePGNY5XVVVlxowZqV+/fkpKSgoTDgCKyCGHHJLzzz8/bdq0yTXXXJNjjz02hx12WA466KDMnDkzhx12WBYuXJhDDz200FEB4FvvzDPPzHnnnZfvfve7Oe644/Laa6/ll7/8ZY477rjUqlUrF154YdZaa62MGjWq0FEBANYIn/wGAFjN9tprryxZsiRjx47N+++/n2HDhuX555/P+PHj06pVq7z11ltp0aJFli5dWuioAPCtds455+Sqq67KNddck5122qn6+FprrZVnnnlmuVWkAYDVo169epkxY0Zat26drbbaKkceeWQOO+yw6vO/+c1vctZZZ+W5554rYEoAKA7t2rXLeeedl7333jvPPPNMtt5669xwww0ZOHBgkuT3v/99TjzxxLzwwgsFTgoAsGbUKnQAAIBvu7/97W8ZPXp01l133bRr1y5//OMf069fv+ywww55+eWXCx0PAIrGSSedlN/97nc58sgjM3z48CxZsqTQkQCgKNWrVy/vvPNOkuR///d/07179xrne/TokVdeeaUQ0QCg6Lz++uvp1q1bkqRz586pVatWunTpUn1+q622yuuvv16gdAAAa55CJQDAavbhhx+mtLS0er+kpCRXXHFFBgwYkF69euWf//xnAdMBQHHZZpttMmXKlLz99tvp1q1bnn32WZ/5BoA1bNddd80VV1yRJOnVq1fuuOOOGudvu+22tGvXrhDRAKDoNGvWLM8//3yS5IUXXsjSpUur95Pkueeey3rrrVeoeAAAa1zpF18CAMBXsemmm+app55Kx44daxwfM2ZMkuT73/9+IWIBQNFq0KBBbrjhhtx6663p27dvli5dWuhIAFBUzj333PTs2TO9evVKt27dcv7552f8+PHp2LFjZs6cmSeffDK///3vCx0TAIrCwIEDM2jQoOyxxx4ZN25cTjzxxAwfPjxz585NSUlJzjrrrPzgBz8odEwAgDWmpKqqqqrQIQAAvs1Gjx6dxx57LH/6058+9fxRRx2VK6+8MsuWLVvDyQCAf/3rX5kyZUr69u2b+vXrFzoOABSN999/P+ecc07++Mc/5uWXX86yZcvSvHnz9OzZM8cdd1z1p0cBgNVr2bJlOeecc/LEE0/kO9/5Tk466aT87ne/y4knnpiFCxdmwIABGTNmjP9mBgCKhkIlAAAAAAAAAAAAUPRqFToAAAAAAAAAAAAAQKEpVAIAAAAAAAAAAABFT6ESAAAAAAAAAAAAKHoKlQAAAADwOV599dWUlJRk6tSphY6ynC+Tbfz48SkpKcn777+/2nMBAAAAAHwTKVQCAAAAwBr0dS5oFrOxY8emcePGhY4BAAAAABSQQiUAAAAA8LW1ePHiQkcAAAAAAIqEQiUAAAAAReGOO+7IlltumfLy8jRp0iR9+/bNggULkiTXXHNNOnbsmLp162bTTTfN5Zdf/rlzPfvss9l1113ToEGDrL/++jnooIPyzjvvVJ9ftmxZzjvvvLRr1y5lZWVp1apVzjrrrCRJmzZtkiRdu3ZNSUlJevfuXT3ui3JMmjQpXbt2Td26ddOtW7f8/e9//9K/w4QJE9KpU6fUrVs32267bZ599tkkyYIFC1JRUZE77rijxvX/r717D6n6/uM4/jplptNcF620iwnltDIro8gou4DRSIqIzBosLzFHjhmVXUzpaqeoCCuo1TiaFf6TRUJUy66zWWkWNc9snJCt7ZRbZu4stjrm74/wMH+e8rj9/LX0+YADh/P+nPd5f97f/w5vPp8TJ07Iy8tLv/322xvzNp68mZ+fr8jISHl4eGj48OG6dOlSk3Ut9W7y5MlKSUlRamqqfH19NX36dEnSt99+q5kzZ8rHx0fdunXTxIkTZbFYXOpdY20FBQWaMmWK3nvvPYWHh+ubb76R9Oo69Pj4eD19+lQGg0EGg0Hr1q1rdW8BAAAAAAAAvNsYqAQAAAAAAEC7Z7VaFRcXp4SEBJnNZl28eFFz5sxRQ0ODjhw5oszMTG3evFlms1lZWVnKyMhQbm6u01y1tbWaOnWqRo0apdLSUp0+fVqPHj3SvHnzHGtWr14to9GojIwMVVRU6OjRo+rTp4+kV0ORknTu3DlZrVYVFBRIUot12Gw2zZw5U0OHDlVZWZnWrVun5cuXt7oXK1as0I4dO3Tjxg35+fkpJiZGL168kJeXl+bPny+TydRkvclk0ty5c9WtWzeX8y9btkzl5eUaP368YmJi9PjxY5d7J0m5ublyd3dXcXGx9u3bp59++kmTJk1S165ddf78eZWVlSkhIUF2u92l3jVKT0/X8uXLdevWLQUHBysuLk52u12RkZHatWuXfHx8ZLVaZbVa/1ZvAQAAAAAAALzbDA0NDQ1vuwgAAAAAAACgLd28eVMRERGqqqpSYGBgk9jgwYO1ceNGxcXFOT7btGmTTp06patXr6qqqkpBQUEqLy/XyJEjtWnTJl25ckVnzpxxrH/w4IEGDBigyspK+fv7y8/PT3v27FFSUlKzWv47n6t1fPHFF1qzZo0ePHggDw8PSdK+ffv06aefNsvlzMWLFzVlyhTl5+crNjZWklRTU6P+/fsrJydH8+bN0/Xr1xUZGakff/xR/v7+qq6uVr9+/XTu3DlFRUW9MX/jvoxGo1auXClJstvtCgoK0meffaa0tLQWexccHKzJkyerrq5ON2/edKxZs2aN8vPzVVlZqS5dujT7bVef4cGDB5WYmChJqqio0LBhw2Q2mxUSEqKcnBylpqaqtrb2jfsEAAAAAAAA0H65ve0CAAAAAAAAgLYWHh6uadOmKSwsTNOnT1d0dLTmzp0rd3d3WSwWJSYmavHixY71drtd77//vtNct2/f1oULF+Tt7d0sZrFYVFtbqz///FPTpk1zub7ff/+9xTrMZrPjqu5G48ePd/k3nH2nZ8+e+uCDD2Q2myVJY8eO1bBhw5Sbm6tVq1bp8OHDCgwM1KRJk/5Wfjc3N40ZM8aRv6XeBQcHS5IiIiKaxG7duqWJEyc6HaZ0pXeNRowY4Xjv7+8vSaqurlZISIjL+wMAAAAAAADQfjFQCQAAAAAAgHavc+fO+uqrr3T16lWdPXtWu3fvVnp6ugoLCyVJBw4c0Lhx45p9xxmbzaaYmBht3bq1Wczf31/3799vdX02m63VdbSVpKQk7d27V6tWrZLJZFJ8fLwMBsP/JHdLvWvk5eXVJObp6fnGnJJrvfvrQGbjnl6+fOli9QAAAAAAAADaOwYqAQAAAAAA0CEYDAZNmDBBEyZMUGZmpgIDA1VcXKyAgADdv39fCxcudCnP6NGjdezYMQ0aNEhubs3/XhsyZIg8PT1VVFTk9Mpvd3d3SVJ9fb3jsz59+rRYR2hoqPLy8vTHH384TqksKSlxqea/Kikp0cCBAyVJT5480b179xQaGuqIf/TRR0pLS1N2drYqKir08ccftzp/44mWdrtdZWVlSklJkdRy715nxIgRys3N1YsXL5qdUulK71zh7u7e5JkAAAAAAAAA6Hg6ve0CAAAAAAAAgLZ27do1ZWVlqbS0VD/88IMKCgr0yy+/KDQ0VOvXr9eWLVuUnZ2te/fu6c6dOzKZTNq5c6fTXEuWLFFNTY3i4uJ048YNWSwWnTlzRvHx8aqvr5eHh4dWrlyptLQ0HTp0SBaLRSUlJfryyy8lSb1795anp6dOnz6tR48e6enTp5LUYh0LFiyQwWDQ4sWLVVFRoVOnTmn79u2t7sWGDRtUVFSku3fvatGiRfL19dXs2bMd8R49emjOnDlasWKFoqOj1b9//1bl37t3r44fP67vvvtOS5Ys0ZMnT5SQkOBS714nJSVFdXV1mj9/vkpLS/X9998rLy9PlZWVklrunSsGDRokm82moqIi/frrr3r27Fmr9g0AAAAAAADg3cdAJQAAAAAAANo9Hx8fXb58WR9++KGCg4O1du1a7dixQzNmzFBSUpIOHjwok8mksLAwRUVFKScnR0FBQU5zBQQEqLi4WPX19YqOjlZYWJhSU1PVvXt3der06u+2jIwMLVu2TJmZmQoNDVVsbKyqq6slSW5ubsrOztb+/fsVEBCgWbNmSVKLdXh7e6uwsFB37tzRqFGjlJ6e7vTq7JYYjUZ9/vnnioiI0MOHD1VYWOg4NbNRYmKinj9/7hiEbG1+o9Go8PBwff311zp58qR8fX1d7p0zvXr10vnz52Wz2RQVFaWIiAgdOHDAcVpla5+hM5GRkUpOTlZsbKz8/Py0bdu2Vu8dAAAAAAAAwLvN0NDQ0PC2iwAAAAAAAADw75GXl6elS5fq559/bjZs+TpVVVUKCgpSeXm5Ro4c2bYFAgAAAAAAAEAbcHvbBQAAAAAAAAD4d3j27JmsVquMRqM++eQTl4cpAQAAAAAAAKA94MpvAAAAAAAAoB1ITk6Wt7e301dycrJLObZt26aQkBD17dtXq1evbhLLysp6bf4ZM2a0xZYAAAAAAAAA4P+KK78BAAAAAACAdqC6ulp1dXVOYz4+Purdu/c/yl9TU6OamhqnMU9PT/Xr1+8f5QcAAAAAAACAt42BSgAAAAAAAAAAAAAAAAAA0OFx5TcAAAAAAAAAAAAAAAAAAOjwGKgEAAAAAAAAAAAAAAAAAAAdHgOVAAAAAAAAAAAAAAAAAACgw2OgEgAAAAAAAAAAAAAAAAAAdHgMVAIAAAAAAAAAAAAAAAAAgA6PgUoAAAAAAAAAAAAAAAAAANDhMVAJAAAAAAAAAAAAAAAAAAA6PAYqAQAAAAAAAAAAAAAAAABAh/cfmBuWBNVEYEsAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fbref = pd.read_html('https://fbref.com/en/comps/9/Premier-League-Stats')\n",
        "epltable = fbref[0]\n",
        "epltablexGxGc = epltable.drop(columns=[\n",
        " 'Last 5',\n",
        " 'Attendance',\n",
        " 'Top Team Scorer',\n",
        " 'Goalkeeper',\n",
        " 'Notes'])\n",
        "epltablexGxGc= epltablexGxGc.replace('Newcastle Utd', 'Newcastle United')\n",
        "epltablexGxGc= epltablexGxGc.replace('Wolves','Wolverhampton Wanderers')\n",
        "epltablexGxGc= epltablexGxGc.replace('Leeds United','Leeds')\n",
        "epltablexGxGc= epltablexGxGc.replace('Leicester City','Leicester')\n",
        "epltablexGxGc= epltablexGxGc.replace('Manchester Utd','Manchester United')\n",
        "epltablexGxGc['Squad'] = epltablexGxGc['Squad'].str.replace(r\"[\\\"\\',]\", '')\n",
        "epltablexGxGc= epltablexGxGc.replace('Nottham Forest','Nottingham Forest')\n",
        "epltablexGxGc['xCSP'] = (4 - (epltablexGxGc.xGA * 4/23))\n",
        "epltablexGxGc.rename(columns={'Squad': 'team'}, inplace=True)\n",
        "epltablexGxGc['xG/90'] = (epltablexGxGc.xG / epltablexGxGc.MP)\n",
        "epltablexGxGc['xGA/90'] = (epltablexGxGc.xGA / epltablexGxGc.MP)\n",
        "epltablexGxGc"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 711
        },
        "id": "D8nuKObbLt5s",
        "outputId": "249d2fec-3b52-490b-9d8c-f448eb597387"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-60-f34def3770e4>:14: FutureWarning: The default value of regex will change from True to False in a future version.\n",
            "  epltablexGxGc['Squad'] = epltablexGxGc['Squad'].str.replace(r\"[\\\"\\',]\", '')\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Rk                     team  MP  W  D  L  GF  GA  GD  Pts  Pts/MP   xG  \\\n",
              "0    1                 Brighton   2  2  0  0   8   2   6    6     3.0  6.2   \n",
              "1    2          Manchester City   2  2  0  0   4   0   4    6     3.0  2.9   \n",
              "2    3                  Arsenal   2  2  0  0   3   1   2    6     3.0  2.8   \n",
              "3    4                Brentford   2  1  1  0   5   2   3    4     2.0  5.9   \n",
              "4    5                Liverpool   2  1  1  0   4   2   2    4     2.0  4.3   \n",
              "5    6                Tottenham   2  1  1  0   4   2   2    4     2.0  3.0   \n",
              "6    7                 West Ham   2  1  1  0   4   2   2    4     2.0  2.9   \n",
              "7    8         Newcastle United   2  1  0  1   5   2   3    3     1.5  3.6   \n",
              "8    9              Aston Villa   2  1  0  1   5   5   0    3     1.5  4.7   \n",
              "9   10        Nottingham Forest   2  1  0  1   3   3   0    3     1.5  2.6   \n",
              "10  11           Crystal Palace   2  1  0  1   1   1   0    3     1.5  2.9   \n",
              "11  12        Manchester United   2  1  0  1   1   2  -1    3     1.5  4.3   \n",
              "12  13                   Fulham   2  1  0  1   1   3  -2    3     1.5  2.0   \n",
              "13  14              Bournemouth   2  0  1  1   2   4  -2    1     0.5  2.6   \n",
              "14  15                  Chelsea   2  0  1  1   2   4  -2    1     0.5  3.8   \n",
              "15  16            Sheffield Utd   2  0  0  2   1   3  -2    0     0.0  1.0   \n",
              "16  17               Luton Town   1  0  0  1   1   4  -3    0     0.0  1.5   \n",
              "17  18                  Burnley   1  0  0  1   0   3  -3    0     0.0  0.3   \n",
              "18  19  Wolverhampton Wanderers   2  0  0  2   1   5  -4    0     0.0  4.3   \n",
              "19  20                  Everton   2  0  0  2   0   5  -5    0     0.0  3.3   \n",
              "\n",
              "    xGA  xGD  xGD/90      xCSP  xG/90  xGA/90  \n",
              "0   3.5  2.7    1.34  3.391304   3.10    1.75  \n",
              "1   0.6  2.3    1.17  3.895652   1.45    0.30  \n",
              "2   2.2  0.7    0.33  3.617391   1.40    1.10  \n",
              "3   1.7  4.1    2.06  3.704348   2.95    0.85  \n",
              "4   2.6  1.7    0.84  3.547826   2.15    1.30  \n",
              "5   4.3 -1.3   -0.63  3.252174   1.50    2.15  \n",
              "6   3.8 -0.9   -0.47  3.339130   1.45    1.90  \n",
              "7   2.8  0.9    0.44  3.513043   1.80    1.40  \n",
              "8   4.0  0.7    0.35  3.304348   2.35    2.00  \n",
              "9   1.3  1.2    0.62  3.773913   1.30    0.65  \n",
              "10  2.5  0.4    0.18  3.565217   1.45    1.25  \n",
              "11  4.0  0.3    0.15  3.304348   2.15    2.00  \n",
              "12  6.4 -4.4   -2.21  2.886957   1.00    3.20  \n",
              "13  4.1 -1.5   -0.76  3.286957   1.30    2.05  \n",
              "14  3.1  0.8    0.39  3.460870   1.90    1.55  \n",
              "15  3.3 -2.3   -1.13  3.426087   0.50    1.65  \n",
              "16  4.0 -2.5   -2.54  3.304348   1.50    4.00  \n",
              "17  1.9 -1.6   -1.62  3.669565   0.30    1.90  \n",
              "18  4.4 -0.1   -0.06  3.234783   2.15    2.20  \n",
              "19  4.4 -1.1   -0.54  3.234783   1.65    2.20  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-00d5d7a5-6e0c-48fc-81b7-97a5ea16cceb\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Rk</th>\n",
              "      <th>team</th>\n",
              "      <th>MP</th>\n",
              "      <th>W</th>\n",
              "      <th>D</th>\n",
              "      <th>L</th>\n",
              "      <th>GF</th>\n",
              "      <th>GA</th>\n",
              "      <th>GD</th>\n",
              "      <th>Pts</th>\n",
              "      <th>Pts/MP</th>\n",
              "      <th>xG</th>\n",
              "      <th>xGA</th>\n",
              "      <th>xGD</th>\n",
              "      <th>xGD/90</th>\n",
              "      <th>xCSP</th>\n",
              "      <th>xG/90</th>\n",
              "      <th>xGA/90</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Brighton</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>3.0</td>\n",
              "      <td>6.2</td>\n",
              "      <td>3.5</td>\n",
              "      <td>2.7</td>\n",
              "      <td>1.34</td>\n",
              "      <td>3.391304</td>\n",
              "      <td>3.10</td>\n",
              "      <td>1.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>Manchester City</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.9</td>\n",
              "      <td>0.6</td>\n",
              "      <td>2.3</td>\n",
              "      <td>1.17</td>\n",
              "      <td>3.895652</td>\n",
              "      <td>1.45</td>\n",
              "      <td>0.30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.8</td>\n",
              "      <td>2.2</td>\n",
              "      <td>0.7</td>\n",
              "      <td>0.33</td>\n",
              "      <td>3.617391</td>\n",
              "      <td>1.40</td>\n",
              "      <td>1.10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>Brentford</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>2.0</td>\n",
              "      <td>5.9</td>\n",
              "      <td>1.7</td>\n",
              "      <td>4.1</td>\n",
              "      <td>2.06</td>\n",
              "      <td>3.704348</td>\n",
              "      <td>2.95</td>\n",
              "      <td>0.85</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>2.0</td>\n",
              "      <td>4.3</td>\n",
              "      <td>2.6</td>\n",
              "      <td>1.7</td>\n",
              "      <td>0.84</td>\n",
              "      <td>3.547826</td>\n",
              "      <td>2.15</td>\n",
              "      <td>1.30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>6</td>\n",
              "      <td>Tottenham</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>2.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>4.3</td>\n",
              "      <td>-1.3</td>\n",
              "      <td>-0.63</td>\n",
              "      <td>3.252174</td>\n",
              "      <td>1.50</td>\n",
              "      <td>2.15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>7</td>\n",
              "      <td>West Ham</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.9</td>\n",
              "      <td>3.8</td>\n",
              "      <td>-0.9</td>\n",
              "      <td>-0.47</td>\n",
              "      <td>3.339130</td>\n",
              "      <td>1.45</td>\n",
              "      <td>1.90</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>8</td>\n",
              "      <td>Newcastle United</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>1.5</td>\n",
              "      <td>3.6</td>\n",
              "      <td>2.8</td>\n",
              "      <td>0.9</td>\n",
              "      <td>0.44</td>\n",
              "      <td>3.513043</td>\n",
              "      <td>1.80</td>\n",
              "      <td>1.40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>9</td>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1.5</td>\n",
              "      <td>4.7</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.7</td>\n",
              "      <td>0.35</td>\n",
              "      <td>3.304348</td>\n",
              "      <td>2.35</td>\n",
              "      <td>2.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>10</td>\n",
              "      <td>Nottingham Forest</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1.5</td>\n",
              "      <td>2.6</td>\n",
              "      <td>1.3</td>\n",
              "      <td>1.2</td>\n",
              "      <td>0.62</td>\n",
              "      <td>3.773913</td>\n",
              "      <td>1.30</td>\n",
              "      <td>0.65</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>11</td>\n",
              "      <td>Crystal Palace</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1.5</td>\n",
              "      <td>2.9</td>\n",
              "      <td>2.5</td>\n",
              "      <td>0.4</td>\n",
              "      <td>0.18</td>\n",
              "      <td>3.565217</td>\n",
              "      <td>1.45</td>\n",
              "      <td>1.25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>12</td>\n",
              "      <td>Manchester United</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>-1</td>\n",
              "      <td>3</td>\n",
              "      <td>1.5</td>\n",
              "      <td>4.3</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.3</td>\n",
              "      <td>0.15</td>\n",
              "      <td>3.304348</td>\n",
              "      <td>2.15</td>\n",
              "      <td>2.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>13</td>\n",
              "      <td>Fulham</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>-2</td>\n",
              "      <td>3</td>\n",
              "      <td>1.5</td>\n",
              "      <td>2.0</td>\n",
              "      <td>6.4</td>\n",
              "      <td>-4.4</td>\n",
              "      <td>-2.21</td>\n",
              "      <td>2.886957</td>\n",
              "      <td>1.00</td>\n",
              "      <td>3.20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>14</td>\n",
              "      <td>Bournemouth</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>-2</td>\n",
              "      <td>1</td>\n",
              "      <td>0.5</td>\n",
              "      <td>2.6</td>\n",
              "      <td>4.1</td>\n",
              "      <td>-1.5</td>\n",
              "      <td>-0.76</td>\n",
              "      <td>3.286957</td>\n",
              "      <td>1.30</td>\n",
              "      <td>2.05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>15</td>\n",
              "      <td>Chelsea</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>-2</td>\n",
              "      <td>1</td>\n",
              "      <td>0.5</td>\n",
              "      <td>3.8</td>\n",
              "      <td>3.1</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.39</td>\n",
              "      <td>3.460870</td>\n",
              "      <td>1.90</td>\n",
              "      <td>1.55</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>16</td>\n",
              "      <td>Sheffield Utd</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>-2</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.3</td>\n",
              "      <td>-2.3</td>\n",
              "      <td>-1.13</td>\n",
              "      <td>3.426087</td>\n",
              "      <td>0.50</td>\n",
              "      <td>1.65</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>17</td>\n",
              "      <td>Luton Town</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>-3</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.5</td>\n",
              "      <td>4.0</td>\n",
              "      <td>-2.5</td>\n",
              "      <td>-2.54</td>\n",
              "      <td>3.304348</td>\n",
              "      <td>1.50</td>\n",
              "      <td>4.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>18</td>\n",
              "      <td>Burnley</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>-3</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.3</td>\n",
              "      <td>1.9</td>\n",
              "      <td>-1.6</td>\n",
              "      <td>-1.62</td>\n",
              "      <td>3.669565</td>\n",
              "      <td>0.30</td>\n",
              "      <td>1.90</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>19</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>-4</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.3</td>\n",
              "      <td>4.4</td>\n",
              "      <td>-0.1</td>\n",
              "      <td>-0.06</td>\n",
              "      <td>3.234783</td>\n",
              "      <td>2.15</td>\n",
              "      <td>2.20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>20</td>\n",
              "      <td>Everton</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>-5</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3.3</td>\n",
              "      <td>4.4</td>\n",
              "      <td>-1.1</td>\n",
              "      <td>-0.54</td>\n",
              "      <td>3.234783</td>\n",
              "      <td>1.65</td>\n",
              "      <td>2.20</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-00d5d7a5-6e0c-48fc-81b7-97a5ea16cceb')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-00d5d7a5-6e0c-48fc-81b7-97a5ea16cceb button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-00d5d7a5-6e0c-48fc-81b7-97a5ea16cceb');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-de7d434c-1230-41ec-9a3b-e0f575d009a9\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-de7d434c-1230-41ec-9a3b-e0f575d009a9')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-de7d434c-1230-41ec-9a3b-e0f575d009a9 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig, ax = plt.subplots(1, figsize=(10,8))\n",
        "ax.scatter(x=epltablexGxGc['xG/90'],y=epltablexGxGc['xGA/90'],c='DarkBlue')\n",
        "# set labels\n",
        "ax.set_xlabel('xG/90')\n",
        "ax.set_ylabel('xGA/90')\n",
        "\n",
        "# annotate points in axis\n",
        "for idx, row in epltablexGxGc.iterrows():\n",
        "    ax.annotate(row['team'], (row['xG/90'], row['xGA/90']) )\n",
        "# force matplotlib to draw the graph\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 704
        },
        "id": "TYn5yVsCNlLv",
        "outputId": "e4956ab9-5d2d-400f-b66c-209023012059"
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "EPL_player_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 583
        },
        "id": "wrjHrDmJ8OlM",
        "outputId": "9d6c5695-87f4-4a69-8707-3c169c8d5d81"
      },
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        id       player_name games_x time_x goals_1wks_x           xG_1wks_x  \\\n",
              "0     6049       Solly March       1     90            2  1.4262738227844238   \n",
              "1     6552      Bryan Mbeumo       1     90            2  1.6695406436920166   \n",
              "2      531   Michail Antonio       1     85            1  0.1654975563287735   \n",
              "3     1250     Mohamed Salah       1     90            1  1.8990148305892944   \n",
              "4     2517   Martin Odegaard       1     90            1   0.803106427192688   \n",
              "..     ...               ...     ...    ...          ...                 ...   \n",
              "337  11730  Anis Ben Slimane       1      9            0                   0   \n",
              "338  11731      Andre Brooks       1     14            0                   0   \n",
              "339  11807       Ian Maatsen       1      2            0                   0   \n",
              "340  11810     Mason Burstow       1      1            0                   0   \n",
              "341  11926     Edson √Ålvarez       1      1            0                   0   \n",
              "\n",
              "    assists_1wks_x            xA_1wks_x shots_1wks_x key_passes_1wks_x  ...  \\\n",
              "0                0  0.04624073952436447            5                 1  ...   \n",
              "1                0  0.09496916830539703            3                 1  ...   \n",
              "2                0                    0            2                 0  ...   \n",
              "3                0  0.05190268158912659            5                 2  ...   \n",
              "4                0   0.0701504796743393            3                 1  ...   \n",
              "..             ...                  ...          ...               ...  ...   \n",
              "337              0                    0            0                 0  ...   \n",
              "338              0                    0            0                 0  ...   \n",
              "339              0                    0            0                 0  ...   \n",
              "340              0                    0            0                 0  ...   \n",
              "341              0                    0            0                 0  ...   \n",
              "\n",
              "    shots_1wks_y key_passes_1wks_y yellow_cards red_cards position_y  \\\n",
              "0              5                 1            0         0          M   \n",
              "1              3                 1            0         0          F   \n",
              "2              2                 0            0         0          F   \n",
              "3              5                 2            0         0          F   \n",
              "4              3                 1            0         0          M   \n",
              "..           ...               ...          ...       ...        ...   \n",
              "337            0                 0            1         0          S   \n",
              "338            0                 0            0         0          S   \n",
              "339            0                 0            0         0          S   \n",
              "340            0                 0            0         0          S   \n",
              "341            0                 0            0         0          S   \n",
              "\n",
              "         team_title_y npg_1wks_y           npxG_1wks_y             xGChain  \\\n",
              "0            Brighton          2    1.4262738227844238   1.812856912612915   \n",
              "1           Brentford          1    0.9083718061447144  0.9083718061447144   \n",
              "2            West Ham          1    0.1654975563287735  0.1654975563287735   \n",
              "3           Liverpool          1    1.1378459930419922  0.5016481876373291   \n",
              "4             Arsenal          0  0.041974376887083054   0.598534107208252   \n",
              "..                ...        ...                   ...                 ...   \n",
              "337  Sheffield United          0                     0                   0   \n",
              "338  Sheffield United          0                     0                   0   \n",
              "339           Chelsea          0                     0                   0   \n",
              "340           Chelsea          0                     0                   0   \n",
              "341          West Ham          0                     0                   0   \n",
              "\n",
              "              xGBuildup  \n",
              "0     0.386583149433136  \n",
              "1                     0  \n",
              "2                     0  \n",
              "3                     0  \n",
              "4    0.5773450136184692  \n",
              "..                  ...  \n",
              "337                   0  \n",
              "338                   0  \n",
              "339                   0  \n",
              "340                   0  \n",
              "341                   0  \n",
              "\n",
              "[342 rows x 48 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-eced006b-2c1c-43df-8815-bbf47e35fdb7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>player_name</th>\n",
              "      <th>games_x</th>\n",
              "      <th>time_x</th>\n",
              "      <th>goals_1wks_x</th>\n",
              "      <th>xG_1wks_x</th>\n",
              "      <th>assists_1wks_x</th>\n",
              "      <th>xA_1wks_x</th>\n",
              "      <th>shots_1wks_x</th>\n",
              "      <th>key_passes_1wks_x</th>\n",
              "      <th>...</th>\n",
              "      <th>shots_1wks_y</th>\n",
              "      <th>key_passes_1wks_y</th>\n",
              "      <th>yellow_cards</th>\n",
              "      <th>red_cards</th>\n",
              "      <th>position_y</th>\n",
              "      <th>team_title_y</th>\n",
              "      <th>npg_1wks_y</th>\n",
              "      <th>npxG_1wks_y</th>\n",
              "      <th>xGChain</th>\n",
              "      <th>xGBuildup</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>6049</td>\n",
              "      <td>Solly March</td>\n",
              "      <td>1</td>\n",
              "      <td>90</td>\n",
              "      <td>2</td>\n",
              "      <td>1.4262738227844238</td>\n",
              "      <td>0</td>\n",
              "      <td>0.04624073952436447</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>M</td>\n",
              "      <td>Brighton</td>\n",
              "      <td>2</td>\n",
              "      <td>1.4262738227844238</td>\n",
              "      <td>1.812856912612915</td>\n",
              "      <td>0.386583149433136</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>6552</td>\n",
              "      <td>Bryan Mbeumo</td>\n",
              "      <td>1</td>\n",
              "      <td>90</td>\n",
              "      <td>2</td>\n",
              "      <td>1.6695406436920166</td>\n",
              "      <td>0</td>\n",
              "      <td>0.09496916830539703</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>F</td>\n",
              "      <td>Brentford</td>\n",
              "      <td>1</td>\n",
              "      <td>0.9083718061447144</td>\n",
              "      <td>0.9083718061447144</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>531</td>\n",
              "      <td>Michail Antonio</td>\n",
              "      <td>1</td>\n",
              "      <td>85</td>\n",
              "      <td>1</td>\n",
              "      <td>0.1654975563287735</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>F</td>\n",
              "      <td>West Ham</td>\n",
              "      <td>1</td>\n",
              "      <td>0.1654975563287735</td>\n",
              "      <td>0.1654975563287735</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1250</td>\n",
              "      <td>Mohamed Salah</td>\n",
              "      <td>1</td>\n",
              "      <td>90</td>\n",
              "      <td>1</td>\n",
              "      <td>1.8990148305892944</td>\n",
              "      <td>0</td>\n",
              "      <td>0.05190268158912659</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>F</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>1</td>\n",
              "      <td>1.1378459930419922</td>\n",
              "      <td>0.5016481876373291</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2517</td>\n",
              "      <td>Martin Odegaard</td>\n",
              "      <td>1</td>\n",
              "      <td>90</td>\n",
              "      <td>1</td>\n",
              "      <td>0.803106427192688</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0701504796743393</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>M</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>0</td>\n",
              "      <td>0.041974376887083054</td>\n",
              "      <td>0.598534107208252</td>\n",
              "      <td>0.5773450136184692</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>337</th>\n",
              "      <td>11730</td>\n",
              "      <td>Anis Ben Slimane</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>S</td>\n",
              "      <td>Sheffield United</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>338</th>\n",
              "      <td>11731</td>\n",
              "      <td>Andre Brooks</td>\n",
              "      <td>1</td>\n",
              "      <td>14</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>S</td>\n",
              "      <td>Sheffield United</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>339</th>\n",
              "      <td>11807</td>\n",
              "      <td>Ian Maatsen</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>S</td>\n",
              "      <td>Chelsea</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>340</th>\n",
              "      <td>11810</td>\n",
              "      <td>Mason Burstow</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>S</td>\n",
              "      <td>Chelsea</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>341</th>\n",
              "      <td>11926</td>\n",
              "      <td>Edson √Ålvarez</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>S</td>\n",
              "      <td>West Ham</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>342 rows √ó 48 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-eced006b-2c1c-43df-8815-bbf47e35fdb7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-eced006b-2c1c-43df-8815-bbf47e35fdb7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-eced006b-2c1c-43df-8815-bbf47e35fdb7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2c227791-7571-4ddb-abf8-2de9fb849691\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2c227791-7571-4ddb-abf8-2de9fb849691')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2c227791-7571-4ddb-abf8-2de9fb849691 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 62
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "EPL_player_df['goals'] = EPL_player_df['goals_1wks_x'].astype(int)\n",
        "top25goals = EPL_player_df.nlargest(20, 'goals')\n",
        "top25goals"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 882
        },
        "id": "3H-vTRXF8VDs",
        "outputId": "f93ed5e4-d8d0-4216-89a5-88605aec021f"
      },
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       id         player_name games_x time_x goals_1wks_x  \\\n",
              "0    6049         Solly March       1     90            2   \n",
              "1    6552        Bryan Mbeumo       1     90            2   \n",
              "2     531     Michail Antonio       1     85            1   \n",
              "3    1250       Mohamed Salah       1     90            1   \n",
              "4    2517     Martin Odegaard       1     90            1   \n",
              "5    4456          Chris Wood       1      4            1   \n",
              "6    5136           Estupi√±√°n       1     90            1   \n",
              "7    5221         Leon Bailey       1     72            1   \n",
              "8    5786         Yoane Wissa       1     81            1   \n",
              "9    6122        Douglas Luiz       1     73            1   \n",
              "10   6854          Diogo Jota       1     80            1   \n",
              "11   6935         Naif Aguerd       1     76            1   \n",
              "12   7365       Lucas Paquet√°       1     90            1   \n",
              "13   7723         John McGinn       1     90            1   \n",
              "14   7814       Taiwo Awoniyi       1     86            1   \n",
              "15   8845      Hee-Chan Hwang       1     33            1   \n",
              "16   9021           Pape Sarr       1     79            1   \n",
              "17   9356  Carney Chukwuemeka       1     55            1   \n",
              "18  10408           Luis D√≠az       1     90            1   \n",
              "19  10806        Kaoru Mitoma       1     83            1   \n",
              "\n",
              "              xG_1wks_x assists_1wks_x            xA_1wks_x shots_1wks_x  \\\n",
              "0    1.4262738227844238              0  0.04624073952436447            5   \n",
              "1    1.6695406436920166              0  0.09496916830539703            3   \n",
              "2    0.1654975563287735              0                    0            2   \n",
              "3    1.8990148305892944              0  0.05190268158912659            5   \n",
              "4     0.803106427192688              0   0.0701504796743393            3   \n",
              "5   0.11083554476499557              0                    0            1   \n",
              "6    0.4824194610118866              1   0.5171205401420593            2   \n",
              "7    0.5992322564125061              1   0.6844462156295776            2   \n",
              "8    1.0051542520523071              0                    0            7   \n",
              "9    0.7611688375473022              0  0.11424701660871506            1   \n",
              "10   1.0893257856369019              0  0.10661134123802185            5   \n",
              "11   0.3899350166320801              0                    0            1   \n",
              "12   0.7962145805358887              0  0.05190204828977585            2   \n",
              "13   0.6844462156295776              0                    0            1   \n",
              "14   0.4561017155647278              0  0.07604995369911194            1   \n",
              "15  0.04299672693014145              0   0.6011396646499634            1   \n",
              "16   0.9928526282310486              0  0.04418836906552315            5   \n",
              "17  0.06899454444646835              0   0.1046014130115509            1   \n",
              "18  0.18966040015220642              0   0.2404429018497467            3   \n",
              "19   0.4574770927429199              1   0.6252812743186951            1   \n",
              "\n",
              "   key_passes_1wks_x  ... key_passes_1wks_y yellow_cards red_cards position_y  \\\n",
              "0                  1  ...                 1            0         0          M   \n",
              "1                  1  ...                 1            0         0          F   \n",
              "2                  0  ...                 0            0         0          F   \n",
              "3                  2  ...                 2            0         0          F   \n",
              "4                  1  ...                 1            0         0          M   \n",
              "5                  0  ...                 0            0         0          S   \n",
              "6                  2  ...                 2            1         0          D   \n",
              "7                  1  ...                 1            0         0          M   \n",
              "8                  0  ...                 0            0         0          F   \n",
              "9                  1  ...                 1            1         0          M   \n",
              "10                 2  ...                 2            0         0          F   \n",
              "11                 0  ...                 0            0         1          D   \n",
              "12                 2  ...                 2            1         0          M   \n",
              "13                 0  ...                 0            0         0          M   \n",
              "14                 2  ...                 2            0         0          F   \n",
              "15                 1  ...                 1            1         0          S   \n",
              "16                 1  ...                 1            0         0          M   \n",
              "17                 2  ...                 2            1         0          M   \n",
              "18                 2  ...                 2            0         0          F   \n",
              "19                 4  ...                 4            0         0          M   \n",
              "\n",
              "               team_title_y npg_1wks_y           npxG_1wks_y  \\\n",
              "0                  Brighton          2    1.4262738227844238   \n",
              "1                 Brentford          1    0.9083718061447144   \n",
              "2                  West Ham          1    0.1654975563287735   \n",
              "3                 Liverpool          1    1.1378459930419922   \n",
              "4                   Arsenal          0  0.041974376887083054   \n",
              "5         Nottingham Forest          1   0.11083554476499557   \n",
              "6                  Brighton          1    0.4824194610118866   \n",
              "7               Aston Villa          1    0.5992322564125061   \n",
              "8                 Brentford          1    1.0051542520523071   \n",
              "9               Aston Villa          0                     0   \n",
              "10                Liverpool          1    1.0893257856369019   \n",
              "11                 West Ham          1    0.3899350166320801   \n",
              "12                 West Ham          0  0.035045742988586426   \n",
              "13              Aston Villa          1    0.6844462156295776   \n",
              "14        Nottingham Forest          1    0.4561017155647278   \n",
              "15  Wolverhampton Wanderers          1   0.04299672693014145   \n",
              "16                Tottenham          1    0.9928526282310486   \n",
              "17                  Chelsea          1   0.06899454444646835   \n",
              "18                Liverpool          1   0.18966040015220642   \n",
              "19                 Brighton          1    0.4574770927429199   \n",
              "\n",
              "                xGChain             xGBuildup goals  \n",
              "0     1.812856912612915     0.386583149433136     2  \n",
              "1    0.9083718061447144                     0     2  \n",
              "2    0.1654975563287735                     0     1  \n",
              "3    0.5016481876373291                     0     1  \n",
              "4     0.598534107208252    0.5773450136184692     1  \n",
              "5   0.11083554476499557                     0     1  \n",
              "6    2.0413382053375244    1.4992753267288208     1  \n",
              "7    1.3545973300933838   0.16907110810279846     1  \n",
              "8    0.5309430360794067                     0     1  \n",
              "9      1.28993558883667    1.1756885051727295     1  \n",
              "10   1.1574678421020508  0.030611610040068626     1  \n",
              "11  0.05836445465683937   0.05836445465683937     1  \n",
              "12  0.11367495357990265   0.05836445465683937     1  \n",
              "13    1.018151044845581   0.33370476961135864     1  \n",
              "14   0.5321516394615173                     0     1  \n",
              "15   0.3209632933139801    0.3209632933139801     1  \n",
              "16   1.3739200830459595   0.49511846899986267     1  \n",
              "17  0.17359596490859985                     0     1  \n",
              "18   0.6077734231948853   0.29410865902900696     1  \n",
              "19   1.1424018144607544   0.05964342877268791     1  \n",
              "\n",
              "[20 rows x 49 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-dd9544dc-1a4f-4244-8e58-261bf6a5cf2b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>player_name</th>\n",
              "      <th>games_x</th>\n",
              "      <th>time_x</th>\n",
              "      <th>goals_1wks_x</th>\n",
              "      <th>xG_1wks_x</th>\n",
              "      <th>assists_1wks_x</th>\n",
              "      <th>xA_1wks_x</th>\n",
              "      <th>shots_1wks_x</th>\n",
              "      <th>key_passes_1wks_x</th>\n",
              "      <th>...</th>\n",
              "      <th>key_passes_1wks_y</th>\n",
              "      <th>yellow_cards</th>\n",
              "      <th>red_cards</th>\n",
              "      <th>position_y</th>\n",
              "      <th>team_title_y</th>\n",
              "      <th>npg_1wks_y</th>\n",
              "      <th>npxG_1wks_y</th>\n",
              "      <th>xGChain</th>\n",
              "      <th>xGBuildup</th>\n",
              "      <th>goals</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>6049</td>\n",
              "      <td>Solly March</td>\n",
              "      <td>1</td>\n",
              "      <td>90</td>\n",
              "      <td>2</td>\n",
              "      <td>1.4262738227844238</td>\n",
              "      <td>0</td>\n",
              "      <td>0.04624073952436447</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>M</td>\n",
              "      <td>Brighton</td>\n",
              "      <td>2</td>\n",
              "      <td>1.4262738227844238</td>\n",
              "      <td>1.812856912612915</td>\n",
              "      <td>0.386583149433136</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>6552</td>\n",
              "      <td>Bryan Mbeumo</td>\n",
              "      <td>1</td>\n",
              "      <td>90</td>\n",
              "      <td>2</td>\n",
              "      <td>1.6695406436920166</td>\n",
              "      <td>0</td>\n",
              "      <td>0.09496916830539703</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>F</td>\n",
              "      <td>Brentford</td>\n",
              "      <td>1</td>\n",
              "      <td>0.9083718061447144</td>\n",
              "      <td>0.9083718061447144</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>531</td>\n",
              "      <td>Michail Antonio</td>\n",
              "      <td>1</td>\n",
              "      <td>85</td>\n",
              "      <td>1</td>\n",
              "      <td>0.1654975563287735</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>F</td>\n",
              "      <td>West Ham</td>\n",
              "      <td>1</td>\n",
              "      <td>0.1654975563287735</td>\n",
              "      <td>0.1654975563287735</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1250</td>\n",
              "      <td>Mohamed Salah</td>\n",
              "      <td>1</td>\n",
              "      <td>90</td>\n",
              "      <td>1</td>\n",
              "      <td>1.8990148305892944</td>\n",
              "      <td>0</td>\n",
              "      <td>0.05190268158912659</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>F</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>1</td>\n",
              "      <td>1.1378459930419922</td>\n",
              "      <td>0.5016481876373291</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2517</td>\n",
              "      <td>Martin Odegaard</td>\n",
              "      <td>1</td>\n",
              "      <td>90</td>\n",
              "      <td>1</td>\n",
              "      <td>0.803106427192688</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0701504796743393</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>M</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>0</td>\n",
              "      <td>0.041974376887083054</td>\n",
              "      <td>0.598534107208252</td>\n",
              "      <td>0.5773450136184692</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>4456</td>\n",
              "      <td>Chris Wood</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>0.11083554476499557</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>S</td>\n",
              "      <td>Nottingham Forest</td>\n",
              "      <td>1</td>\n",
              "      <td>0.11083554476499557</td>\n",
              "      <td>0.11083554476499557</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>5136</td>\n",
              "      <td>Estupi√±√°n</td>\n",
              "      <td>1</td>\n",
              "      <td>90</td>\n",
              "      <td>1</td>\n",
              "      <td>0.4824194610118866</td>\n",
              "      <td>1</td>\n",
              "      <td>0.5171205401420593</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>D</td>\n",
              "      <td>Brighton</td>\n",
              "      <td>1</td>\n",
              "      <td>0.4824194610118866</td>\n",
              "      <td>2.0413382053375244</td>\n",
              "      <td>1.4992753267288208</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>5221</td>\n",
              "      <td>Leon Bailey</td>\n",
              "      <td>1</td>\n",
              "      <td>72</td>\n",
              "      <td>1</td>\n",
              "      <td>0.5992322564125061</td>\n",
              "      <td>1</td>\n",
              "      <td>0.6844462156295776</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>M</td>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>1</td>\n",
              "      <td>0.5992322564125061</td>\n",
              "      <td>1.3545973300933838</td>\n",
              "      <td>0.16907110810279846</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>5786</td>\n",
              "      <td>Yoane Wissa</td>\n",
              "      <td>1</td>\n",
              "      <td>81</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0051542520523071</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>F</td>\n",
              "      <td>Brentford</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0051542520523071</td>\n",
              "      <td>0.5309430360794067</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>6122</td>\n",
              "      <td>Douglas Luiz</td>\n",
              "      <td>1</td>\n",
              "      <td>73</td>\n",
              "      <td>1</td>\n",
              "      <td>0.7611688375473022</td>\n",
              "      <td>0</td>\n",
              "      <td>0.11424701660871506</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>M</td>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.28993558883667</td>\n",
              "      <td>1.1756885051727295</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>6854</td>\n",
              "      <td>Diogo Jota</td>\n",
              "      <td>1</td>\n",
              "      <td>80</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0893257856369019</td>\n",
              "      <td>0</td>\n",
              "      <td>0.10661134123802185</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>F</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0893257856369019</td>\n",
              "      <td>1.1574678421020508</td>\n",
              "      <td>0.030611610040068626</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>6935</td>\n",
              "      <td>Naif Aguerd</td>\n",
              "      <td>1</td>\n",
              "      <td>76</td>\n",
              "      <td>1</td>\n",
              "      <td>0.3899350166320801</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>D</td>\n",
              "      <td>West Ham</td>\n",
              "      <td>1</td>\n",
              "      <td>0.3899350166320801</td>\n",
              "      <td>0.05836445465683937</td>\n",
              "      <td>0.05836445465683937</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>7365</td>\n",
              "      <td>Lucas Paquet√°</td>\n",
              "      <td>1</td>\n",
              "      <td>90</td>\n",
              "      <td>1</td>\n",
              "      <td>0.7962145805358887</td>\n",
              "      <td>0</td>\n",
              "      <td>0.05190204828977585</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>M</td>\n",
              "      <td>West Ham</td>\n",
              "      <td>0</td>\n",
              "      <td>0.035045742988586426</td>\n",
              "      <td>0.11367495357990265</td>\n",
              "      <td>0.05836445465683937</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>7723</td>\n",
              "      <td>John McGinn</td>\n",
              "      <td>1</td>\n",
              "      <td>90</td>\n",
              "      <td>1</td>\n",
              "      <td>0.6844462156295776</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>M</td>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>1</td>\n",
              "      <td>0.6844462156295776</td>\n",
              "      <td>1.018151044845581</td>\n",
              "      <td>0.33370476961135864</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>7814</td>\n",
              "      <td>Taiwo Awoniyi</td>\n",
              "      <td>1</td>\n",
              "      <td>86</td>\n",
              "      <td>1</td>\n",
              "      <td>0.4561017155647278</td>\n",
              "      <td>0</td>\n",
              "      <td>0.07604995369911194</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>F</td>\n",
              "      <td>Nottingham Forest</td>\n",
              "      <td>1</td>\n",
              "      <td>0.4561017155647278</td>\n",
              "      <td>0.5321516394615173</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>8845</td>\n",
              "      <td>Hee-Chan Hwang</td>\n",
              "      <td>1</td>\n",
              "      <td>33</td>\n",
              "      <td>1</td>\n",
              "      <td>0.04299672693014145</td>\n",
              "      <td>0</td>\n",
              "      <td>0.6011396646499634</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>S</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>1</td>\n",
              "      <td>0.04299672693014145</td>\n",
              "      <td>0.3209632933139801</td>\n",
              "      <td>0.3209632933139801</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>9021</td>\n",
              "      <td>Pape Sarr</td>\n",
              "      <td>1</td>\n",
              "      <td>79</td>\n",
              "      <td>1</td>\n",
              "      <td>0.9928526282310486</td>\n",
              "      <td>0</td>\n",
              "      <td>0.04418836906552315</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>M</td>\n",
              "      <td>Tottenham</td>\n",
              "      <td>1</td>\n",
              "      <td>0.9928526282310486</td>\n",
              "      <td>1.3739200830459595</td>\n",
              "      <td>0.49511846899986267</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>9356</td>\n",
              "      <td>Carney Chukwuemeka</td>\n",
              "      <td>1</td>\n",
              "      <td>55</td>\n",
              "      <td>1</td>\n",
              "      <td>0.06899454444646835</td>\n",
              "      <td>0</td>\n",
              "      <td>0.1046014130115509</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>M</td>\n",
              "      <td>Chelsea</td>\n",
              "      <td>1</td>\n",
              "      <td>0.06899454444646835</td>\n",
              "      <td>0.17359596490859985</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>10408</td>\n",
              "      <td>Luis D√≠az</td>\n",
              "      <td>1</td>\n",
              "      <td>90</td>\n",
              "      <td>1</td>\n",
              "      <td>0.18966040015220642</td>\n",
              "      <td>0</td>\n",
              "      <td>0.2404429018497467</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>F</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>1</td>\n",
              "      <td>0.18966040015220642</td>\n",
              "      <td>0.6077734231948853</td>\n",
              "      <td>0.29410865902900696</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>10806</td>\n",
              "      <td>Kaoru Mitoma</td>\n",
              "      <td>1</td>\n",
              "      <td>83</td>\n",
              "      <td>1</td>\n",
              "      <td>0.4574770927429199</td>\n",
              "      <td>1</td>\n",
              "      <td>0.6252812743186951</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>...</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>M</td>\n",
              "      <td>Brighton</td>\n",
              "      <td>1</td>\n",
              "      <td>0.4574770927429199</td>\n",
              "      <td>1.1424018144607544</td>\n",
              "      <td>0.05964342877268791</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>20 rows √ó 49 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dd9544dc-1a4f-4244-8e58-261bf6a5cf2b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-dd9544dc-1a4f-4244-8e58-261bf6a5cf2b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-dd9544dc-1a4f-4244-8e58-261bf6a5cf2b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-6efb6bb3-54f8-4889-8d94-b5f47a8dbe13\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6efb6bb3-54f8-4889-8d94-b5f47a8dbe13')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-6efb6bb3-54f8-4889-8d94-b5f47a8dbe13 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 63
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "EPL_player_df['assists'] = EPL_player_df['assists_1wks_x'].astype(int)\n",
        "top25assists = EPL_player_df.nlargest(20, 'assists')\n",
        "top25assists"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 934
        },
        "id": "QhNKarUM-fT7",
        "outputId": "6fb1bbb3-090b-47cd-bd78-239884c7272e"
      },
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        id        player_name games_x time_x goals_1wks_x  \\\n",
              "67     843  James Ward-Prowse       1     90            0   \n",
              "109   3600       Serge Aurier       1     90            0   \n",
              "307  11058       Julio Enciso       1     69            0   \n",
              "6     5136          Estupi√±√°n       1     90            1   \n",
              "7     5221        Leon Bailey       1     72            1   \n",
              "19   10806       Kaoru Mitoma       1     83            1   \n",
              "87    1679    Dominic Solanke       1     90            0   \n",
              "94    2199      Pablo Sarabia       1     33            0   \n",
              "138   6055         Phil Foden       1     90            0   \n",
              "139   6063       Jacob Murphy       1      1            0   \n",
              "260   9677    Kristoffer Ajer       1      1            0   \n",
              "0     6049        Solly March       1     90            2   \n",
              "1     6552       Bryan Mbeumo       1     90            2   \n",
              "2      531    Michail Antonio       1     85            1   \n",
              "3     1250      Mohamed Salah       1     90            1   \n",
              "4     2517    Martin Odegaard       1     90            1   \n",
              "5     4456         Chris Wood       1      4            1   \n",
              "8     5786        Yoane Wissa       1     81            1   \n",
              "9     6122       Douglas Luiz       1     73            1   \n",
              "10    6854         Diogo Jota       1     80            1   \n",
              "\n",
              "                xG_1wks_x assists_1wks_x            xA_1wks_x shots_1wks_x  \\\n",
              "67   0.020264754071831703              2  0.44829946756362915            1   \n",
              "109  0.022981125861406326              2    0.566937267780304            1   \n",
              "307    0.4382677674293518              2     1.22417414188385            4   \n",
              "6      0.4824194610118866              1   0.5171205401420593            2   \n",
              "7      0.5992322564125061              1   0.6844462156295776            2   \n",
              "19     0.4574770927429199              1   0.6252812743186951            1   \n",
              "87    0.15322676301002502              1  0.09230649471282959            3   \n",
              "94    0.03142847120761871              1    0.653803288936615            1   \n",
              "138    0.2726038098335266              1   0.7770029306411743            3   \n",
              "139                     0              1   0.5514945983886719            0   \n",
              "260   0.09835804998874664              1   0.8103819489479065            1   \n",
              "0      1.4262738227844238              0  0.04624073952436447            5   \n",
              "1      1.6695406436920166              0  0.09496916830539703            3   \n",
              "2      0.1654975563287735              0                    0            2   \n",
              "3      1.8990148305892944              0  0.05190268158912659            5   \n",
              "4       0.803106427192688              0   0.0701504796743393            3   \n",
              "5     0.11083554476499557              0                    0            1   \n",
              "8      1.0051542520523071              0                    0            7   \n",
              "9      0.7611688375473022              0  0.11424701660871506            1   \n",
              "10     1.0893257856369019              0  0.10661134123802185            5   \n",
              "\n",
              "    key_passes_1wks_x  ... yellow_cards red_cards position_y  \\\n",
              "67                  2  ...            0         0          M   \n",
              "109                 2  ...            1         0          D   \n",
              "307                 2  ...            1         0          M   \n",
              "6                   2  ...            1         0          D   \n",
              "7                   1  ...            0         0          M   \n",
              "19                  4  ...            0         0          M   \n",
              "87                  2  ...            0         0          F   \n",
              "94                  2  ...            0         0          S   \n",
              "138                 7  ...            0         0          M   \n",
              "139                 2  ...            0         0          S   \n",
              "260                 1  ...            0         0          S   \n",
              "0                   1  ...            0         0          M   \n",
              "1                   1  ...            0         0          F   \n",
              "2                   0  ...            0         0          F   \n",
              "3                   2  ...            0         0          F   \n",
              "4                   1  ...            0         0          M   \n",
              "5                   0  ...            0         0          S   \n",
              "8                   0  ...            0         0          F   \n",
              "9                   1  ...            1         0          M   \n",
              "10                  2  ...            0         0          F   \n",
              "\n",
              "                team_title_y npg_1wks_y           npxG_1wks_y  \\\n",
              "67                  West Ham          0  0.020264754071831703   \n",
              "109        Nottingham Forest          0  0.022981125861406326   \n",
              "307                 Brighton          0    0.4382677674293518   \n",
              "6                   Brighton          1    0.4824194610118866   \n",
              "7                Aston Villa          1    0.5992322564125061   \n",
              "19                  Brighton          1    0.4574770927429199   \n",
              "87               Bournemouth          0   0.15322676301002502   \n",
              "94   Wolverhampton Wanderers          0   0.03142847120761871   \n",
              "138          Manchester City          0    0.2726038098335266   \n",
              "139         Newcastle United          0                     0   \n",
              "260                Brentford          0   0.09835804998874664   \n",
              "0                   Brighton          2    1.4262738227844238   \n",
              "1                  Brentford          1    0.9083718061447144   \n",
              "2                   West Ham          1    0.1654975563287735   \n",
              "3                  Liverpool          1    1.1378459930419922   \n",
              "4                    Arsenal          0  0.041974376887083054   \n",
              "5          Nottingham Forest          1   0.11083554476499557   \n",
              "8                  Brentford          1    1.0051542520523071   \n",
              "9                Aston Villa          0                     0   \n",
              "10                 Liverpool          1    1.0893257856369019   \n",
              "\n",
              "                 xGChain             xGBuildup goals assists  \n",
              "67   0.10158028453588486    0.0813155323266983     0       2  \n",
              "109   0.5813879370689392  0.014450658112764359     0       2  \n",
              "307    1.779298186302185   0.17649975419044495     0       2  \n",
              "6     2.0413382053375244    1.4992753267288208     1       1  \n",
              "7     1.3545973300933838   0.16907110810279846     1       1  \n",
              "19    1.1424018144607544   0.05964342877268791     1       1  \n",
              "87    0.1748153120279312                     0     0       1  \n",
              "94   0.12041421234607697   0.08898574113845825     0       1  \n",
              "138    1.093014121055603    0.4320891797542572     0       1  \n",
              "139   0.5514945983886719                     0     0       1  \n",
              "260   0.8103819489479065    0.8103819489479065     0       1  \n",
              "0      1.812856912612915     0.386583149433136     2       0  \n",
              "1     0.9083718061447144                     0     2       0  \n",
              "2     0.1654975563287735                     0     1       0  \n",
              "3     0.5016481876373291                     0     1       0  \n",
              "4      0.598534107208252    0.5773450136184692     1       0  \n",
              "5    0.11083554476499557                     0     1       0  \n",
              "8     0.5309430360794067                     0     1       0  \n",
              "9       1.28993558883667    1.1756885051727295     1       0  \n",
              "10    1.1574678421020508  0.030611610040068626     1       0  \n",
              "\n",
              "[20 rows x 50 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5be801c5-4bf6-44d3-8f92-7d5c5ac9046e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>player_name</th>\n",
              "      <th>games_x</th>\n",
              "      <th>time_x</th>\n",
              "      <th>goals_1wks_x</th>\n",
              "      <th>xG_1wks_x</th>\n",
              "      <th>assists_1wks_x</th>\n",
              "      <th>xA_1wks_x</th>\n",
              "      <th>shots_1wks_x</th>\n",
              "      <th>key_passes_1wks_x</th>\n",
              "      <th>...</th>\n",
              "      <th>yellow_cards</th>\n",
              "      <th>red_cards</th>\n",
              "      <th>position_y</th>\n",
              "      <th>team_title_y</th>\n",
              "      <th>npg_1wks_y</th>\n",
              "      <th>npxG_1wks_y</th>\n",
              "      <th>xGChain</th>\n",
              "      <th>xGBuildup</th>\n",
              "      <th>goals</th>\n",
              "      <th>assists</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>67</th>\n",
              "      <td>843</td>\n",
              "      <td>James Ward-Prowse</td>\n",
              "      <td>1</td>\n",
              "      <td>90</td>\n",
              "      <td>0</td>\n",
              "      <td>0.020264754071831703</td>\n",
              "      <td>2</td>\n",
              "      <td>0.44829946756362915</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>M</td>\n",
              "      <td>West Ham</td>\n",
              "      <td>0</td>\n",
              "      <td>0.020264754071831703</td>\n",
              "      <td>0.10158028453588486</td>\n",
              "      <td>0.0813155323266983</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>109</th>\n",
              "      <td>3600</td>\n",
              "      <td>Serge Aurier</td>\n",
              "      <td>1</td>\n",
              "      <td>90</td>\n",
              "      <td>0</td>\n",
              "      <td>0.022981125861406326</td>\n",
              "      <td>2</td>\n",
              "      <td>0.566937267780304</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>D</td>\n",
              "      <td>Nottingham Forest</td>\n",
              "      <td>0</td>\n",
              "      <td>0.022981125861406326</td>\n",
              "      <td>0.5813879370689392</td>\n",
              "      <td>0.014450658112764359</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>307</th>\n",
              "      <td>11058</td>\n",
              "      <td>Julio Enciso</td>\n",
              "      <td>1</td>\n",
              "      <td>69</td>\n",
              "      <td>0</td>\n",
              "      <td>0.4382677674293518</td>\n",
              "      <td>2</td>\n",
              "      <td>1.22417414188385</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>M</td>\n",
              "      <td>Brighton</td>\n",
              "      <td>0</td>\n",
              "      <td>0.4382677674293518</td>\n",
              "      <td>1.779298186302185</td>\n",
              "      <td>0.17649975419044495</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>5136</td>\n",
              "      <td>Estupi√±√°n</td>\n",
              "      <td>1</td>\n",
              "      <td>90</td>\n",
              "      <td>1</td>\n",
              "      <td>0.4824194610118866</td>\n",
              "      <td>1</td>\n",
              "      <td>0.5171205401420593</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>D</td>\n",
              "      <td>Brighton</td>\n",
              "      <td>1</td>\n",
              "      <td>0.4824194610118866</td>\n",
              "      <td>2.0413382053375244</td>\n",
              "      <td>1.4992753267288208</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>5221</td>\n",
              "      <td>Leon Bailey</td>\n",
              "      <td>1</td>\n",
              "      <td>72</td>\n",
              "      <td>1</td>\n",
              "      <td>0.5992322564125061</td>\n",
              "      <td>1</td>\n",
              "      <td>0.6844462156295776</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>M</td>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>1</td>\n",
              "      <td>0.5992322564125061</td>\n",
              "      <td>1.3545973300933838</td>\n",
              "      <td>0.16907110810279846</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>10806</td>\n",
              "      <td>Kaoru Mitoma</td>\n",
              "      <td>1</td>\n",
              "      <td>83</td>\n",
              "      <td>1</td>\n",
              "      <td>0.4574770927429199</td>\n",
              "      <td>1</td>\n",
              "      <td>0.6252812743186951</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>M</td>\n",
              "      <td>Brighton</td>\n",
              "      <td>1</td>\n",
              "      <td>0.4574770927429199</td>\n",
              "      <td>1.1424018144607544</td>\n",
              "      <td>0.05964342877268791</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>87</th>\n",
              "      <td>1679</td>\n",
              "      <td>Dominic Solanke</td>\n",
              "      <td>1</td>\n",
              "      <td>90</td>\n",
              "      <td>0</td>\n",
              "      <td>0.15322676301002502</td>\n",
              "      <td>1</td>\n",
              "      <td>0.09230649471282959</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>F</td>\n",
              "      <td>Bournemouth</td>\n",
              "      <td>0</td>\n",
              "      <td>0.15322676301002502</td>\n",
              "      <td>0.1748153120279312</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>94</th>\n",
              "      <td>2199</td>\n",
              "      <td>Pablo Sarabia</td>\n",
              "      <td>1</td>\n",
              "      <td>33</td>\n",
              "      <td>0</td>\n",
              "      <td>0.03142847120761871</td>\n",
              "      <td>1</td>\n",
              "      <td>0.653803288936615</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>S</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>0</td>\n",
              "      <td>0.03142847120761871</td>\n",
              "      <td>0.12041421234607697</td>\n",
              "      <td>0.08898574113845825</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>138</th>\n",
              "      <td>6055</td>\n",
              "      <td>Phil Foden</td>\n",
              "      <td>1</td>\n",
              "      <td>90</td>\n",
              "      <td>0</td>\n",
              "      <td>0.2726038098335266</td>\n",
              "      <td>1</td>\n",
              "      <td>0.7770029306411743</td>\n",
              "      <td>3</td>\n",
              "      <td>7</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>M</td>\n",
              "      <td>Manchester City</td>\n",
              "      <td>0</td>\n",
              "      <td>0.2726038098335266</td>\n",
              "      <td>1.093014121055603</td>\n",
              "      <td>0.4320891797542572</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>139</th>\n",
              "      <td>6063</td>\n",
              "      <td>Jacob Murphy</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.5514945983886719</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>S</td>\n",
              "      <td>Newcastle United</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.5514945983886719</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>260</th>\n",
              "      <td>9677</td>\n",
              "      <td>Kristoffer Ajer</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.09835804998874664</td>\n",
              "      <td>1</td>\n",
              "      <td>0.8103819489479065</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>S</td>\n",
              "      <td>Brentford</td>\n",
              "      <td>0</td>\n",
              "      <td>0.09835804998874664</td>\n",
              "      <td>0.8103819489479065</td>\n",
              "      <td>0.8103819489479065</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>6049</td>\n",
              "      <td>Solly March</td>\n",
              "      <td>1</td>\n",
              "      <td>90</td>\n",
              "      <td>2</td>\n",
              "      <td>1.4262738227844238</td>\n",
              "      <td>0</td>\n",
              "      <td>0.04624073952436447</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>M</td>\n",
              "      <td>Brighton</td>\n",
              "      <td>2</td>\n",
              "      <td>1.4262738227844238</td>\n",
              "      <td>1.812856912612915</td>\n",
              "      <td>0.386583149433136</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>6552</td>\n",
              "      <td>Bryan Mbeumo</td>\n",
              "      <td>1</td>\n",
              "      <td>90</td>\n",
              "      <td>2</td>\n",
              "      <td>1.6695406436920166</td>\n",
              "      <td>0</td>\n",
              "      <td>0.09496916830539703</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>F</td>\n",
              "      <td>Brentford</td>\n",
              "      <td>1</td>\n",
              "      <td>0.9083718061447144</td>\n",
              "      <td>0.9083718061447144</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>531</td>\n",
              "      <td>Michail Antonio</td>\n",
              "      <td>1</td>\n",
              "      <td>85</td>\n",
              "      <td>1</td>\n",
              "      <td>0.1654975563287735</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>F</td>\n",
              "      <td>West Ham</td>\n",
              "      <td>1</td>\n",
              "      <td>0.1654975563287735</td>\n",
              "      <td>0.1654975563287735</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1250</td>\n",
              "      <td>Mohamed Salah</td>\n",
              "      <td>1</td>\n",
              "      <td>90</td>\n",
              "      <td>1</td>\n",
              "      <td>1.8990148305892944</td>\n",
              "      <td>0</td>\n",
              "      <td>0.05190268158912659</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>F</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>1</td>\n",
              "      <td>1.1378459930419922</td>\n",
              "      <td>0.5016481876373291</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2517</td>\n",
              "      <td>Martin Odegaard</td>\n",
              "      <td>1</td>\n",
              "      <td>90</td>\n",
              "      <td>1</td>\n",
              "      <td>0.803106427192688</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0701504796743393</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>M</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>0</td>\n",
              "      <td>0.041974376887083054</td>\n",
              "      <td>0.598534107208252</td>\n",
              "      <td>0.5773450136184692</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>4456</td>\n",
              "      <td>Chris Wood</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>0.11083554476499557</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>S</td>\n",
              "      <td>Nottingham Forest</td>\n",
              "      <td>1</td>\n",
              "      <td>0.11083554476499557</td>\n",
              "      <td>0.11083554476499557</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>5786</td>\n",
              "      <td>Yoane Wissa</td>\n",
              "      <td>1</td>\n",
              "      <td>81</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0051542520523071</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>F</td>\n",
              "      <td>Brentford</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0051542520523071</td>\n",
              "      <td>0.5309430360794067</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>6122</td>\n",
              "      <td>Douglas Luiz</td>\n",
              "      <td>1</td>\n",
              "      <td>73</td>\n",
              "      <td>1</td>\n",
              "      <td>0.7611688375473022</td>\n",
              "      <td>0</td>\n",
              "      <td>0.11424701660871506</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>M</td>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.28993558883667</td>\n",
              "      <td>1.1756885051727295</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>6854</td>\n",
              "      <td>Diogo Jota</td>\n",
              "      <td>1</td>\n",
              "      <td>80</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0893257856369019</td>\n",
              "      <td>0</td>\n",
              "      <td>0.10661134123802185</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>F</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0893257856369019</td>\n",
              "      <td>1.1574678421020508</td>\n",
              "      <td>0.030611610040068626</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>20 rows √ó 50 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5be801c5-4bf6-44d3-8f92-7d5c5ac9046e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5be801c5-4bf6-44d3-8f92-7d5c5ac9046e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5be801c5-4bf6-44d3-8f92-7d5c5ac9046e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-17d7c82e-7e31-48f5-8149-f2ede5ac9b01\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-17d7c82e-7e31-48f5-8149-f2ede5ac9b01')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-17d7c82e-7e31-48f5-8149-f2ede5ac9b01 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 64
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import plotly.express as px\n",
        "import plotly.graph_objects as go"
      ],
      "metadata": {
        "id": "t81EQEbg_2jQ"
      },
      "execution_count": 65,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "fig3= go.Figure()\n",
        "fig3.add_trace(go.Scatter(x = top25goals[\"goals\"],\n",
        "                          y = top25goals[\"player_name\"],\n",
        "                          mode = 'markers',\n",
        "                          marker_color = 'darkblue',\n",
        "                          marker_size = 10,\n",
        "                          name = 'goals'))\n",
        "fig3.add_trace(go.Scatter(x = top25goals[\"xG_1wks_x\"],\n",
        "                          y = top25goals[\"player_name\"],\n",
        "                          mode = 'markers',\n",
        "                          marker_color = 'darkorange',\n",
        "                          marker_size = 10,\n",
        "                          name = 'xG'))\n",
        "for i in range(0, len(top25goals)):\n",
        "               fig3.add_shape(type='line',\n",
        "                              x0 = top25goals[\"goals\"][i],\n",
        "                              y0 = i,\n",
        "                              x1 = top25goals[\"xG_1wks_x\"][i],\n",
        "                              y1 = i,\n",
        "                              line=dict(color='crimson', width = 3))\n",
        "fig3.update_layout(title_text =\n",
        "                    \"Goals vs xG\",\n",
        "                    title_font_size = 30)\n",
        "fig3.update_xaxes(range=[0, 30])\n",
        "fig3.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "pCjmRmyw-6sd",
        "outputId": "3713f08a-f415-4647-861f-6f354d2d76d8"
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.24.1.min.js\"></script>                <div id=\"d9422cba-1eef-49b7-be9a-9c54eab1ac33\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"d9422cba-1eef-49b7-be9a-9c54eab1ac33\")) {                    Plotly.newPlot(                        \"d9422cba-1eef-49b7-be9a-9c54eab1ac33\",                        [{\"marker\":{\"color\":\"darkblue\",\"size\":10},\"mode\":\"markers\",\"name\":\"goals\",\"x\":[2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\"y\":[\"Solly March\",\"Bryan Mbeumo\",\"Michail Antonio\",\"Mohamed Salah\",\"Martin Odegaard\",\"Chris Wood\",\"Estupi\\u00f1\\u00e1n\",\"Leon Bailey\",\"Yoane Wissa\",\"Douglas Luiz\",\"Diogo Jota\",\"Naif Aguerd\",\"Lucas Paquet\\u00e1\",\"John McGinn\",\"Taiwo Awoniyi\",\"Hee-Chan Hwang\",\"Pape Sarr\",\"Carney Chukwuemeka\",\"Luis D\\u00edaz\",\"Kaoru Mitoma\"],\"type\":\"scatter\"},{\"marker\":{\"color\":\"darkorange\",\"size\":10},\"mode\":\"markers\",\"name\":\"xG\",\"x\":[\"1.4262738227844238\",\"1.6695406436920166\",\"0.1654975563287735\",\"1.8990148305892944\",\"0.803106427192688\",\"0.11083554476499557\",\"0.4824194610118866\",\"0.5992322564125061\",\"1.0051542520523071\",\"0.7611688375473022\",\"1.0893257856369019\",\"0.3899350166320801\",\"0.7962145805358887\",\"0.6844462156295776\",\"0.4561017155647278\",\"0.04299672693014145\",\"0.9928526282310486\",\"0.06899454444646835\",\"0.18966040015220642\",\"0.4574770927429199\"],\"y\":[\"Solly March\",\"Bryan Mbeumo\",\"Michail Antonio\",\"Mohamed Salah\",\"Martin Odegaard\",\"Chris Wood\",\"Estupi\\u00f1\\u00e1n\",\"Leon Bailey\",\"Yoane Wissa\",\"Douglas Luiz\",\"Diogo Jota\",\"Naif Aguerd\",\"Lucas Paquet\\u00e1\",\"John McGinn\",\"Taiwo Awoniyi\",\"Hee-Chan Hwang\",\"Pape Sarr\",\"Carney Chukwuemeka\",\"Luis D\\u00edaz\",\"Kaoru Mitoma\"],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"shapes\":[{\"line\":{\"color\":\"crimson\",\"width\":3},\"type\":\"line\",\"x0\":2,\"x1\":\"1.4262738227844238\",\"y0\":0,\"y1\":0},{\"line\":{\"color\":\"crimson\",\"width\":3},\"type\":\"line\",\"x0\":2,\"x1\":\"1.6695406436920166\",\"y0\":1,\"y1\":1},{\"line\":{\"color\":\"crimson\",\"width\":3},\"type\":\"line\",\"x0\":1,\"x1\":\"0.1654975563287735\",\"y0\":2,\"y1\":2},{\"line\":{\"color\":\"crimson\",\"width\":3},\"type\":\"line\",\"x0\":1,\"x1\":\"1.8990148305892944\",\"y0\":3,\"y1\":3},{\"line\":{\"color\":\"crimson\",\"width\":3},\"type\":\"line\",\"x0\":1,\"x1\":\"0.803106427192688\",\"y0\":4,\"y1\":4},{\"line\":{\"color\":\"crimson\",\"width\":3},\"type\":\"line\",\"x0\":1,\"x1\":\"0.11083554476499557\",\"y0\":5,\"y1\":5},{\"line\":{\"color\":\"crimson\",\"width\":3},\"type\":\"line\",\"x0\":1,\"x1\":\"0.4824194610118866\",\"y0\":6,\"y1\":6},{\"line\":{\"color\":\"crimson\",\"width\":3},\"type\":\"line\",\"x0\":1,\"x1\":\"0.5992322564125061\",\"y0\":7,\"y1\":7},{\"line\":{\"color\":\"crimson\",\"width\":3},\"type\":\"line\",\"x0\":1,\"x1\":\"1.0051542520523071\",\"y0\":8,\"y1\":8},{\"line\":{\"color\":\"crimson\",\"width\":3},\"type\":\"line\",\"x0\":1,\"x1\":\"0.7611688375473022\",\"y0\":9,\"y1\":9},{\"line\":{\"color\":\"crimson\",\"width\":3},\"type\":\"line\",\"x0\":1,\"x1\":\"1.0893257856369019\",\"y0\":10,\"y1\":10},{\"line\":{\"color\":\"crimson\",\"width\":3},\"type\":\"line\",\"x0\":1,\"x1\":\"0.3899350166320801\",\"y0\":11,\"y1\":11},{\"line\":{\"color\":\"crimson\",\"width\":3},\"type\":\"line\",\"x0\":1,\"x1\":\"0.7962145805358887\",\"y0\":12,\"y1\":12},{\"line\":{\"color\":\"crimson\",\"width\":3},\"type\":\"line\",\"x0\":1,\"x1\":\"0.6844462156295776\",\"y0\":13,\"y1\":13},{\"line\":{\"color\":\"crimson\",\"width\":3},\"type\":\"line\",\"x0\":1,\"x1\":\"0.4561017155647278\",\"y0\":14,\"y1\":14},{\"line\":{\"color\":\"crimson\",\"width\":3},\"type\":\"line\",\"x0\":1,\"x1\":\"0.04299672693014145\",\"y0\":15,\"y1\":15},{\"line\":{\"color\":\"crimson\",\"width\":3},\"type\":\"line\",\"x0\":1,\"x1\":\"0.9928526282310486\",\"y0\":16,\"y1\":16},{\"line\":{\"color\":\"crimson\",\"width\":3},\"type\":\"line\",\"x0\":1,\"x1\":\"0.06899454444646835\",\"y0\":17,\"y1\":17},{\"line\":{\"color\":\"crimson\",\"width\":3},\"type\":\"line\",\"x0\":1,\"x1\":\"0.18966040015220642\",\"y0\":18,\"y1\":18},{\"line\":{\"color\":\"crimson\",\"width\":3},\"type\":\"line\",\"x0\":1,\"x1\":\"0.4574770927429199\",\"y0\":19,\"y1\":19}],\"title\":{\"font\":{\"size\":30},\"text\":\"Goals vs xG\"},\"xaxis\":{\"range\":[0,30]}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('d9422cba-1eef-49b7-be9a-9c54eab1ac33');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "seasonedit = one_game_df.drop(columns=[ 'yellow_cards','red_cards','time'])"
      ],
      "metadata": {
        "id": "zxhwefRPFQDN"
      },
      "execution_count": 67,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "top25assists.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wSmCXk6YFSz5",
        "outputId": "86680a8f-a57a-428b-d8fe-8eac590726b9"
      },
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['id', 'player_name', 'games_x', 'time_x', 'goals_1wks_x', 'xG_1wks_x',\n",
              "       'assists_1wks_x', 'xA_1wks_x', 'shots_1wks_x', 'key_passes_1wks_x',\n",
              "       'yellow_cards_x', 'red_cards_x', 'position_x', 'team_title_x',\n",
              "       'npg_1wks_x', 'npxG_1wks_x', 'xGChain_x', 'xGBuildup_x', 'games_y',\n",
              "       'time_y', 'goals_season', 'xG_season', 'assists_season', 'xA_season',\n",
              "       'shots_season', 'key_passes_season', 'yellow_cards_y', 'red_cards_y',\n",
              "       'npg_season', 'npxG_season', 'xGChain_y', 'xGBuildup_y', 'games',\n",
              "       'time', 'goals_1wks_y', 'xG_1wks_y', 'assists_1wks_y', 'xA_1wks_y',\n",
              "       'shots_1wks_y', 'key_passes_1wks_y', 'yellow_cards', 'red_cards',\n",
              "       'position_y', 'team_title_y', 'npg_1wks_y', 'npxG_1wks_y', 'xGChain',\n",
              "       'xGBuildup', 'goals', 'assists'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 68
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "top20assists = top25assists.drop(columns=[ 'shots_1wks_x', 'key_passes_1wks_x',\n",
        "       'yellow_cards_x', 'red_cards_x', 'position_x', 'team_title_x',\n",
        "       'npg_1wks_x', 'npxG_1wks_x', 'xGChain_x', 'xGBuildup_x', 'games_y',\n",
        "       'time_y', 'goals_season', 'xG_season', 'assists_season', 'xA_season',\n",
        "       'shots_season', 'key_passes_season', 'yellow_cards_y', 'red_cards_y',\n",
        "       'npg_season', 'npxG_season', 'xGChain_y', 'xGBuildup_y', 'games',\n",
        "       'time', 'goals_1wks_y', 'xG_1wks_y', 'assists_1wks_y', 'xA_1wks_y',\n",
        "       'shots_1wks_y', 'key_passes_1wks_y', 'yellow_cards', 'red_cards',\n",
        "       'position_y', 'team_title_y', 'npg_1wks_y', 'npxG_1wks_y', 'xGChain',\n",
        "       'xGBuildup', 'assists_1wks_x', 'games_x', 'time_x', 'goals_1wks_x', 'id' ])\n",
        "\n",
        "top20assists.reset_index(inplace = True,drop = True)\n",
        "top20assists"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 677
        },
        "id": "_Xn659fiFXvb",
        "outputId": "9b9fdf51-acfa-46f1-e725-e0d23113040f"
      },
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          player_name             xG_1wks_x            xA_1wks_x  goals  \\\n",
              "0   James Ward-Prowse  0.020264754071831703  0.44829946756362915      0   \n",
              "1        Serge Aurier  0.022981125861406326    0.566937267780304      0   \n",
              "2        Julio Enciso    0.4382677674293518     1.22417414188385      0   \n",
              "3           Estupi√±√°n    0.4824194610118866   0.5171205401420593      1   \n",
              "4         Leon Bailey    0.5992322564125061   0.6844462156295776      1   \n",
              "5        Kaoru Mitoma    0.4574770927429199   0.6252812743186951      1   \n",
              "6     Dominic Solanke   0.15322676301002502  0.09230649471282959      0   \n",
              "7       Pablo Sarabia   0.03142847120761871    0.653803288936615      0   \n",
              "8          Phil Foden    0.2726038098335266   0.7770029306411743      0   \n",
              "9        Jacob Murphy                     0   0.5514945983886719      0   \n",
              "10    Kristoffer Ajer   0.09835804998874664   0.8103819489479065      0   \n",
              "11        Solly March    1.4262738227844238  0.04624073952436447      2   \n",
              "12       Bryan Mbeumo    1.6695406436920166  0.09496916830539703      2   \n",
              "13    Michail Antonio    0.1654975563287735                    0      1   \n",
              "14      Mohamed Salah    1.8990148305892944  0.05190268158912659      1   \n",
              "15    Martin Odegaard     0.803106427192688   0.0701504796743393      1   \n",
              "16         Chris Wood   0.11083554476499557                    0      1   \n",
              "17        Yoane Wissa    1.0051542520523071                    0      1   \n",
              "18       Douglas Luiz    0.7611688375473022  0.11424701660871506      1   \n",
              "19         Diogo Jota    1.0893257856369019  0.10661134123802185      1   \n",
              "\n",
              "    assists  \n",
              "0         2  \n",
              "1         2  \n",
              "2         2  \n",
              "3         1  \n",
              "4         1  \n",
              "5         1  \n",
              "6         1  \n",
              "7         1  \n",
              "8         1  \n",
              "9         1  \n",
              "10        1  \n",
              "11        0  \n",
              "12        0  \n",
              "13        0  \n",
              "14        0  \n",
              "15        0  \n",
              "16        0  \n",
              "17        0  \n",
              "18        0  \n",
              "19        0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c295ac57-304d-49a8-b6e2-77c1f48c2ea7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>player_name</th>\n",
              "      <th>xG_1wks_x</th>\n",
              "      <th>xA_1wks_x</th>\n",
              "      <th>goals</th>\n",
              "      <th>assists</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>James Ward-Prowse</td>\n",
              "      <td>0.020264754071831703</td>\n",
              "      <td>0.44829946756362915</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Serge Aurier</td>\n",
              "      <td>0.022981125861406326</td>\n",
              "      <td>0.566937267780304</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Julio Enciso</td>\n",
              "      <td>0.4382677674293518</td>\n",
              "      <td>1.22417414188385</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Estupi√±√°n</td>\n",
              "      <td>0.4824194610118866</td>\n",
              "      <td>0.5171205401420593</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Leon Bailey</td>\n",
              "      <td>0.5992322564125061</td>\n",
              "      <td>0.6844462156295776</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Kaoru Mitoma</td>\n",
              "      <td>0.4574770927429199</td>\n",
              "      <td>0.6252812743186951</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Dominic Solanke</td>\n",
              "      <td>0.15322676301002502</td>\n",
              "      <td>0.09230649471282959</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Pablo Sarabia</td>\n",
              "      <td>0.03142847120761871</td>\n",
              "      <td>0.653803288936615</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Phil Foden</td>\n",
              "      <td>0.2726038098335266</td>\n",
              "      <td>0.7770029306411743</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Jacob Murphy</td>\n",
              "      <td>0</td>\n",
              "      <td>0.5514945983886719</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Kristoffer Ajer</td>\n",
              "      <td>0.09835804998874664</td>\n",
              "      <td>0.8103819489479065</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Solly March</td>\n",
              "      <td>1.4262738227844238</td>\n",
              "      <td>0.04624073952436447</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Bryan Mbeumo</td>\n",
              "      <td>1.6695406436920166</td>\n",
              "      <td>0.09496916830539703</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Michail Antonio</td>\n",
              "      <td>0.1654975563287735</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Mohamed Salah</td>\n",
              "      <td>1.8990148305892944</td>\n",
              "      <td>0.05190268158912659</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>Martin Odegaard</td>\n",
              "      <td>0.803106427192688</td>\n",
              "      <td>0.0701504796743393</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Chris Wood</td>\n",
              "      <td>0.11083554476499557</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>Yoane Wissa</td>\n",
              "      <td>1.0051542520523071</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>Douglas Luiz</td>\n",
              "      <td>0.7611688375473022</td>\n",
              "      <td>0.11424701660871506</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>Diogo Jota</td>\n",
              "      <td>1.0893257856369019</td>\n",
              "      <td>0.10661134123802185</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c295ac57-304d-49a8-b6e2-77c1f48c2ea7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c295ac57-304d-49a8-b6e2-77c1f48c2ea7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c295ac57-304d-49a8-b6e2-77c1f48c2ea7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c8c0f194-d951-4fdb-a704-cc7caf8aab4c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c8c0f194-d951-4fdb-a704-cc7caf8aab4c')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c8c0f194-d951-4fdb-a704-cc7caf8aab4c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 69
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig4= go.Figure()\n",
        "fig4.add_trace(go.Scatter(x = top20assists[\"assists\"],\n",
        "                          y = top20assists[\"player_name\"],\n",
        "                          mode = 'markers',\n",
        "                          marker_color = 'darkblue',\n",
        "                          marker_size = 10,\n",
        "                          name = 'assists'))\n",
        "fig4.add_trace(go.Scatter(x = top20assists[\"xA_1wks_x\"],\n",
        "                          y = top20assists[\"player_name\"],\n",
        "                          mode = 'markers',\n",
        "                          marker_color = 'darkorange',\n",
        "                          marker_size = 10,\n",
        "                          name = 'xA'))\n",
        "for i in range(0, len(top20assists)):\n",
        "               fig4.add_shape(type='line',\n",
        "                              x0 = top20assists['assists'][i],\n",
        "                              y0 = i,\n",
        "                              x1 = top20assists[\"xA_1wks_x\"][i],\n",
        "                              y1 = i,\n",
        "                              line=dict(color='crimson', width = 3))\n",
        "fig4.update_layout(title_text =\n",
        "                    \"assists vs xG\",\n",
        "                    title_font_size = 15)\n",
        "fig4.update_xaxes(range=[0, 15])\n",
        "fig4.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "P6oVjqCSF4Pw",
        "outputId": "de0e626e-fd2a-4542-8261-4149cfb46705"
      },
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.24.1.min.js\"></script>                <div id=\"4ea94b43-a499-4ba7-9f26-a0527c6ce058\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"4ea94b43-a499-4ba7-9f26-a0527c6ce058\")) {                    Plotly.newPlot(                        \"4ea94b43-a499-4ba7-9f26-a0527c6ce058\",                        [{\"marker\":{\"color\":\"darkblue\",\"size\":10},\"mode\":\"markers\",\"name\":\"assists\",\"x\":[2,2,2,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0],\"y\":[\"James Ward-Prowse\",\"Serge Aurier\",\"Julio Enciso\",\"Estupi\\u00f1\\u00e1n\",\"Leon Bailey\",\"Kaoru Mitoma\",\"Dominic Solanke\",\"Pablo Sarabia\",\"Phil Foden\",\"Jacob Murphy\",\"Kristoffer Ajer\",\"Solly March\",\"Bryan Mbeumo\",\"Michail Antonio\",\"Mohamed Salah\",\"Martin Odegaard\",\"Chris Wood\",\"Yoane Wissa\",\"Douglas Luiz\",\"Diogo Jota\"],\"type\":\"scatter\"},{\"marker\":{\"color\":\"darkorange\",\"size\":10},\"mode\":\"markers\",\"name\":\"xA\",\"x\":[\"0.44829946756362915\",\"0.566937267780304\",\"1.22417414188385\",\"0.5171205401420593\",\"0.6844462156295776\",\"0.6252812743186951\",\"0.09230649471282959\",\"0.653803288936615\",\"0.7770029306411743\",\"0.5514945983886719\",\"0.8103819489479065\",\"0.04624073952436447\",\"0.09496916830539703\",\"0\",\"0.05190268158912659\",\"0.0701504796743393\",\"0\",\"0\",\"0.11424701660871506\",\"0.10661134123802185\"],\"y\":[\"James Ward-Prowse\",\"Serge Aurier\",\"Julio Enciso\",\"Estupi\\u00f1\\u00e1n\",\"Leon Bailey\",\"Kaoru Mitoma\",\"Dominic Solanke\",\"Pablo Sarabia\",\"Phil Foden\",\"Jacob Murphy\",\"Kristoffer Ajer\",\"Solly March\",\"Bryan Mbeumo\",\"Michail Antonio\",\"Mohamed Salah\",\"Martin Odegaard\",\"Chris Wood\",\"Yoane Wissa\",\"Douglas Luiz\",\"Diogo Jota\"],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"shapes\":[{\"line\":{\"color\":\"crimson\",\"width\":3},\"type\":\"line\",\"x0\":2,\"x1\":\"0.44829946756362915\",\"y0\":0,\"y1\":0},{\"line\":{\"color\":\"crimson\",\"width\":3},\"type\":\"line\",\"x0\":2,\"x1\":\"0.566937267780304\",\"y0\":1,\"y1\":1},{\"line\":{\"color\":\"crimson\",\"width\":3},\"type\":\"line\",\"x0\":2,\"x1\":\"1.22417414188385\",\"y0\":2,\"y1\":2},{\"line\":{\"color\":\"crimson\",\"width\":3},\"type\":\"line\",\"x0\":1,\"x1\":\"0.5171205401420593\",\"y0\":3,\"y1\":3},{\"line\":{\"color\":\"crimson\",\"width\":3},\"type\":\"line\",\"x0\":1,\"x1\":\"0.6844462156295776\",\"y0\":4,\"y1\":4},{\"line\":{\"color\":\"crimson\",\"width\":3},\"type\":\"line\",\"x0\":1,\"x1\":\"0.6252812743186951\",\"y0\":5,\"y1\":5},{\"line\":{\"color\":\"crimson\",\"width\":3},\"type\":\"line\",\"x0\":1,\"x1\":\"0.09230649471282959\",\"y0\":6,\"y1\":6},{\"line\":{\"color\":\"crimson\",\"width\":3},\"type\":\"line\",\"x0\":1,\"x1\":\"0.653803288936615\",\"y0\":7,\"y1\":7},{\"line\":{\"color\":\"crimson\",\"width\":3},\"type\":\"line\",\"x0\":1,\"x1\":\"0.7770029306411743\",\"y0\":8,\"y1\":8},{\"line\":{\"color\":\"crimson\",\"width\":3},\"type\":\"line\",\"x0\":1,\"x1\":\"0.5514945983886719\",\"y0\":9,\"y1\":9},{\"line\":{\"color\":\"crimson\",\"width\":3},\"type\":\"line\",\"x0\":1,\"x1\":\"0.8103819489479065\",\"y0\":10,\"y1\":10},{\"line\":{\"color\":\"crimson\",\"width\":3},\"type\":\"line\",\"x0\":0,\"x1\":\"0.04624073952436447\",\"y0\":11,\"y1\":11},{\"line\":{\"color\":\"crimson\",\"width\":3},\"type\":\"line\",\"x0\":0,\"x1\":\"0.09496916830539703\",\"y0\":12,\"y1\":12},{\"line\":{\"color\":\"crimson\",\"width\":3},\"type\":\"line\",\"x0\":0,\"x1\":\"0\",\"y0\":13,\"y1\":13},{\"line\":{\"color\":\"crimson\",\"width\":3},\"type\":\"line\",\"x0\":0,\"x1\":\"0.05190268158912659\",\"y0\":14,\"y1\":14},{\"line\":{\"color\":\"crimson\",\"width\":3},\"type\":\"line\",\"x0\":0,\"x1\":\"0.0701504796743393\",\"y0\":15,\"y1\":15},{\"line\":{\"color\":\"crimson\",\"width\":3},\"type\":\"line\",\"x0\":0,\"x1\":\"0\",\"y0\":16,\"y1\":16},{\"line\":{\"color\":\"crimson\",\"width\":3},\"type\":\"line\",\"x0\":0,\"x1\":\"0\",\"y0\":17,\"y1\":17},{\"line\":{\"color\":\"crimson\",\"width\":3},\"type\":\"line\",\"x0\":0,\"x1\":\"0.11424701660871506\",\"y0\":18,\"y1\":18},{\"line\":{\"color\":\"crimson\",\"width\":3},\"type\":\"line\",\"x0\":0,\"x1\":\"0.10661134123802185\",\"y0\":19,\"y1\":19}],\"title\":{\"font\":{\"size\":15},\"text\":\"assists vs xG\"},\"xaxis\":{\"range\":[0,15]}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('4ea94b43-a499-4ba7-9f26-a0527c6ce058');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Assuming you have already loaded the DataFrame named 'Top50'\n",
        "\n",
        "# Filter the DataFrame by position type\n",
        "midfielders = Top50[Top50['pos'] == 'M']\n",
        "forwards = Top50[Top50['pos'] == 'F']\n",
        "defenders = Top50[Top50['pos'] == 'D']\n",
        "\n",
        "# Sort the filtered DataFrames by '5GW Total' in descending order\n",
        "midfielders = midfielders.sort_values(by='5GW Total', ascending=False)\n",
        "forwards = forwards.sort_values(by='5GW Total', ascending=False)\n",
        "defenders = defenders.sort_values(by='5GW Total', ascending=False)\n",
        "\n",
        "# Plotting the bar charts\n",
        "plt.figure(figsize=(12, 6))\n",
        "\n",
        "# Midfielders chart\n",
        "plt.subplot(131)\n",
        "plt.bar(midfielders['name'][:10], midfielders['5GW Total'][:10])\n",
        "plt.title('Top 10 Midfielders by 5GW Total')\n",
        "plt.xticks(rotation=45)\n",
        "\n",
        "# Forwards chart\n",
        "plt.subplot(132)\n",
        "plt.bar(forwards['name'][:10], forwards['5GW Total'][:10])\n",
        "plt.title('Top 10 Forwards by 5GW Total')\n",
        "plt.xticks(rotation=45)\n",
        "\n",
        "# Defenders chart\n",
        "plt.subplot(133)\n",
        "plt.bar(defenders['name'][:10], defenders['5GW Total'][:10])\n",
        "plt.title('Top 10 Defenders by 5GW Total')\n",
        "plt.xticks(rotation=45)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "FN06IYwSKGLw",
        "outputId": "365297ad-2860-4bf9-a03a-9de417062692",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 601
        }
      },
      "execution_count": 71,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Assuming you have already loaded the DataFrame named 'Top50'\n",
        "\n",
        "# Filter the DataFrame by position type\n",
        "midfielders = Top50[Top50['pos'] == 'M']\n",
        "forwards = Top50[Top50['pos'] == 'F']\n",
        "defenders = Top50[Top50['pos'] == 'D']\n",
        "\n",
        "# Sort the filtered DataFrames by '5GW Total' in descending order\n",
        "midfielders = midfielders.sort_values(by='5GW Total', ascending=False)\n",
        "forwards = forwards.sort_values(by='5GW Total', ascending=False)\n",
        "defenders = defenders.sort_values(by='5GW Total', ascending=False)\n",
        "\n",
        "# Create a list of colors for each chart\n",
        "colors = ['blue', 'green', 'red']\n",
        "\n",
        "# Plotting the horizontal bar charts with different colors\n",
        "plt.figure(figsize=(10, 6))\n",
        "\n",
        "# Midfielders chart\n",
        "plt.barh(midfielders['name'][:10], midfielders['5GW Total'][:10], color=colors[0])\n",
        "plt.title('Top 10 Midfielders by 5GW Total')\n",
        "plt.xlabel('5GW Total')\n",
        "plt.gca().invert_yaxis()  # Invert y-axis to have higher values at the top\n",
        "\n",
        "# Forwards chart\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.barh(forwards['name'][:10], forwards['5GW Total'][:10], color=colors[1])\n",
        "plt.title('Top 10 Forwards by 5GW Total')\n",
        "plt.xlabel('5GW Total')\n",
        "plt.gca().invert_yaxis()  # Invert y-axis to have higher values at the top\n",
        "\n",
        "# Defenders chart\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.barh(defenders['name'][:10], defenders['5GW Total'][:10], color=colors[2])\n",
        "plt.title('Top 10 Defenders by 5GW Total')\n",
        "plt.xlabel('5GW Total')\n",
        "plt.gca().invert_yaxis()  # Invert y-axis to have higher values at the top\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "VSYcUse-SrV-",
        "outputId": "afb40e3a-bc30-47fb-c4ee-ce6a81c859a0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Assuming you have already loaded the DataFrame named 'gwadjustments26'\n",
        "\n",
        "# Set the index column\n",
        "gwadjustments26.set_index('team', inplace=True)\n",
        "\n",
        "# Create a color map\n",
        "cmap = sns.diverging_palette(240, 10, as_cmap=True)\n",
        "\n",
        "# Plot the heatmap\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.heatmap(gwadjustments26, annot=True, cmap=cmap, center=0)\n",
        "plt.title('Color-Coded Table of GW Adjustments')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "X2DQdb15YZfr",
        "outputId": "20968d7a-5d67-4d56-a8f7-ba7f9f57eee7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 653
        }
      },
      "execution_count": 73,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10, 6))\n",
        "\n",
        "scores_columns = ['gw2adjustment', 'gw3adjustment', 'gw4adjustment', 'gw5adjustment', 'gw6adjustment']\n",
        "\n",
        "bottom = [0] * len(gwadjustments26)\n",
        "\n",
        "for score_col in scores_columns:\n",
        "    plt.bar(gwadjustments26.index, gwadjustments26[score_col], bottom=bottom, label=score_col)\n",
        "    bottom += gwadjustments26[score_col]\n",
        "\n",
        "plt.xlabel('Teams')\n",
        "plt.ylabel('Score Adjustments')\n",
        "plt.title('Stacked GW Adjustments for Different Teams')\n",
        "plt.xticks(rotation=45)\n",
        "plt.legend()\n",
        "plt.tight_layout()\n",
        "\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "z7T7SgQSYyL8",
        "outputId": "1eb012f7-418a-4902-f9b7-2e28d98bc12f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 601
        }
      },
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10, 6))\n",
        "\n",
        "# Calculate the total score adjustments for each team\n",
        "gwadjustments26['Total'] = gwadjustments26.sum(axis=1)\n",
        "\n",
        "# Sort the DataFrame by the 'Total' column in descending order\n",
        "gwadjustments26 = gwadjustments26.sort_values(by='Total', ascending=False)\n",
        "\n",
        "# Get the scores columns\n",
        "scores_columns = ['gw2adjustment', 'gw3adjustment', 'gw4adjustment', 'gw5adjustment', 'gw6adjustment']\n",
        "\n",
        "bottom = [0] * len(gwadjustments26)\n",
        "\n",
        "for score_col in scores_columns:\n",
        "    plt.bar(gwadjustments26.index, gwadjustments26[score_col], bottom=bottom, label=score_col)\n",
        "    bottom += gwadjustments26[score_col]\n",
        "\n",
        "plt.xlabel('Teams')\n",
        "plt.ylabel('Score Adjustments')\n",
        "plt.title('Stacked GW Adjustments for Different Teams')\n",
        "plt.xticks(rotation=45)\n",
        "plt.legend()\n",
        "plt.tight_layout()\n",
        "\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "XxE_pa9xZB8N",
        "outputId": "2ebce432-b3a5-4c39-ab95-6a6495e74c6c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 601
        }
      },
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Assuming you have already loaded the DataFrame named 'gwadjustments26'\n",
        "\n",
        "# Set the index column\n",
        "gwadjustments26.set_index('team', inplace=True)\n",
        "\n",
        "# Create a custom color map\n",
        "cmap = sns.diverging_palette(240, 10, n=21, as_cmap=True)\n",
        "colors = ['red', 'orange', 'green']\n",
        "\n",
        "# Define color thresholds\n",
        "color_thresholds = [0.9, 1.1, 2.0]\n",
        "\n",
        "# Normalize values for coloring\n",
        "normalized_values = (gwadjustments26 - 0.9) / (2.0 - 0.9)\n",
        "\n",
        "# Apply color map and thresholds\n",
        "colored_values = pd.cut(normalized_values, bins=color_thresholds, labels=colors)\n",
        "\n",
        "# Plot the heatmap with customized color coding\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.heatmap(normalized_values, annot=True, cmap=cmap, center=1, cbar=False, fmt=\".2f\", linewidths=0.5, linecolor='white')\n",
        "plt.title('Custom Color-Coded Table of GW Adjustments')\n",
        "plt.xticks(rotation=45)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "_YnxO1yMZekH",
        "outputId": "6cb33d02-4529-490c-e580-967e92bac175",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 390
        }
      },
      "execution_count": 77,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-77-6a2b296170b4>\u001b[0m in \u001b[0;36m<cell line: 8>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;31m# Set the index column\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0mgwadjustments26\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'team'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;31m# Create a custom color map\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    329\u001b[0m                     \u001b[0mstacklevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfind_stack_level\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    330\u001b[0m                 )\n\u001b[0;32m--> 331\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    332\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    333\u001b[0m         \u001b[0;31m# error: \"Callable[[VarArg(Any), KwArg(Any)], Any]\" has no\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mset_index\u001b[0;34m(self, keys, drop, append, inplace, verify_integrity)\u001b[0m\n\u001b[1;32m   6010\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6011\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmissing\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6012\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"None of {missing} are in the columns\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6013\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6014\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: \"None of ['team'] are in the columns\""
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10, 8))\n",
        "\n",
        "# Calculate the total score adjustments for each team\n",
        "gwadjustments26['Total'] = gwadjustments26.sum(axis=1)\n",
        "\n",
        "# Sort the DataFrame by the 'Total' column in descending order\n",
        "gwadjustments26 = gwadjustments26.sort_values(by='Total', ascending=False)\n",
        "\n",
        "# Get the scores columns\n",
        "scores_columns = ['gw2adjustment', 'gw3adjustment', 'gw4adjustment', 'gw5adjustment', 'gw6adjustment']\n",
        "\n",
        "# Define color thresholds and corresponding colors\n",
        "color_thresholds = [0.9, 1.1, 2.0]\n",
        "colors = ['red', 'orange', 'green']\n",
        "\n",
        "bottom = [0] * len(gwadjustments26)\n",
        "\n",
        "for score_col in scores_columns:\n",
        "    adjusted_values = gwadjustments26[score_col]\n",
        "\n",
        "    # Create a color list based on thresholds\n",
        "    colors_for_col = [colors[-1] if val is None else\n",
        "                      colors[0] if val < color_thresholds[0] else\n",
        "                      colors[1] if val <= color_thresholds[1] else\n",
        "                      colors[2]\n",
        "                      for val in adjusted_values]\n",
        "\n",
        "    for i, (val, color) in enumerate(zip(adjusted_values, colors_for_col)):\n",
        "        plt.barh(gwadjustments26.index[i], val, color=color, edgecolor='white')\n",
        "\n",
        "    bottom += adjusted_values\n",
        "\n",
        "plt.xlabel('Score Adjustments')\n",
        "plt.ylabel('Teams')\n",
        "plt.title('Horizontally Stacked GW Adjustments for Different Teams')\n",
        "plt.legend(labels=scores_columns)\n",
        "plt.gca().invert_yaxis()  # Invert y-axis to have higher values at the top\n",
        "plt.tight_layout()\n",
        "\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "5agSlfUragM2",
        "outputId": "9e8f4db9-3a0b-4253-c8dd-ac1982507a42",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 801
        }
      },
      "execution_count": 84,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}